function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}function n(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,n)||t(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var r={exports:{}},a={},o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function u(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var s,c=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,r,a=u(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))i.call(n,c)&&(a[c]=n[c]);if(o){r=o(n);for(var f=0;f<r.length;f++)l.call(n,r[f])&&(a[r[f]]=n[r[f]])}}return a};
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */s=a,function(){var e=c,t=60103,n=60106;s.Fragment=60107,s.StrictMode=60108,s.Profiler=60114;var r=60109,a=60110,o=60112;s.Suspense=60113;var i=60120,l=60115,u=60116,f=60121,d=60122,p=60117,m=60129,h=60131;if("function"==typeof Symbol&&Symbol.for){var v=Symbol.for;t=v("react.element"),n=v("react.portal"),s.Fragment=v("react.fragment"),s.StrictMode=v("react.strict_mode"),s.Profiler=v("react.profiler"),r=v("react.provider"),a=v("react.context"),o=v("react.forward_ref"),s.Suspense=v("react.suspense"),i=v("react.suspense_list"),l=v("react.memo"),u=v("react.lazy"),f=v("react.block"),d=v("react.server.block"),p=v("react.fundamental"),v("react.scope"),v("react.opaque.id"),m=v("react.debug_trace_mode"),v("react.offscreen"),h=v("react.legacy_hidden")}var g="function"==typeof Symbol&&Symbol.iterator;function y(e){if(null===e||"object"!=typeof e)return null;var t=g&&e[g]||e["@@iterator"];return"function"==typeof t?t:null}var b={current:null},w={current:null},k={},E=null;function x(e){E=e}k.setExtraStackFrame=function(e){E=e},k.getCurrentStack=null,k.getStackAddendum=function(){var e="";E&&(e+=E);var t=k.getCurrentStack;return t&&(e+=t()||""),e};var S={ReactCurrentDispatcher:b,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:e};function C(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];N("warn",e,n)}function T(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];N("error",e,n)}function N(e,t,n){var r=S.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var a=n.map((function(e){return""+e}));a.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,a)}S.ReactDebugCurrentFrame=k;var R={};function P(e,t){var n=e.constructor,r=n&&(n.displayName||n.name)||"ReactClass",a=r+"."+t;R[a]||(T("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,r),R[a]=!0)}var _={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){P(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,r){P(e,"replaceState")},enqueueSetState:function(e,t,n,r){P(e,"setState")}},D={};function I(e,t,n){this.props=e,this.context=t,this.refs=D,this.updater=n||_}Object.freeze(D),I.prototype.isReactComponent={},I.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},I.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var O={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},L=function(e,t){Object.defineProperty(I.prototype,e,{get:function(){C("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var M in O)O.hasOwnProperty(M)&&L(M,O[M]);function F(){}function z(e,t,n){this.props=e,this.context=t,this.refs=D,this.updater=n||_}F.prototype=I.prototype;var A=z.prototype=new F;function j(e){return e.displayName||"Context"}function U(e){if(null==e)return null;if("number"==typeof e.tag&&T("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case s.Fragment:return"Fragment";case n:return"Portal";case s.Profiler:return"Profiler";case s.StrictMode:return"StrictMode";case s.Suspense:return"Suspense";case i:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case a:return j(e)+".Consumer";case r:return j(e._context)+".Provider";case o:return p=e,m=e.render,h="ForwardRef",v=m.displayName||m.name||"",p.displayName||(""!==v?h+"("+v+")":h);case l:return U(e.type);case f:return U(e._render);case u:var t=e,c=t._payload,d=t._init;try{return U(d(c))}catch(e){return null}}var p,m,h,v;return null}A.constructor=z,e(A,I.prototype),A.isPureReactComponent=!0;var W,B,V,H=Object.prototype.hasOwnProperty,$={key:!0,ref:!0,__self:!0,__source:!0};function Y(e){if(H.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function q(e){if(H.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function Q(e,t){var n=function(){W||(W=!0,T("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function K(e,t){var n=function(){B||(B=!0,T("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}function G(e){if("string"==typeof e.ref&&w.current&&e.__self&&w.current.stateNode!==e.__self){var t=U(w.current.type);V[t]||(T('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),V[t]=!0)}}V={};var X=function(e,n,r,a,o,i,l){var u={$$typeof:t,type:e,key:n,ref:r,props:l,_owner:i,_store:{}};return Object.defineProperty(u._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(u,"_self",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.defineProperty(u,"_source",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.freeze&&(Object.freeze(u.props),Object.freeze(u)),u};function J(e,t,n){var r,a={},o=null,i=null,l=null,u=null;if(null!=t)for(r in Y(t)&&(i=t.ref,G(t)),q(t)&&(o=""+t.key),l=void 0===t.__self?null:t.__self,u=void 0===t.__source?null:t.__source,t)H.call(t,r)&&!$.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(s>1){for(var c=Array(s),f=0;f<s;f++)c[f]=arguments[f+2];Object.freeze&&Object.freeze(c),a.children=c}if(e&&e.defaultProps){var d=e.defaultProps;for(r in d)void 0===a[r]&&(a[r]=d[r])}if(o||i){var p="function"==typeof e?e.displayName||e.name||"Unknown":e;o&&Q(a,p),i&&K(a,p)}return X(e,o,i,l,u,w.current,a)}function Z(t,n,r){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var a,o,i=e({},t.props),l=t.key,u=t.ref,s=t._self,c=t._source,f=t._owner;if(null!=n)for(a in Y(n)&&(u=n.ref,f=w.current),q(n)&&(l=""+n.key),t.type&&t.type.defaultProps&&(o=t.type.defaultProps),n)H.call(n,a)&&!$.hasOwnProperty(a)&&(void 0===n[a]&&void 0!==o?i[a]=o[a]:i[a]=n[a]);var d=arguments.length-2;if(1===d)i.children=r;else if(d>1){for(var p=Array(d),m=0;m<d;m++)p[m]=arguments[m+2];i.children=p}return X(t.type,l,u,s,c,f,i)}function ee(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var te=!1,ne=/\/+/g;function re(e){return e.replace(ne,"$&/")}function ae(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function oe(e,r,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u,s,c,f=!1;if(null===e)f=!0;else switch(l){case"string":case"number":f=!0;break;case"object":switch(e.$$typeof){case t:case n:f=!0}}if(f){var d=e,p=i(d),m=""===o?"."+ae(d,0):o;if(Array.isArray(p)){var h="";null!=m&&(h=re(m)+"/"),oe(p,r,h,"",(function(e){return e}))}else null!=p&&(ee(p)&&(u=p,s=a+(!p.key||d&&d.key===p.key?"":re(""+p.key)+"/")+m,p=X(u.type,s,u.ref,u._self,u._source,u._owner,u.props)),r.push(p));return 1}var v=0,g=""===o?".":o+":";if(Array.isArray(e))for(var b=0;b<e.length;b++)v+=oe(c=e[b],r,a,g+ae(c,b),i);else{var w=y(e);if("function"==typeof w){var k=e;w===k.entries&&(te||C("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),te=!0);for(var E,x=w.call(k),S=0;!(E=x.next()).done;)v+=oe(c=E.value,r,a,g+ae(c,S++),i)}else if("object"===l){var T=""+e;throw Error("Objects are not valid as a React child (found: "+("[object Object]"===T?"object with keys {"+Object.keys(e).join(", ")+"}":T)+"). If you meant to render a collection of children, use an array instead.")}}return v}function ie(e,t,n){if(null==e)return e;var r=[],a=0;return oe(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function le(e){if(-1===e._status){var t=(0,e._result)(),n=e;n._status=0,n._result=t,t.then((function(t){if(0===e._status){var n=t.default;void 0===n&&T("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t);var r=e;r._status=1,r._result=n}}),(function(t){if(0===e._status){var n=e;n._status=2,n._result=t}}))}if(1===e._status)return e._result;throw e._result}function ue(e){return"string"==typeof e||"function"==typeof e||e===s.Fragment||e===s.Profiler||e===m||e===s.StrictMode||e===s.Suspense||e===i||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===u||e.$$typeof===l||e.$$typeof===r||e.$$typeof===a||e.$$typeof===o||e.$$typeof===p||e.$$typeof===f||e[0]===d)}function se(){var e=b.current;if(null===e)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");return e}var ce,fe,de,pe,me,he,ve,ge=0;function ye(){}ye.__reactDisabledLog=!0;var be,we=S.ReactCurrentDispatcher;function ke(e,t,n){if(void 0===be)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);be=r&&r[1]||""}return"\n"+be+e}var Ee,xe=!1,Se="function"==typeof WeakMap?WeakMap:Map;function Ce(t,n){if(!t||xe)return"";var r,a=Ee.get(t);if(void 0!==a)return a;xe=!0;var o,i=Error.prepareStackTrace;Error.prepareStackTrace=void 0,o=we.current,we.current=null,function(){if(0===ge){ce=console.log,fe=console.info,de=console.warn,pe=console.error,me=console.group,he=console.groupCollapsed,ve=console.groupEnd;var e={configurable:!0,enumerable:!0,value:ye,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}ge++}();try{if(n){var l=function(){throw Error()};if(Object.defineProperty(l.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(l,[])}catch(e){r=e}Reflect.construct(t,[],l)}else{try{l.call()}catch(e){r=e}t.call(l.prototype)}}else{try{throw Error()}catch(e){r=e}t()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var u=e.stack.split("\n"),s=r.stack.split("\n"),c=u.length-1,f=s.length-1;c>=1&&f>=0&&u[c]!==s[f];)f--;for(;c>=1&&f>=0;c--,f--)if(u[c]!==s[f]){if(1!==c||1!==f)do{if(c--,--f<0||u[c]!==s[f]){var d="\n"+u[c].replace(" at new "," at ");return"function"==typeof t&&Ee.set(t,d),d}}while(c>=1&&f>=0);break}}}finally{xe=!1,we.current=o,function(){if(0==--ge){var t={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:e({},t,{value:ce}),info:e({},t,{value:fe}),warn:e({},t,{value:de}),error:e({},t,{value:pe}),group:e({},t,{value:me}),groupCollapsed:e({},t,{value:he}),groupEnd:e({},t,{value:ve})})}ge<0&&T("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=i}var p=t?t.displayName||t.name:"",m=p?ke(p):"";return"function"==typeof t&&Ee.set(t,m),m}function Te(e,t,n){return Ce(e,!1)}function Ne(e,t,n){if(null==e)return"";if("function"==typeof e)return Ce(e,function(e){var t=e.prototype;return!(!t||!t.isReactComponent)}(e));if("string"==typeof e)return ke(e);switch(e){case s.Suspense:return ke("Suspense");case i:return ke("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case o:return Te(e.render);case l:return Ne(e.type,t,n);case f:return Te(e._render);case u:var r=e,a=r._payload,c=r._init;try{return Ne(c(a),t,n)}catch(e){}}return""}Ee=new Se;var Re,Pe={},_e=S.ReactDebugCurrentFrame;function De(e){if(e){var t=e._owner,n=Ne(e.type,e._source,t?t.type:null);_e.setExtraStackFrame(n)}else _e.setExtraStackFrame(null)}function Ie(e){if(e){var t=e._owner;x(Ne(e.type,e._source,t?t.type:null))}else x(null)}function Oe(){if(w.current){var e=U(w.current.type);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}function Le(e){return null!=e&&void 0!==(t=e.__source)?"\n\nCheck your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+".":"";var t}Re=!1;var Me={};function Fe(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=function(e){var t=Oe();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t="\n\nCheck the top-level render call using <"+n+">.")}return t}(t);if(!Me[n]){Me[n]=!0;var r="";e&&e._owner&&e._owner!==w.current&&(r=" It was passed a child from "+U(e._owner.type)+"."),Ie(e),T('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,r),Ie(null)}}}function ze(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];ee(r)&&Fe(r,t)}else if(ee(e))e._store&&(e._store.validated=!0);else if(e){var a=y(e);if("function"==typeof a&&a!==e.entries)for(var o,i=a.call(e);!(o=i.next()).done;)ee(o.value)&&Fe(o.value,t)}}function Ae(e){var t,n=e.type;if(null!=n&&"string"!=typeof n){if("function"==typeof n)t=n.propTypes;else{if("object"!=typeof n||n.$$typeof!==o&&n.$$typeof!==l)return;t=n.propTypes}if(t){var r=U(n);!function(e,t,n,r,a){var o=Function.call.bind(Object.prototype.hasOwnProperty);for(var i in e)if(o(e,i)){var l=void 0;try{if("function"!=typeof e[i]){var u=Error((r||"React class")+": "+n+" type `"+i+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[i]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw u.name="Invariant Violation",u}l=e[i](t,i,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){l=e}!l||l instanceof Error||(De(a),T("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,i,typeof l),De(null)),l instanceof Error&&!(l.message in Pe)&&(Pe[l.message]=!0,De(a),T("Failed %s type: %s",n,l.message),De(null))}}(t,e.props,"prop",r,e)}else void 0===n.PropTypes||Re||(Re=!0,T("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",U(n)||"Unknown"));"function"!=typeof n.getDefaultProps||n.getDefaultProps.isReactClassApproved||T("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function je(e){for(var t=Object.keys(e.props),n=0;n<t.length;n++){var r=t[n];if("children"!==r&&"key"!==r){Ie(e),T("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",r),Ie(null);break}}null!==e.ref&&(Ie(e),T("Invalid attribute `ref` supplied to `React.Fragment`."),Ie(null))}function Ue(e,n,r){var a=ue(e);if(!a){var o="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(o+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var i,l=Le(n);o+=l||Oe(),null===e?i="null":Array.isArray(e)?i="array":void 0!==e&&e.$$typeof===t?(i="<"+(U(e.type)||"Unknown")+" />",o=" Did you accidentally export a JSX literal instead of a component?"):i=typeof e,T("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",i,o)}var u=J.apply(this,arguments);if(null==u)return u;if(a)for(var c=2;c<arguments.length;c++)ze(arguments[c],e);return e===s.Fragment?je(u):Ae(u),u}var We=!1;try{var Be=Object.freeze({});new Map([[Be,null]]),new Set([Be])}catch(e){}var Ve=Ue,He=function(e,t,n){for(var r=Z.apply(this,arguments),a=2;a<arguments.length;a++)ze(arguments[a],r.type);return Ae(r),r},$e=function(e){var t=Ue.bind(null,e);return t.type=e,We||(We=!0,C("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return C("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},Ye={map:ie,forEach:function(e,t,n){ie(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return ie(e,(function(){t++})),t},toArray:function(e){return ie(e,(function(e){return e}))||[]},only:function(e){if(!ee(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};s.Children=Ye,s.Component=I,s.PureComponent=z,s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=S,s.cloneElement=He,s.createContext=function(e,t){void 0===t?t=null:null!==t&&"function"!=typeof t&&T("createContext: Expected the optional second argument to be a function. Instead received: %s",t);var n={$$typeof:a,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null};n.Provider={$$typeof:r,_context:n};var o=!1,i=!1,l=!1,u={$$typeof:a,_context:n,_calculateChangedBits:n._calculateChangedBits};return Object.defineProperties(u,{Provider:{get:function(){return i||(i=!0,T("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),n.Provider},set:function(e){n.Provider=e}},_currentValue:{get:function(){return n._currentValue},set:function(e){n._currentValue=e}},_currentValue2:{get:function(){return n._currentValue2},set:function(e){n._currentValue2=e}},_threadCount:{get:function(){return n._threadCount},set:function(e){n._threadCount=e}},Consumer:{get:function(){return o||(o=!0,T("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),n.Consumer}},displayName:{get:function(){return n.displayName},set:function(e){l||(C("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",e),l=!0)}}}),n.Consumer=u,n._currentRenderer=null,n._currentRenderer2=null,n},s.createElement=Ve,s.createFactory=$e,s.createRef=function(){var e={current:null};return Object.seal(e),e},s.forwardRef=function(e){null!=e&&e.$$typeof===l?T("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?T("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&T("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&(null==e.defaultProps&&null==e.propTypes||T("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"));var t,n={$$typeof:o,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,null==e.displayName&&(e.displayName=n)}}),n},s.isValidElement=ee,s.lazy=function(e){var t,n,r={$$typeof:u,_payload:{_status:-1,_result:e},_init:le};return Object.defineProperties(r,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){T("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),t=e,Object.defineProperty(r,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return n},set:function(e){T("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),n=e,Object.defineProperty(r,"propTypes",{enumerable:!0})}}}),r},s.memo=function(e,t){ue(e)||T("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e);var n,r={$$typeof:l,type:e,compare:void 0===t?null:t};return Object.defineProperty(r,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,null==e.displayName&&(e.displayName=t)}}),r},s.useCallback=function(e,t){return se().useCallback(e,t)},s.useContext=function(e,t){var n=se();if(void 0!==t&&T("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s",t,"number"==typeof t&&Array.isArray(arguments[2])?"\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks":""),void 0!==e._context){var r=e._context;r.Consumer===e?T("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):r.Provider===e&&T("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return n.useContext(e,t)},s.useDebugValue=function(e,t){return se().useDebugValue(e,t)},s.useEffect=function(e,t){return se().useEffect(e,t)},s.useImperativeHandle=function(e,t,n){return se().useImperativeHandle(e,t,n)},s.useLayoutEffect=function(e,t){return se().useLayoutEffect(e,t)},s.useMemo=function(e,t){return se().useMemo(e,t)},s.useReducer=function(e,t,n){return se().useReducer(e,t,n)},s.useRef=function(e){return se().useRef(e)},s.useState=function(e){return se().useState(e)},s.version="17.0.2"}(),r.exports=a;var f=r.exports,d={exports:{}},p={},m={exports:{}},h={};
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function(e){!function(){var t,n,r,a;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;e.unstable_now=function(){return o.now()}}else{var i=Date,l=i.now();e.unstable_now=function(){return i.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var t=e.unstable_now();u(!0,t),u=null}catch(e){throw setTimeout(c,0),e}};t=function(e){null!==u?setTimeout(t,0,e):(u=e,setTimeout(c,0))},n=function(e,t){s=setTimeout(e,t)},r=function(){clearTimeout(s)},e.unstable_shouldYield=function(){return!1},a=e.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var p=window.requestAnimationFrame,m=window.cancelAnimationFrame;"function"!=typeof p&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,v=null,g=-1,y=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},a=function(){},e.unstable_forceFrameRate=function(e){e<0||e>125?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=e>0?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var t=e.unstable_now();b=t+y;try{v(!0,t)?k.postMessage(null):(h=!1,v=null)}catch(e){throw k.postMessage(null),e}}else h=!1},t=function(e){v=e,h||(h=!0,k.postMessage(null))},n=function(t,n){g=f((function(){t(e.unstable_now())}),n)},r=function(){d(g),g=-1}}function E(e,t){var n=e.length;e.push(t),function(e,t,n){var r=n;for(;;){var a=r-1>>>1,o=e[a];if(!(void 0!==o&&C(o,t)>0))return;e[a]=t,e[r]=o,r=a}}(e,t,n)}function x(e){var t=e[0];return void 0===t?null:t}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();return n!==t&&(e[0]=n,function(e,t,n){var r=n,a=e.length;for(;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&C(i,t)<0)void 0!==u&&C(u,i)<0?(e[r]=u,e[l]=t,r=l):(e[r]=i,e[o]=t,r=o);else{if(!(void 0!==u&&C(u,t)<0))return;e[r]=u,e[l]=t,r=l}}}(e,n,0)),t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],N=[],R=1,P=null,_=3,D=!1,I=!1,O=!1;function L(e){for(var t=x(N);null!==t;){if(null===t.callback)S(N);else{if(!(t.startTime<=e))return;S(N),t.sortIndex=t.expirationTime,E(T,t)}t=x(N)}}function M(e){if(O=!1,L(e),!I)if(null!==x(T))I=!0,t(F);else{var r=x(N);null!==r&&n(M,r.startTime-e)}}function F(t,a){I=!1,O&&(O=!1,r()),D=!0;var o=_;try{return function(t,r){var a=r;L(a),P=x(T);for(;null!==P&&(!(P.expirationTime>a)||t&&!e.unstable_shouldYield());){var o=P.callback;if("function"==typeof o){P.callback=null,_=P.priorityLevel;var i=o(P.expirationTime<=a);a=e.unstable_now(),"function"==typeof i?P.callback=i:P===x(T)&&S(T),L(a)}else S(T);P=x(T)}if(null!==P)return!0;var l=x(N);return null!==l&&n(M,l.startTime-a),!1}(t,a)}finally{P=null,_=o,D=!1}}var z=a;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(e){e.callback=null},e.unstable_continueExecution=function(){I||D||(I=!0,t(F))},e.unstable_getCurrentPriorityLevel=function(){return _},e.unstable_getFirstCallbackNode=function(){return x(T)},e.unstable_next=function(e){var t;switch(_){case 1:case 2:case 3:t=3;break;default:t=_}var n=_;_=t;try{return e()}finally{_=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=z,e.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=_;_=e;try{return t()}finally{_=n}},e.unstable_scheduleCallback=function(a,o,i){var l,u,s=e.unstable_now();if("object"==typeof i&&null!==i){var c=i.delay;l="number"==typeof c&&c>0?s+c:s}else l=s;switch(a){case 1:u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}var f=l+u,d={id:R++,callback:o,priorityLevel:a,startTime:l,expirationTime:f,sortIndex:-1};return l>s?(d.sortIndex=l,E(N,d),null===x(T)&&d===x(N)&&(O?r():O=!0,n(M,l-s))):(d.sortIndex=f,E(T,d),I||D||(I=!0,t(F))),d},e.unstable_wrapCallback=function(e){var t=_;return function(){var n=_;_=t;try{return e.apply(this,arguments)}finally{_=n}}}}()}(h),m.exports=h;var v={exports:{}},g={};
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function(e){!function(){var t=0,n=0;e.__interactionsRef=null,e.__subscriberRef=null,e.__interactionsRef={current:new Set},e.__subscriberRef={current:null};var r=null;function a(e){var t=!1,n=null;if(r.forEach((function(r){try{r.onInteractionTraced(e)}catch(e){t||(t=!0,n=e)}})),t)throw n}function o(e){var t=!1,n=null;if(r.forEach((function(r){try{r.onInteractionScheduledWorkCompleted(e)}catch(e){t||(t=!0,n=e)}})),t)throw n}function i(e,t){var n=!1,a=null;if(r.forEach((function(r){try{r.onWorkScheduled(e,t)}catch(e){n||(n=!0,a=e)}})),n)throw a}function l(e,t){var n=!1,a=null;if(r.forEach((function(r){try{r.onWorkStarted(e,t)}catch(e){n||(n=!0,a=e)}})),n)throw a}function u(e,t){var n=!1,a=null;if(r.forEach((function(r){try{r.onWorkStopped(e,t)}catch(e){n||(n=!0,a=e)}})),n)throw a}function s(e,t){var n=!1,a=null;if(r.forEach((function(r){try{r.onWorkCanceled(e,t)}catch(e){n||(n=!0,a=e)}})),n)throw a}r=new Set,e.unstable_clear=function(t){var n=e.__interactionsRef.current;e.__interactionsRef.current=new Set;try{return t()}finally{e.__interactionsRef.current=n}},e.unstable_getCurrent=function(){return e.__interactionsRef.current},e.unstable_getThreadID=function(){return++n},e.unstable_subscribe=function(t){r.add(t),1===r.size&&(e.__subscriberRef.current={onInteractionScheduledWorkCompleted:o,onInteractionTraced:a,onWorkCanceled:s,onWorkScheduled:i,onWorkStarted:l,onWorkStopped:u})},e.unstable_trace=function(n,r,a){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i={__count:1,id:t++,name:n,timestamp:r},l=e.__interactionsRef.current,u=new Set(l);u.add(i),e.__interactionsRef.current=u;var s,c=e.__subscriberRef.current;try{null!==c&&c.onInteractionTraced(i)}finally{try{null!==c&&c.onWorkStarted(u,o)}finally{try{s=a()}finally{e.__interactionsRef.current=l;try{null!==c&&c.onWorkStopped(u,o)}finally{i.__count--,null!==c&&0===i.__count&&c.onInteractionScheduledWorkCompleted(i)}}}}return s},e.unstable_unsubscribe=function(t){r.delete(t),0===r.size&&(e.__subscriberRef.current=null)},e.unstable_wrap=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=e.__interactionsRef.current,a=e.__subscriberRef.current;null!==a&&a.onWorkScheduled(r,n),r.forEach((function(e){e.__count++}));var o=!1;function i(){var i=e.__interactionsRef.current;e.__interactionsRef.current=r,a=e.__subscriberRef.current;try{var l;try{null!==a&&a.onWorkStarted(r,n)}finally{try{l=t.apply(void 0,arguments)}finally{e.__interactionsRef.current=i,null!==a&&a.onWorkStopped(r,n)}}return l}finally{o||(o=!0,r.forEach((function(e){e.__count--,null!==a&&0===e.__count&&a.onInteractionScheduledWorkCompleted(e)})))}}return i.cancel=function(){a=e.__subscriberRef.current;try{null!==a&&a.onWorkCanceled(r,n)}finally{r.forEach((function(e){e.__count--,a&&0===e.__count&&a.onInteractionScheduledWorkCompleted(e)}))}},i}}()}(g),v.exports=g,function(){var e=r.exports,t=c,n=m.exports,a=v.exports,o=e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function i(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];u("warn",e,n)}function l(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];u("error",e,n)}function u(e,t,n){var r=o.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var a=n.map((function(e){return""+e}));a.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,a)}if(!e)throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");var s=10,f=11,d=12,h=13,g=14,y=15,b=17,w=19,k=20,E=22,x=23,S=24,C=!1,T=new Set,N={},R={};function P(e,t){_(e,t),_(e+"Capture",t)}function _(e,t){N[e]&&l("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",e),N[e]=t;var n=e.toLowerCase();R[n]=e,"onDoubleClick"===e&&(R.ondblclick=e);for(var r=0;r<t.length;r++)T.add(t[r])}var D=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),I=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",O=I+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",L="data-reactroot",M=new RegExp("^["+I+"]["+O+"]*$"),F=Object.prototype.hasOwnProperty,z={},A={};function j(e){return!!F.call(A,e)||!F.call(z,e)&&(M.test(e)?(A[e]=!0,!0):(z[e]=!0,l("Invalid attribute name: `%s`",e),!1))}function U(e,t,n){return null!==t?0===t.type:!n&&(e.length>2&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))}function W(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(r)return!1;if(null!==n)return!n.acceptsBooleans;var a=e.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}function B(e,t,n,r){if(null==t)return!0;if(W(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||t<1}return!1}function V(e){return $.hasOwnProperty(e)?$[e]:null}function H(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var $={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach((function(e){$[e]=new H(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0],n=e[1];$[t]=new H(t,1,!1,n,null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){$[e]=new H(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){$[e]=new H(e,2,!1,e,null,!1,!1)})),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","disableRemotePlayback","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach((function(e){$[e]=new H(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){$[e]=new H(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){$[e]=new H(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){$[e]=new H(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){$[e]=new H(e,5,!1,e.toLowerCase(),null,!1,!1)}));var Y=/[\-\:]([a-z])/g,q=function(e){return e[1].toUpperCase()};["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach((function(e){var t=e.replace(Y,q);$[t]=new H(t,1,!1,e,null,!1,!1)})),["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach((function(e){var t=e.replace(Y,q);$[t]=new H(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Y,q);$[t]=new H(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){$[e]=new H(e,1,!1,e.toLowerCase(),null,!1,!1)}));$.xlinkHref=new H("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){$[e]=new H(e,1,!1,e.toLowerCase(),null,!0,!0)}));var Q=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i,K=!1;function G(e){!K&&Q.test(e)&&(K=!0,l("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",JSON.stringify(e)))}function X(e,t,n,r){if(r.mustUseProperty)return e[r.propertyName];r.sanitizeURL&&G(""+n);var a=r.attributeName,o=null;if(4===r.type){if(e.hasAttribute(a)){var i=e.getAttribute(a);return""===i||(B(t,n,r,!1)?i:i===""+n?n:i)}}else if(e.hasAttribute(a)){if(B(t,n,r,!1))return e.getAttribute(a);if(3===r.type)return n;o=e.getAttribute(a)}return B(t,n,r,!1)?null===o?n:o:o===""+n?n:o}function J(e,t,n){if(j(t)){if(function(e){return null!==e&&"object"==typeof e&&e.$$typeof===pe}(n))return n;if(!e.hasAttribute(t))return void 0===n?void 0:null;var r=e.getAttribute(t);return r===""+n?n:r}}function Z(e,t,n,r){var a=V(t);if(!U(t,a,r))if(B(t,n,a,r)&&(n=null),r||null===a){if(j(t)){var o=t;null===n?e.removeAttribute(o):e.setAttribute(o,""+n)}}else if(a.mustUseProperty){var i=a.propertyName;if(null===n){var l=a.type;e[i]=3!==l&&""}else e[i]=n}else{var u=a.attributeName,s=a.attributeNamespace;if(null===n)e.removeAttribute(u);else{var c,f=a.type;3===f||4===f&&!0===n?c="":(c=""+n,a.sanitizeURL&&G(c.toString())),s?e.setAttributeNS(s,u,c):e.setAttribute(u,c)}}}var ee=60103,te=60106,ne=60107,re=60108,ae=60114,oe=60109,ie=60110,le=60112,ue=60113,se=60120,ce=60115,fe=60116,de=60121,pe=60128,me=60129,he=60130,ve=60131;if("function"==typeof Symbol&&Symbol.for){var ge=Symbol.for;ee=ge("react.element"),te=ge("react.portal"),ne=ge("react.fragment"),re=ge("react.strict_mode"),ae=ge("react.profiler"),oe=ge("react.provider"),ie=ge("react.context"),le=ge("react.forward_ref"),ue=ge("react.suspense"),se=ge("react.suspense_list"),ce=ge("react.memo"),fe=ge("react.lazy"),de=ge("react.block"),ge("react.server.block"),ge("react.fundamental"),ge("react.scope"),pe=ge("react.opaque.id"),me=ge("react.debug_trace_mode"),he=ge("react.offscreen"),ve=ge("react.legacy_hidden")}var ye="function"==typeof Symbol&&Symbol.iterator;function be(e){if(null===e||"object"!=typeof e)return null;var t=ye&&e[ye]||e["@@iterator"];return"function"==typeof t?t:null}var we,ke,Ee,xe,Se,Ce,Te,Ne=0;function Re(){}function Pe(){if(0===Ne){we=console.log,ke=console.info,Ee=console.warn,xe=console.error,Se=console.group,Ce=console.groupCollapsed,Te=console.groupEnd;var e={configurable:!0,enumerable:!0,value:Re,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Ne++}function _e(){if(0===--Ne){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:t({},e,{value:we}),info:t({},e,{value:ke}),warn:t({},e,{value:Ee}),error:t({},e,{value:xe}),group:t({},e,{value:Se}),groupCollapsed:t({},e,{value:Ce}),groupEnd:t({},e,{value:Te})})}Ne<0&&l("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}Re.__reactDisabledLog=!0;var De,Ie=o.ReactCurrentDispatcher;function Oe(e,t,n){if(void 0===De)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);De=r&&r[1]||""}return"\n"+De+e}var Le,Me=!1,Fe="function"==typeof WeakMap?WeakMap:Map;function ze(e,t){if(!e||Me)return"";var n,r=Le.get(e);if(void 0!==r)return r;Me=!0;var a,o=Error.prepareStackTrace;Error.prepareStackTrace=void 0,a=Ie.current,Ie.current=null,Pe();try{if(t){var i=function(){throw Error()};if(Object.defineProperty(i.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(i,[])}catch(e){n=e}Reflect.construct(e,[],i)}else{try{i.call()}catch(e){n=e}e.call(i.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var l=t.stack.split("\n"),u=n.stack.split("\n"),s=l.length-1,c=u.length-1;s>=1&&c>=0&&l[s]!==u[c];)c--;for(;s>=1&&c>=0;s--,c--)if(l[s]!==u[c]){if(1!==s||1!==c)do{if(s--,--c<0||l[s]!==u[c]){var f="\n"+l[s].replace(" at new "," at ");return"function"==typeof e&&Le.set(e,f),f}}while(s>=1&&c>=0);break}}}finally{Me=!1,Ie.current=a,_e(),Error.prepareStackTrace=o}var d=e?e.displayName||e.name:"",p=d?Oe(d):"";return"function"==typeof e&&Le.set(e,p),p}function Ae(e,t,n){return ze(e,!1)}function je(e,t,n){if(null==e)return"";if("function"==typeof e)return ze(e,!(!(r=e.prototype)||!r.isReactComponent));var r;if("string"==typeof e)return Oe(e);switch(e){case ue:return Oe("Suspense");case se:return Oe("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case le:return Ae(e.render);case ce:return je(e.type,t,n);case de:return Ae(e._render);case fe:var a=e,o=a._payload,i=a._init;try{return je(i(o),t,n)}catch(e){}}return""}function Ue(e){switch(e._debugOwner&&e._debugOwner.type,e._debugSource,e.tag){case 5:return Oe(e.type);case 16:return Oe("Lazy");case h:return Oe("Suspense");case w:return Oe("SuspenseList");case 0:case 2:case y:return Ae(e.type);case f:return Ae(e.type.render);case E:return Ae(e.type._render);case 1:return ze(e.type,!0);default:return""}}function We(e){try{var t="",n=e;do{t+=Ue(n),n=n.return}while(n);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function Be(e){return e.displayName||"Context"}function Ve(e){if(null==e)return null;if("number"==typeof e.tag&&l("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ae:return"Profiler";case re:return"StrictMode";case ue:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return Be(e)+".Consumer";case oe:return Be(e._context)+".Provider";case le:return a=e,o=e.render,i="ForwardRef",u=o.displayName||o.name||"",a.displayName||(""!==u?i+"("+u+")":i);case ce:return Ve(e.type);case de:return Ve(e._render);case fe:var t=e,n=t._payload,r=t._init;try{return Ve(r(n))}catch(e){return null}}var a,o,i,u;return null}Le=new Fe;var He=o.ReactDebugCurrentFrame,$e=null,Ye=!1;function qe(){if(null===$e)return null;var e=$e._debugOwner;return null!=e?Ve(e.type):null}function Qe(){return null===$e?"":We($e)}function Ke(){He.getCurrentStack=null,$e=null,Ye=!1}function Ge(e){He.getCurrentStack=Qe,$e=e,Ye=!1}function Xe(e){Ye=e}function Je(e){return""+e}function Ze(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}var et={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0};function tt(e,t){et[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||l("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."),t.onChange||t.readOnly||t.disabled||null==t.checked||l("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}function nt(e){var t=e.type,n=e.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){return e._valueTracker}function at(e){rt(e)||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable});var i={getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}};return i}}(e))}function ot(e){if(!e)return!1;var t=rt(e);if(!t)return!0;var n=t.getValue(),r=function(e){var t="";return e?t=nt(e)?e.checked?"true":"false":e.value:t}(e);return r!==n&&(t.setValue(r),!0)}function it(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var lt=!1,ut=!1,st=!1,ct=!1;function ft(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function dt(e,n){var r=e,a=n.checked;return t({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=a?a:r._wrapperState.initialChecked})}function pt(e,t){tt(0,t),void 0===t.checked||void 0===t.defaultChecked||ut||(l("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",qe()||"A component",t.type),ut=!0),void 0===t.value||void 0===t.defaultValue||lt||(l("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",qe()||"A component",t.type),lt=!0);var n=e,r=null==t.defaultValue?"":t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Ze(null!=t.value?t.value:r),controlled:ft(t)}}function mt(e,t){var n=e,r=t.checked;null!=r&&Z(n,"checked",r,!1)}function ht(e,t){var n=e,r=ft(t);n._wrapperState.controlled||!r||ct||(l("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"),ct=!0),!n._wrapperState.controlled||r||st||(l("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"),st=!0),mt(e,t);var a=Ze(t.value),o=t.type;if(null!=a)"number"===o?(0===a&&""===n.value||n.value!=a)&&(n.value=Je(a)):n.value!==Je(a)&&(n.value=Je(a));else if("submit"===o||"reset"===o)return void n.removeAttribute("value");t.hasOwnProperty("value")?yt(n,t.type,a):t.hasOwnProperty("defaultValue")&&yt(n,t.type,Ze(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked)}function vt(e,t,n){var r=e;if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var a=t.type;if(("submit"===a||"reset"===a)&&(void 0===t.value||null===t.value))return;var o=Je(r._wrapperState.initialValue);n||o!==r.value&&(r.value=o),r.defaultValue=o}var i=r.name;""!==i&&(r.name=""),r.defaultChecked=!r.defaultChecked,r.defaultChecked=!!r._wrapperState.initialChecked,""!==i&&(r.name=i)}function gt(e,t){var n=e;ht(n,t),function(e,t){var n=t.name;if("radio"===t.type&&null!=n){for(var r=e;r.parentNode;)r=r.parentNode;for(var a=r.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),o=0;o<a.length;o++){var i=a[o];if(i!==e&&i.form===e.form){var l=wu(i);if(!l)throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");ot(i),ht(i,l)}}}}(n,t)}function yt(e,t,n){"number"===t&&it(e.ownerDocument)===e||(null==n?e.defaultValue=Je(e._wrapperState.initialValue):e.defaultValue!==Je(n)&&(e.defaultValue=Je(n)))}var bt,wt=!1,kt=!1;function Et(t,n){"object"==typeof n.children&&null!==n.children&&e.Children.forEach(n.children,(function(e){null!=e&&"string"!=typeof e&&"number"!=typeof e&&"string"==typeof e.type&&(kt||(kt=!0,l("Only strings and numbers are supported as <option> children.")))})),null==n.selected||wt||(l("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),wt=!0)}function xt(n,r){var a=t({children:void 0},r),o=function(t){var n="";return e.Children.forEach(t,(function(e){null!=e&&(n+=e)})),n}(r.children);return o&&(a.children=o),a}function St(){var e=qe();return e?"\n\nCheck the render method of `"+e+"`.":""}bt=!1;var Ct=["value","defaultValue"];function Tt(e,t,n,r){var a=e.options;if(t){for(var o=n,i={},l=0;l<o.length;l++)i["$"+o[l]]=!0;for(var u=0;u<a.length;u++){var s=i.hasOwnProperty("$"+a[u].value);a[u].selected!==s&&(a[u].selected=s),s&&r&&(a[u].defaultSelected=!0)}}else{for(var c=Je(Ze(n)),f=null,d=0;d<a.length;d++){if(a[d].value===c)return a[d].selected=!0,void(r&&(a[d].defaultSelected=!0));null!==f||a[d].disabled||(f=a[d])}null!==f&&(f.selected=!0)}}function Nt(e,n){return t({},n,{value:void 0})}function Rt(e,t){var n=e;!function(e){tt(0,e);for(var t=0;t<Ct.length;t++){var n=Ct[t];if(null!=e[n]){var r=Array.isArray(e[n]);e.multiple&&!r?l("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,St()):!e.multiple&&r&&l("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,St())}}}(t),n._wrapperState={wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||bt||(l("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"),bt=!0)}var Pt=!1;function _t(e,n){var r=e;if(null!=n.dangerouslySetInnerHTML)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");return t({},n,{value:void 0,defaultValue:void 0,children:Je(r._wrapperState.initialValue)})}function Dt(e,t){var n=e;tt(0,t),void 0===t.value||void 0===t.defaultValue||Pt||(l("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components",qe()||"A component"),Pt=!0);var r=t.value;if(null==r){var a=t.children,o=t.defaultValue;if(null!=a){if(l("Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=o)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(Array.isArray(a)){if(!(a.length<=1))throw Error("<textarea> can only have at most one child.");a=a[0]}o=a}null==o&&(o=""),r=o}n._wrapperState={initialValue:Ze(r)}}function It(e,t){var n=e,r=Ze(t.value),a=Ze(t.defaultValue);if(null!=r){var o=Je(r);o!==n.value&&(n.value=o),null==t.defaultValue&&n.defaultValue!==o&&(n.defaultValue=o)}null!=a&&(n.defaultValue=Je(a))}function Ot(e,t){var n=e,r=n.textContent;r===n._wrapperState.initialValue&&""!==r&&null!==r&&(n.value=r)}var Lt="http://www.w3.org/1999/xhtml",Mt="http://www.w3.org/1998/Math/MathML",Ft="http://www.w3.org/2000/svg",zt=Lt,At=Ft;function jt(e){switch(e){case"svg":return Ft;case"math":return Mt;default:return Lt}}function Ut(e,t){return null==e||e===Lt?jt(t):e===Ft&&"foreignObject"===t?Lt:e}var Wt,Bt,Vt=(Bt=function(e,t){if(e.namespaceURI!==At||"innerHTML"in e)e.innerHTML=t;else{(Wt=Wt||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>";for(var n=Wt.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Bt(e,t,n,r)}))}:Bt),Ht=8,$t=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t},Yt={animation:["animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction"],background:["backgroundAttachment","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize"],backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:["borderBottomColor","borderBottomStyle","borderBottomWidth","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","borderTopColor","borderTopStyle","borderTopWidth"],borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:["fontFamily","fontFeatureSettings","fontKerning","fontLanguageOverride","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontWeight","lineHeight"],fontVariant:["fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition"],gap:["columnGap","rowGap"],grid:["gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:["maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPositionX","maskPositionY","maskRepeat","maskSize"],maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},qt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var Qt=["Webkit","ms","Moz","O"];function Kt(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||qt.hasOwnProperty(e)&&qt[e]?(""+t).trim():t+"px"}Object.keys(qt).forEach((function(e){Qt.forEach((function(t){qt[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=qt[e]}))}));var Gt=/([A-Z])/g,Xt=/^ms-/;var Jt=/^(?:webkit|moz|o)[A-Z]/,Zt=/^-ms-/,en=/-(.)/g,tn=/;\s*$/,nn={},rn={},an=!1,on=!1,ln=function(e){nn.hasOwnProperty(e)&&nn[e]||(nn[e]=!0,l("Unsupported style property %s. Did you mean %s?",e,e.replace(Zt,"ms-").replace(en,(function(e,t){return t.toUpperCase()}))))},un=function(e,t){e.indexOf("-")>-1?ln(e):Jt.test(e)?function(e){nn.hasOwnProperty(e)&&nn[e]||(nn[e]=!0,l("Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)))}(e):tn.test(t)&&function(e,t){rn.hasOwnProperty(t)&&rn[t]||(rn[t]=!0,l('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(tn,"")))}(e,t),"number"==typeof t&&(isNaN(t)?function(e,t){an||(an=!0,l("`NaN` is an invalid value for the `%s` css style property.",e))}(e):isFinite(t)||function(e,t){on||(on=!0,l("`Infinity` is an invalid value for the `%s` css style property.",e))}(e))};function sn(e){var t="",n="";for(var r in e)if(e.hasOwnProperty(r)){var a=e[r];if(null!=a){var o=0===r.indexOf("--");t+=n+(o?r:r.replace(Gt,"-$1").toLowerCase().replace(Xt,"-ms-"))+":",t+=Kt(r,a,o),n=";"}}return t||null}function cn(e,t){var n=e.style;for(var r in t)if(t.hasOwnProperty(r)){var a=0===r.indexOf("--");a||un(r,t[r]);var o=Kt(r,t[r],a);"float"===r&&(r="cssFloat"),a?n.setProperty(r,o):n[r]=o}}function fn(e){var t={};for(var n in e)for(var r=Yt[n]||[n],a=0;a<r.length;a++)t[r[a]]=n;return t}var dn=t({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function pn(e,t){if(t){if(dn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(e+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.")}if(!t.suppressContentEditableWarning&&t.contentEditable&&null!=t.children&&l("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),null!=t.style&&"object"!=typeof t.style)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.")}}function mn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var hn={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",disableremoteplayback:"disableRemotePlayback",download:"download",draggable:"draggable",enctype:"encType",enterkeyhint:"enterKeyHint",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},vn={"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},gn={},yn=new RegExp("^(aria)-["+O+"]*$"),bn=new RegExp("^(aria)[A-Z]["+O+"]*$"),wn=Object.prototype.hasOwnProperty;function kn(e,t){if(wn.call(gn,t)&&gn[t])return!0;if(bn.test(t)){var n="aria-"+t.slice(4).toLowerCase(),r=vn.hasOwnProperty(n)?n:null;if(null==r)return l("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),gn[t]=!0,!0;if(t!==r)return l("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,r),gn[t]=!0,!0}if(yn.test(t)){var a=t.toLowerCase(),o=vn.hasOwnProperty(a)?a:null;if(null==o)return gn[t]=!0,!1;if(t!==o)return l("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,o),gn[t]=!0,!0}return!0}function En(e,t){mn(e,t)||function(e,t){var n=[];for(var r in t)kn(0,r)||n.push(r);var a=n.map((function(e){return"`"+e+"`"})).join(", ");1===n.length?l("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",a,e):n.length>1&&l("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",a,e)}(e,t)}var xn=!1;var Sn,Cn={},Tn=Object.prototype.hasOwnProperty,Nn=/^on./,Rn=/^on[^A-Z]/,Pn=new RegExp("^(aria)-["+O+"]*$"),_n=new RegExp("^(aria)[A-Z]["+O+"]*$");Sn=function(e,t,n,r){if(Tn.call(Cn,t)&&Cn[t])return!0;var a=t.toLowerCase();if("onfocusin"===a||"onfocusout"===a)return l("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Cn[t]=!0,!0;if(null!=r){var o=r.registrationNameDependencies,i=r.possibleRegistrationNames;if(o.hasOwnProperty(t))return!0;var u=i.hasOwnProperty(a)?i[a]:null;if(null!=u)return l("Invalid event handler property `%s`. Did you mean `%s`?",t,u),Cn[t]=!0,!0;if(Nn.test(t))return l("Unknown event handler property `%s`. It will be ignored.",t),Cn[t]=!0,!0}else if(Nn.test(t))return Rn.test(t)&&l("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),Cn[t]=!0,!0;if(Pn.test(t)||_n.test(t))return!0;if("innerhtml"===a)return l("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Cn[t]=!0,!0;if("aria"===a)return l("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Cn[t]=!0,!0;if("is"===a&&null!=n&&"string"!=typeof n)return l("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof n),Cn[t]=!0,!0;if("number"==typeof n&&isNaN(n))return l("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),Cn[t]=!0,!0;var s=V(t),c=null!==s&&0===s.type;if(hn.hasOwnProperty(a)){var f=hn[a];if(f!==t)return l("Invalid DOM property `%s`. Did you mean `%s`?",t,f),Cn[t]=!0,!0}else if(!c&&t!==a)return l("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,a),Cn[t]=!0,!0;return"boolean"==typeof n&&W(t,n,s,!1)?(n?l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',n,t,t,n,t):l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),Cn[t]=!0,!0):!!c||(W(t,n,s,!1)?(Cn[t]=!0,!1):("false"!==n&&"true"!==n||null===s||3!==s.type||(l("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",n,t,"false"===n?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,n),Cn[t]=!0),!0))};function Dn(e,t,n){mn(e,t)||function(e,t,n){var r=[];for(var a in t)Sn(0,a,t[a],n)||r.push(a);var o=r.map((function(e){return"`"+e+"`"})).join(", ");1===r.length?l("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",o,e):r.length>1&&l("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",o,e)}(e,t,n)}function In(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var On=null,Ln=null,Mn=null;function Fn(e){var t=yu(e);if(t){if("function"!=typeof On)throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");var n=t.stateNode;if(n){var r=wu(n);On(t.stateNode,t.type,r)}}}function zn(e){Ln?Mn?Mn.push(e):Mn=[e]:Ln=e}function An(){if(Ln){var e=Ln,t=Mn;if(Ln=null,Mn=null,Fn(e),t)for(var n=0;n<t.length;n++)Fn(t[n])}}var jn=function(e,t){return e(t)},Un=function(e,t,n,r,a){return e(t,n,r,a)},Wn=function(){},Bn=jn,Vn=!1,Hn=!1;function $n(){(null!==Ln||null!==Mn)&&(Wn(),An())}function Yn(e,t){var n=e.stateNode;if(null===n)return null;var r=wu(n);if(null===r)return null;var a=r[t];if(function(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":return!(!n.disabled||(r=t,"button"!==r&&"input"!==r&&"select"!==r&&"textarea"!==r));default:return!1}var r}(t,e.type,r))return null;if(a&&"function"!=typeof a)throw Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof a+"` type.");return a}var qn=!1;if(D)try{var Qn={};Object.defineProperty(Qn,"passive",{get:function(){qn=!0}}),window.addEventListener("test",Qn,Qn),window.removeEventListener("test",Qn,Qn)}catch(e){qn=!1}function Kn(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Gn=Kn;if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var Xn=document.createElement("react");Gn=function(e,t,n,r,a,o,i,l,u){if("undefined"==typeof document)throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var s=document.createEvent("Event"),c=!1,f=!0,d=window.event,p=Object.getOwnPropertyDescriptor(window,"event");function m(){Xn.removeEventListener(k,g,!1),void 0!==window.event&&window.hasOwnProperty("event")&&(window.event=d)}var h,v=Array.prototype.slice.call(arguments,3);function g(){c=!0,m(),t.apply(n,v),f=!1}var y=!1,b=!1;function w(e){if(h=e.error,y=!0,null===h&&0===e.colno&&0===e.lineno&&(b=!0),e.defaultPrevented&&null!=h&&"object"==typeof h)try{h._suppressLogging=!0}catch(e){}}var k="react-"+(e||"invokeguardedcallback");if(window.addEventListener("error",w),Xn.addEventListener(k,g,!1),s.initEvent(k,!1,!1),Xn.dispatchEvent(s),p&&Object.defineProperty(window,"event",p),c&&f&&(y?b&&(h=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")):h=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this.onError(h)),window.removeEventListener("error",w),!c)return m(),Kn.apply(this,arguments)}}var Jn=Gn,Zn=!1,er=null,tr=!1,nr=null,rr={onError:function(e){Zn=!0,er=e}};function ar(e,t,n,r,a,o,i,l,u){Zn=!1,er=null,Jn.apply(rr,arguments)}function or(){return Zn}function ir(){if(Zn){var e=er;return Zn=!1,er=null,e}throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}function lr(e){return e._reactInternals}var ur,sr,cr,fr,dr=64,pr=128,mr=256,hr=512,vr=8192,gr=1024,yr=2048,br=4096,wr=16384,kr=o.ReactCurrentOwner;function Er(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{var r=t;do{0!=(1026&(t=r).flags)&&(n=t.return),r=t.return}while(r)}return 3===t.tag?n:null}function xr(e){if(e.tag===h){var t=e.memoizedState;if(null===t){var n=e.alternate;null!==n&&(t=n.memoizedState)}if(null!==t)return t.dehydrated}return null}function Sr(e){return 3===e.tag?e.stateNode.containerInfo:null}function Cr(e){if(Er(e)!==e)throw Error("Unable to find node on an unmounted component.")}function Tr(e){var t=e.alternate;if(!t){var n=Er(e);if(null===n)throw Error("Unable to find node on an unmounted component.");return n!==e?null:e}for(var r=e,a=t;;){var o=r.return;if(null===o)break;var i=o.alternate;if(null===i){var l=o.return;if(null!==l){r=a=l;continue}break}if(o.child===i.child){for(var u=o.child;u;){if(u===r)return Cr(o),e;if(u===a)return Cr(o),t;u=u.sibling}throw Error("Unable to find node on an unmounted component.")}if(r.return!==a.return)r=o,a=i;else{for(var s=!1,c=o.child;c;){if(c===r){s=!0,r=o,a=i;break}if(c===a){s=!0,a=o,r=i;break}c=c.sibling}if(!s){for(c=i.child;c;){if(c===r){s=!0,r=i,a=o;break}if(c===a){s=!0,a=i,r=o;break}c=c.sibling}if(!s)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(r.alternate!==a)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==r.tag)throw Error("Unable to find node on an unmounted component.");return r.stateNode.current===r?e:t}function Nr(e){var t=Tr(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}function Rr(e,t){for(var n=t,r=e.alternate;null!==n;){if(n===e||n===r)return!0;n=n.return}return!1}var Pr=!1,_r=[],Dr=null,Ir=null,Or=null,Lr=new Map,Mr=new Map,Fr=[];var zr=["mousedown","mouseup","touchcancel","touchend","touchstart","auxclick","dblclick","pointercancel","pointerdown","pointerup","dragend","dragstart","drop","compositionend","compositionstart","keydown","keypress","keyup","input","textInput","copy","cut","paste","click","change","contextmenu","reset","submit"];function Ar(e){return zr.indexOf(e)>-1}function jr(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function Ur(e,t,n,r,a){var o=jr(e,t,n,r,a);_r.push(o)}function Wr(e,t){switch(e){case"focusin":case"focusout":Dr=null;break;case"dragenter":case"dragleave":Ir=null;break;case"mouseover":case"mouseout":Or=null;break;case"pointerover":case"pointerout":var n=t.pointerId;Lr.delete(n);break;case"gotpointercapture":case"lostpointercapture":var r=t.pointerId;Mr.delete(r)}}function Br(e,t,n,r,a,o){if(null===e||e.nativeEvent!==o){var i=jr(t,n,r,a,o);if(null!==t){var l=yu(t);null!==l&&sr(l)}return i}e.eventSystemFlags|=r;var u=e.targetContainers;return null!==a&&-1===u.indexOf(a)&&u.push(a),e}function Vr(e){var t=gu(e.target);if(null!==t){var r=Er(t);if(null!==r){var a=r.tag;if(a===h){var o=xr(r);if(null!==o)return e.blockedOn=o,void fr(e.lanePriority,(function(){n.unstable_runWithPriority(e.priority,(function(){cr(r)}))}))}else if(3===a){if(r.stateNode.hydrate)return void(e.blockedOn=Sr(r))}}}e.blockedOn=null}function Hr(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;t.length>0;){var n=t[0],r=Za(e.domEventName,e.eventSystemFlags,n,e.nativeEvent);if(null!==r){var a=yu(r);return null!==a&&sr(a),e.blockedOn=r,!1}t.shift()}return!0}function $r(e,t,n){Hr(e)&&n.delete(t)}function Yr(){for(Pr=!1;_r.length>0;){var e=_r[0];if(null!==e.blockedOn){var t=yu(e.blockedOn);null!==t&&ur(t);break}for(var n=e.targetContainers;n.length>0;){var r=n[0],a=Za(e.domEventName,e.eventSystemFlags,r,e.nativeEvent);if(null!==a){e.blockedOn=a;break}n.shift()}null===e.blockedOn&&_r.shift()}null!==Dr&&Hr(Dr)&&(Dr=null),null!==Ir&&Hr(Ir)&&(Ir=null),null!==Or&&Hr(Or)&&(Or=null),Lr.forEach($r),Mr.forEach($r)}function qr(e,t){e.blockedOn===t&&(e.blockedOn=null,Pr||(Pr=!0,n.unstable_scheduleCallback(n.unstable_NormalPriority,Yr)))}function Qr(e){if(_r.length>0){qr(_r[0],e);for(var t=1;t<_r.length;t++){var n=_r[t];n.blockedOn===e&&(n.blockedOn=null)}}null!==Dr&&qr(Dr,e),null!==Ir&&qr(Ir,e),null!==Or&&qr(Or,e);var r=function(t){return qr(t,e)};Lr.forEach(r),Mr.forEach(r);for(var a=0;a<Fr.length;a++){var o=Fr[a];o.blockedOn===e&&(o.blockedOn=null)}for(;Fr.length>0;){var i=Fr[0];if(null!==i.blockedOn)break;Vr(i),null===i.blockedOn&&Fr.shift()}}function Kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Gr={animationend:Kr("Animation","AnimationEnd"),animationiteration:Kr("Animation","AnimationIteration"),animationstart:Kr("Animation","AnimationStart"),transitionend:Kr("Transition","TransitionEnd")},Xr={},Jr={};function Zr(e){if(Xr[e])return Xr[e];if(!Gr[e])return e;var t=Gr[e];for(var n in t)if(t.hasOwnProperty(n)&&n in Jr)return Xr[e]=t[n];return e}D&&(Jr=document.createElement("div").style,"AnimationEvent"in window||(delete Gr.animationend.animation,delete Gr.animationiteration.animation,delete Gr.animationstart.animation),"TransitionEvent"in window||delete Gr.transitionend.transition);var ea=Zr("animationend"),ta=Zr("animationiteration"),na=Zr("animationstart"),ra=Zr("transitionend"),aa=new Map,oa=new Map,ia=["cancel","cancel","click","click","close","close","contextmenu","contextMenu","copy","copy","cut","cut","auxclick","auxClick","dblclick","doubleClick","dragend","dragEnd","dragstart","dragStart","drop","drop","focusin","focus","focusout","blur","input","input","invalid","invalid","keydown","keyDown","keypress","keyPress","keyup","keyUp","mousedown","mouseDown","mouseup","mouseUp","paste","paste","pause","pause","play","play","pointercancel","pointerCancel","pointerdown","pointerDown","pointerup","pointerUp","ratechange","rateChange","reset","reset","seeked","seeked","submit","submit","touchcancel","touchCancel","touchend","touchEnd","touchstart","touchStart","volumechange","volumeChange"],la=["change","selectionchange","textInput","compositionstart","compositionend","compositionupdate"],ua=["drag","drag","dragenter","dragEnter","dragexit","dragExit","dragleave","dragLeave","dragover","dragOver","mousemove","mouseMove","mouseout","mouseOut","mouseover","mouseOver","pointermove","pointerMove","pointerout","pointerOut","pointerover","pointerOver","scroll","scroll","toggle","toggle","touchmove","touchMove","wheel","wheel"],sa=["abort","abort",ea,"animationEnd",ta,"animationIteration",na,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",ra,"transitionEnd","waiting","waiting"];function ca(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],o="on"+(a[0].toUpperCase()+a.slice(1));oa.set(r,t),aa.set(r,o),P(o,[r])}}var fa=n.unstable_now;if(null==a.__interactionsRef||null==a.__interactionsRef.current)throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");fa();var da=15,pa=10,ma=3584,ha=4186112,va=62914560,ga=33554432,ya=67108864,ba=134217727,wa=134217728,ka=805306368,Ea=1073741824,xa=-1;var Sa=8;function Ca(e){if(0!=(1&e))return Sa=da,1;if(0!=(2&e))return Sa=14,2;if(0!=(4&e))return Sa=13,4;var t=24&e;if(0!==t)return Sa=12,t;if(0!=(32&e))return Sa=11,32;var n=192&e;if(0!==n)return Sa=pa,n;if(0!=(256&e))return Sa=9,256;var r=ma&e;if(0!==r)return Sa=8,r;if(0!=(4096&e))return Sa=7,4096;var a=ha&e;if(0!==a)return Sa=6,a;var o=va&e;if(0!==o)return Sa=5,o;if(e&ya)return Sa=4,ya;if(0!=(e&wa))return Sa=3,wa;var i=ka&e;return 0!==i?(Sa=2,i):0!=(Ea&e)?(Sa=1,Ea):(l("Should have found matching lanes. This is a bug in React."),Sa=8,e)}function Ta(e,t){var n=e.pendingLanes;if(0===n)return Sa=0,0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=Sa=da;else{var u=n&ba;if(0!==u){var s=u&~i;if(0!==s)r=Ca(s),a=Sa;else{var c=u&l;0!==c&&(r=Ca(c),a=Sa)}}else{var f=n&~i;0!==f?(r=Ca(f),a=Sa):0!==l&&(r=Ca(l),a=Sa)}}if(0===r)return 0;if(r=n&function(e){return(function(e){var t=31-Ba(e);return t<0?0:1<<t}(e)<<1)-1}(r),0!==t&&t!==r&&0==(t&i)){if(Ca(t),a<=Sa)return t;Sa=a}var d=e.entangledLanes;if(0!==d)for(var p=e.entanglements,m=r&d;m>0;){var h=Oa(m),v=1<<h;r|=p[h],m&=~v}return r}function Na(e,t){Ca(e);return Sa>=pa?t+250:Sa>=6?t+5e3:xa}function Ra(e){var t=-1073741825&e.pendingLanes;return 0!==t?t:t&Ea?Ea:0}function Pa(e){return 0!=(e&ba)}function _a(e){return(e&va)===e}function Da(e,t){switch(e){case 0:break;case da:return 1;case 14:return 2;case 12:var n=Ia(24&~t);return 0===n?Da(pa,t):n;case pa:var r=Ia(192&~t);return 0===r?Da(8,t):r;case 8:var a=Ia(ma&~t);return 0===a&&0===(a=Ia(ha&~t))&&(a=Ia(ma)),a;case 6:case 5:break;case 2:var o=Ia(ka&~t);return 0===o&&(o=Ia(ka)),o}throw Error("Invalid update priority: "+e+". This is a bug in React.")}function Ia(e){return function(e){return e&-e}(e)}function Oa(e){return 31-Ba(e)}function La(e,t){return 0!=(e&t)}function Ma(e,t){return(e&t)===t}function Fa(e,t){return e|t}function za(e,t){return e&~t}function Aa(e){for(var t=[],n=0;n<31;n++)t.push(e);return t}function ja(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,e.eventTimes[Oa(t)]=n}function Ua(e,t,n){e.pingedLanes|=e.suspendedLanes&t}function Wa(e,t){e.mutableReadLanes|=t&e.pendingLanes}var Ba=Math.clz32?Math.clz32:function(e){if(0===e)return 32;return 31-(Va(e)/Ha|0)|0},Va=Math.log,Ha=Math.LN2;var $a=n.unstable_UserBlockingPriority,Ya=n.unstable_runWithPriority,qa=!0;function Qa(e){qa=!!e}function Ka(e,t,n){var r,a=function(e){var t=oa.get(e);return void 0===t?2:t}(t);switch(a){case 0:r=Ga;break;case 1:r=Xa;break;default:r=Ja}return r.bind(null,t,n,e)}function Ga(e,t,n,r){r.timeStamp,Vn||Wn(),function(e,t,n,r,a){var o=Vn;Vn=!0;try{Un(e,t,n,r,a)}finally{(Vn=o)||$n()}}(Ja,e,t,n,r)}function Xa(e,t,n,r){Ya($a,Ja.bind(null,e,t,n,r))}function Ja(e,t,n,r){if(qa){var a;if((a=0==(4&t))&&_r.length>0&&Ar(e))Ur(null,e,t,n,r);else{var o=Za(e,t,n,r);if(null!==o){if(a){if(Ar(e))return void Ur(o,e,t,n,r);if(function(e,t,n,r,a){switch(t){case"focusin":return Dr=Br(Dr,e,t,n,r,a),!0;case"dragenter":return Ir=Br(Ir,e,t,n,r,a),!0;case"mouseover":return Or=Br(Or,e,t,n,r,a),!0;case"pointerover":var o=a,i=o.pointerId;return Lr.set(i,Br(Lr.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":var l=a,u=l.pointerId;return Mr.set(u,Br(Mr.get(u)||null,e,t,n,r,l)),!0}return!1}(o,e,t,n,r))return;Wr(e,r)}qi(e,t,r,null,n)}else a&&Wr(e,r)}}}function Za(e,t,n,r){var a=gu(In(r));if(null!==a){var o=Er(a);if(null===o)a=null;else{var i=o.tag;if(i===h){var l=xr(o);if(null!==l)return l;a=null}else if(3===i){if(o.stateNode.hydrate)return Sr(o);a=null}else o!==a&&(a=null)}}return qi(e,t,r,a,n),null}var eo=null,to=null,no=null;function ro(){if(no)return no;var e,t,n=to,r=n.length,a=ao(),o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);var l=t>1?1-t:void 0;return no=a.slice(e,l)}function ao(){return"value"in eo?eo.value:eo.textContent}function oo(e){var t,n=e.keyCode;return"charCode"in e?0===(t=e.charCode)&&13===n&&(t=13):t=n,10===t&&(t=13),t>=32||13===t?t:0}function io(){return!0}function lo(){return!1}function uo(e){function n(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)if(e.hasOwnProperty(i)){var l=e[i];this[i]=l?l(a):a[i]}var u=null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue;return this.isDefaultPrevented=u?io:lo,this.isPropagationStopped=lo,this}return t(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=io)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=io)},persist:function(){},isPersistent:io}),n}var so,co,fo,po={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},mo=uo(po),ho=t({},po,{view:0,detail:0}),vo=uo(ho);var go=t({},ho,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Po,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(function(e){e!==fo&&(fo&&"mousemove"===e.type?(so=e.screenX-fo.screenX,co=e.screenY-fo.screenY):(so=0,co=0),fo=e)}(e),so)},movementY:function(e){return"movementY"in e?e.movementY:co}}),yo=uo(go),bo=uo(t({},go,{dataTransfer:0})),wo=uo(t({},ho,{relatedTarget:0})),ko=uo(t({},po,{animationName:0,elapsedTime:0,pseudoElement:0})),Eo=uo(t({},po,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xo=uo(t({},po,{data:0})),So=xo,Co={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},To={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};var No={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ro(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var n=No[e];return!!n&&!!t[n]}function Po(e){return Ro}var _o=uo(t({},ho,{key:function(e){if(e.key){var t=Co[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=oo(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?To[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Po,charCode:function(e){return"keypress"===e.type?oo(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?oo(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Do=uo(t({},go,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Io=uo(t({},ho,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Po})),Oo=uo(t({},po,{propertyName:0,elapsedTime:0,pseudoElement:0})),Lo=uo(t({},go,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Mo=[9,13,27,32],Fo=D&&"CompositionEvent"in window,zo=null;D&&"documentMode"in document&&(zo=document.documentMode);var Ao=D&&"TextEvent"in window&&!zo,jo=D&&(!Fo||zo&&zo>8&&zo<=11),Uo=String.fromCharCode(32);var Wo=!1;function Bo(e,t){switch(e){case"keyup":return-1!==Mo.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vo(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function Ho(e){return"ko"===e.locale}var $o=!1;function Yo(e,t,n,r,a){var o,i;if(Fo?o=function(e){switch(e){case"compositionstart":return"onCompositionStart";case"compositionend":return"onCompositionEnd";case"compositionupdate":return"onCompositionUpdate"}}(t):$o?Bo(t,r)&&(o="onCompositionEnd"):function(e,t){return"keydown"===e&&229===t.keyCode}(t,r)&&(o="onCompositionStart"),!o)return null;jo&&!Ho(r)&&($o||"onCompositionStart"!==o?"onCompositionEnd"===o&&$o&&(i=ro()):$o=function(e){return eo=e,to=ao(),!0}(a));var l=Ki(n,o);if(l.length>0){var u=new xo(o,t,null,r,a);if(e.push({event:u,listeners:l}),i)u.data=i;else{var s=Vo(r);null!==s&&(u.data=s)}}}function qo(e,t){if($o){if("compositionend"===e||!Fo&&Bo(e,t)){var n=ro();return eo=null,to=null,no=null,$o=!1,n}return null}switch(e){case"paste":default:return null;case"keypress":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jo&&!Ho(t)?null:t.data}}function Qo(e,t,n,r,a){var o;if(!(o=Ao?function(e,t){switch(e){case"compositionend":return Vo(t);case"keypress":return 32!==t.which?null:(Wo=!0,Uo);case"textInput":var n=t.data;return n===Uo&&Wo?null:n;default:return null}}(t,r):qo(t,r)))return null;var i=Ki(n,"onBeforeInput");if(i.length>0){var l=new So("onBeforeInput","beforeinput",null,r,a);e.push({event:l,listeners:i}),l.data=o}}var Ko={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Go(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ko[e.type]:"textarea"===t}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function Xo(e,t,n,r){zn(r);var a=Ki(t,"onChange");if(a.length>0){var o=new mo("onChange","change",null,n,r);e.push({event:o,listeners:a})}}var Jo=null,Zo=null;function ei(e){var t=[];Xo(t,Zo,e,In(e)),function(e,t){if(Vn)return e(t);Vn=!0;try{jn(e,t)}finally{Vn=!1,$n()}}(ti,t)}function ti(e){Ui(e,0)}function ni(e){if(ot(bu(e)))return e}function ri(e,t){if("change"===e)return t}var ai=!1;function oi(){Jo&&(Jo.detachEvent("onpropertychange",ii),Jo=null,Zo=null)}function ii(e){"value"===e.propertyName&&ni(Zo)&&ei(e)}function li(e,t,n){"focusin"===e?(oi(),function(e,t){Zo=t,(Jo=e).attachEvent("onpropertychange",ii)}(t,n)):"focusout"===e&&oi()}function ui(e,t){if("selectionchange"===e||"keyup"===e||"keydown"===e)return ni(Zo)}function si(e,t){if("click"===e)return ni(t)}function ci(e,t){if("input"===e||"change"===e)return ni(t)}function fi(e,t,n,r,a,o,i){var l,u,s,c,f,d,p=n?bu(n):window;if("select"===(c=(s=p).nodeName&&s.nodeName.toLowerCase())||"input"===c&&"file"===s.type?l=ri:Go(p)?ai?l=ci:(l=ui,u=li):function(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}(p)&&(l=si),l){var m=l(t,n);if(m)return void Xo(e,m,r,a)}u&&u(t,p,n),"focusout"===t&&(d=(f=p)._wrapperState)&&d.controlled&&"number"===f.type&&yt(f,"number",f.value)}function di(e,t,n,r,a,o,i){var l="mouseover"===t||"pointerover"===t,u="mouseout"===t||"pointerout"===t;if(l&&0==(16&o)){var s=r.relatedTarget||r.fromElement;if(s&&(gu(s)||vu(s)))return}if(u||l){var c,f,d;if(a.window===a)c=a;else{var p=a.ownerDocument;c=p?p.defaultView||p.parentWindow:window}if(u){var m=r.relatedTarget||r.toElement;if(f=n,null!==(d=m?gu(m):null))(d!==Er(d)||5!==d.tag&&6!==d.tag)&&(d=null)}else f=null,d=n;if(f!==d){var h=yo,v="onMouseLeave",g="onMouseEnter",y="mouse";"pointerout"!==t&&"pointerover"!==t||(h=Do,v="onPointerLeave",g="onPointerEnter",y="pointer");var b=null==f?c:bu(f),w=null==d?c:bu(d),k=new h(v,y+"leave",f,r,a);k.target=b,k.relatedTarget=w;var E=null;if(gu(a)===n){var x=new h(g,y+"enter",d,r,a);x.target=w,x.relatedTarget=b,E=x}!function(e,t,n,r,a){var o=r&&a?function(e,t){for(var n=e,r=t,a=0,o=n;o;o=Gi(o))a++;for(var i=0,l=r;l;l=Gi(l))i++;for(;a-i>0;)n=Gi(n),a--;for(;i-a>0;)r=Gi(r),i--;var u=a;for(;u--;){if(n===r||null!==r&&n===r.alternate)return n;n=Gi(n),r=Gi(r)}return null}(r,a):null;null!==r&&Xi(e,t,r,o,!1);null!==a&&null!==n&&Xi(e,n,a,o,!0)}(e,k,E,f,d)}}}D&&(ai=function(e){if(!D)return!1;var t="on"+e,n=t in document;if(!n){var r=document.createElement("div");r.setAttribute(t,"return;"),n="function"==typeof r[t]}return n}("input")&&(!document.documentMode||document.documentMode>9));var pi="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},mi=Object.prototype.hasOwnProperty;function hi(e,t){if(pi(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!mi.call(t,n[a])||!pi(e[n[a]],t[n[a]]))return!1;return!0}function vi(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function gi(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function yi(e,t){for(var n=vi(e),r=0,a=0;n;){if(3===n.nodeType){if(a=r+n.textContent.length,r<=t&&a>=t)return{node:n,offset:t-r};r=a}n=vi(gi(n))}}function bi(e){var t=e.ownerDocument,n=t&&t.defaultView||window,r=n.getSelection&&n.getSelection();if(!r||0===r.rangeCount)return null;var a=r.anchorNode,o=r.anchorOffset,i=r.focusNode,l=r.focusOffset;try{a.nodeType,i.nodeType}catch(e){return null}return function(e,t,n,r,a){var o=0,i=-1,l=-1,u=0,s=0,c=e,f=null;e:for(;;){for(var d=null;c!==t||0!==n&&3!==c.nodeType||(i=o+n),c!==r||0!==a&&3!==c.nodeType||(l=o+a),3===c.nodeType&&(o+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break e;if(f===t&&++u===n&&(i=o),f===r&&++s===a&&(l=o),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}if(-1===i||-1===l)return null;return{start:i,end:l}}(e,a,o,i,l)}function wi(e){return e&&3===e.nodeType}function ki(e,t){return!(!e||!t)&&(e===t||!wi(e)&&(wi(t)?ki(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Ei(e){return e&&e.ownerDocument&&ki(e.ownerDocument.documentElement,e)}function xi(e){try{return"string"==typeof e.contentWindow.location.href}catch(e){return!1}}function Si(){for(var e=window,t=it();t instanceof e.HTMLIFrameElement;){if(!xi(t))return t;t=it((e=t.contentWindow).document)}return t}function Ci(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ti(e){var t=Si(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&Ei(n)){null!==r&&Ci(n)&&function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n);"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):function(e,t){var n=e.ownerDocument||document,r=n&&n.defaultView||window;if(r.getSelection){var a=r.getSelection(),o=e.textContent.length,i=Math.min(t.start,o),l=void 0===t.end?i:Math.min(t.end,o);if(!a.extend&&i>l){var u=l;l=i,i=u}var s=yi(e,i),c=yi(e,l);if(s&&c){if(1===a.rangeCount&&a.anchorNode===s.node&&a.anchorOffset===s.offset&&a.focusNode===c.node&&a.focusOffset===c.offset)return;var f=n.createRange();f.setStart(s.node,s.offset),a.removeAllRanges(),i>l?(a.addRange(f),a.extend(c.node,c.offset)):(f.setEnd(c.node,c.offset),a.addRange(f))}}}(e,t)}(n,r);for(var a=[],o=n;o=o.parentNode;)1===o.nodeType&&a.push({element:o,left:o.scrollLeft,top:o.scrollTop});"function"==typeof n.focus&&n.focus();for(var i=0;i<a.length;i++){var l=a[i];l.element.scrollLeft=l.left,l.element.scrollTop=l.top}}}function Ni(e){return("selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:bi(e))||{start:0,end:0}}var Ri=D&&"documentMode"in document&&document.documentMode<=11;var Pi=null,_i=null,Di=null,Ii=!1;function Oi(e,t,n){var r,a=(r=n).window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!Ii&&null!=Pi&&Pi===it(a)){var o=function(e){if("selectionStart"in e&&Ci(e))return{start:e.selectionStart,end:e.selectionEnd};var t=(e.ownerDocument&&e.ownerDocument.defaultView||window).getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}(Pi);if(!Di||!hi(Di,o)){Di=o;var i=Ki(_i,"onSelect");if(i.length>0){var l=new mo("onSelect","select",null,t,n);e.push({event:l,listeners:i}),l.target=Pi}}}}function Li(e,t,n,r,a,o,i){var l=aa.get(t);if(void 0!==l){var u=mo,s=t;switch(t){case"keypress":if(0===oo(r))return;case"keydown":case"keyup":u=_o;break;case"focusin":s="focus",u=wo;break;case"focusout":s="blur",u=wo;break;case"beforeblur":case"afterblur":u=wo;break;case"click":if(2===r.button)return;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yo;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=bo;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Io;break;case ea:case ta:case na:u=ko;break;case ra:u=Oo;break;case"scroll":u=vo;break;case"wheel":u=Lo;break;case"copy":case"cut":case"paste":u=Eo;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Do}var c=0!=(4&o),f=!c&&"scroll"===t,d=function(e,t,n,r,a){var o=null!==t?t+"Capture":null,i=r?o:t,l=[],u=e,s=null;for(;null!==u;){var c=u,f=c.stateNode;if(5===c.tag&&null!==f&&(s=f,null!==i)){var d=Yn(u,i);null!=d&&l.push(Qi(u,d,s))}if(a)break;u=u.return}return l}(n,l,r.type,c,f);if(d.length>0){var p=new u(l,s,null,r,a);e.push({event:p,listeners:d})}}}function Mi(e,t,n,r,a,o,i){Li(e,t,n,r,a,o),0==(7&o)&&(di(e,t,n,r,a,o),fi(e,t,n,r,a),function(e,t,n,r,a,o,i){var l=n?bu(n):window;switch(t){case"focusin":(Go(l)||"true"===l.contentEditable)&&(Pi=l,_i=n,Di=null);break;case"focusout":Pi=null,_i=null,Di=null;break;case"mousedown":Ii=!0;break;case"contextmenu":case"mouseup":case"dragend":Ii=!1,Oi(e,r,a);break;case"selectionchange":if(Ri)break;case"keydown":case"keyup":Oi(e,r,a)}}(e,t,n,r,a),function(e,t,n,r,a,o,i){Yo(e,t,n,r,a),Qo(e,t,n,r,a)}(e,t,n,r,a))}ca(ia,0),ca(ua,1),ca(sa,2),function(e,t){for(var n=0;n<e.length;n++)oa.set(e[n],t)}(la,0),_("onMouseEnter",["mouseout","mouseover"]),_("onMouseLeave",["mouseout","mouseover"]),_("onPointerEnter",["pointerout","pointerover"]),_("onPointerLeave",["pointerout","pointerover"]),P("onChange",["change","click","focusin","focusout","input","keydown","keyup","selectionchange"]),P("onSelect",["focusout","contextmenu","dragend","focusin","keydown","keyup","mousedown","mouseup","selectionchange"]),P("onBeforeInput",["compositionend","keypress","textInput","paste"]),P("onCompositionEnd",["compositionend","focusout","keydown","keypress","keyup","mousedown"]),P("onCompositionStart",["compositionstart","focusout","keydown","keypress","keyup","mousedown"]),P("onCompositionUpdate",["compositionupdate","focusout","keydown","keypress","keyup","mousedown"]);var Fi=["abort","canplay","canplaythrough","durationchange","emptied","encrypted","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],zi=new Set(["cancel","close","invalid","load","scroll","toggle"].concat(Fi));function Ai(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,i,l,u){if(ar.apply(this,arguments),Zn){var s=ir();tr||(tr=!0,nr=s)}}(r,t,void 0,e),e.currentTarget=null}function ji(e,t,n){var r;if(n)for(var a=t.length-1;a>=0;a--){var o=t[a],i=o.instance,l=o.currentTarget,u=o.listener;if(i!==r&&e.isPropagationStopped())return;Ai(e,u,l),r=i}else for(var s=0;s<t.length;s++){var c=t[s],f=c.instance,d=c.currentTarget,p=c.listener;if(f!==r&&e.isPropagationStopped())return;Ai(e,p,d),r=f}}function Ui(e,t){for(var n=0!=(4&t),r=0;r<e.length;r++){var a=e[r];ji(a.event,a.listeners,n)}!function(){if(tr){var e=nr;throw tr=!1,nr=null,e}}()}function Wi(e,t){var n=Eu(t),r=Ji(e,false);n.has(r)||($i(t,e,2,false),n.add(r))}var Bi="_reactListening"+Math.random().toString(36).slice(2);function Vi(e){e[Bi]||(e[Bi]=!0,T.forEach((function(t){zi.has(t)||Hi(t,!1,e,null),Hi(t,!0,e,null)})))}function Hi(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&zi.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=Eu(o),l=Ji(e,t);i.has(l)||(t&&(a|=4),$i(o,e,a,t),i.add(l))}function $i(e,t,n,r,a){var o=Ka(e,t,n),i=void 0;qn&&("touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0)),e=e,r?void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{capture:!0,passive:r})}(e,t,o,i):function(e,t,n){e.addEventListener(t,n,!0)}(e,t,o):void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{passive:r})}(e,t,o,i):function(e,t,n){e.addEventListener(t,n,!1)}(e,t,o)}function Yi(e,t){return e===t||8===e.nodeType&&e.parentNode===t}function qi(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)){var i=a;if(null!==r){var l=r;e:for(;;){if(null===l)return;var u=l.tag;if(3===u||4===u){var s=l.stateNode.containerInfo;if(Yi(s,i))break;if(4===u)for(var c=l.return;null!==c;){var f=c.tag;if(3===f||4===f)if(Yi(c.stateNode.containerInfo,i))return;c=c.return}for(;null!==s;){var d=gu(s);if(null===d)return;var p=d.tag;if(5===p||6===p){l=o=d;continue e}s=s.parentNode}}l=l.return}}}!function(e,t,n){if(Hn)return e(t,n);Hn=!0;try{Bn(e,t,n)}finally{Hn=!1,$n()}}((function(){return function(e,t,n,r,a){var o=[];Mi(o,e,r,n,In(n),t),Ui(o,t)}(e,t,n,o)}))}function Qi(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ki(e,t){for(var n=t+"Capture",r=[],a=e;null!==a;){var o=a,i=o.stateNode;if(5===o.tag&&null!==i){var l=i,u=Yn(a,n);null!=u&&r.unshift(Qi(a,u,l));var s=Yn(a,t);null!=s&&r.push(Qi(a,s,l))}a=a.return}return r}function Gi(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Xi(e,t,n,r,a){for(var o=t._reactName,i=[],l=n;null!==l&&l!==r;){var u=l,s=u.alternate,c=u.stateNode,f=u.tag;if(null!==s&&s===r)break;if(5===f&&null!==c){var d=c;if(a){var p=Yn(l,o);null!=p&&i.unshift(Qi(l,p,d))}else if(!a){var m=Yn(l,o);null!=m&&i.push(Qi(l,m,d))}}l=l.return}0!==i.length&&e.push({event:t,listeners:i})}function Ji(e,t){return e+"__"+(t?"capture":"bubble")}var Zi,el,tl,nl,rl,al,ol,il,ll,ul,sl=!1,cl="dangerouslySetInnerHTML",fl="suppressContentEditableWarning",dl="suppressHydrationWarning",pl="autoFocus",ml="children",hl="style",vl=zt;Zi={dialog:!0,webview:!0},tl=function(e,t){En(e,t),function(e,t){"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||xn||(xn=!0,"select"===e&&t.multiple?l("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):l("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e))}(e,t),Dn(e,t,{registrationNameDependencies:N,possibleRegistrationNames:R})},il=D&&!document.documentMode;var gl=/\r\n?/g,yl=/\u0000|\uFFFD/g;function bl(e){return 9===e.nodeType?e:e.ownerDocument}function wl(){}function kl(e){e.onclick=wl}function El(e,t,n,r){var a,o=mn(t,n);switch(tl(t,n),t){case"dialog":Wi("cancel",e),Wi("close",e),a=n;break;case"iframe":case"object":case"embed":Wi("load",e),a=n;break;case"video":case"audio":for(var i=0;i<Fi.length;i++)Wi(Fi[i],e);a=n;break;case"source":Wi("error",e),a=n;break;case"img":case"image":case"link":Wi("error",e),Wi("load",e),a=n;break;case"details":Wi("toggle",e),a=n;break;case"input":pt(e,n),a=dt(e,n),Wi("invalid",e);break;case"option":Et(0,n),a=xt(0,n);break;case"select":Rt(e,n),a=Nt(0,n),Wi("invalid",e);break;case"textarea":Dt(e,n),a=_t(e,n),Wi("invalid",e);break;default:a=n}switch(pn(t,a),function(e,t,n,r,a){for(var o in r)if(r.hasOwnProperty(o)){var i=r[o];if(o===hl)i&&Object.freeze(i),cn(t,i);else if(o===cl){var l=i?i.__html:void 0;null!=l&&Vt(t,l)}else o===ml?"string"==typeof i?("textarea"!==e||""!==i)&&$t(t,i):"number"==typeof i&&$t(t,""+i):o===fl||o===dl||o===pl||(N.hasOwnProperty(o)?null!=i&&("function"!=typeof i&&ol(o,i),"onScroll"===o&&Wi("scroll",t)):null!=i&&Z(t,o,i,a))}}(t,e,0,a,o),t){case"input":at(e),vt(e,n,!1);break;case"textarea":at(e),Ot(e);break;case"option":!function(e,t){null!=t.value&&e.setAttribute("value",Je(Ze(t.value)))}(e,n);break;case"select":!function(e,t){var n=e;n.multiple=!!t.multiple;var r=t.value;null!=r?Tt(n,!!t.multiple,r,!1):null!=t.defaultValue&&Tt(n,!!t.multiple,t.defaultValue,!0)}(e,n);break;default:"function"==typeof a.onClick&&kl(e)}}function xl(e,t,n,r,a){tl(t,r);var o,i,u,s,c=null;switch(t){case"input":o=dt(e,n),i=dt(e,r),c=[];break;case"option":o=xt(0,n),i=xt(0,r),c=[];break;case"select":o=Nt(0,n),i=Nt(0,r),c=[];break;case"textarea":o=_t(e,n),i=_t(e,r),c=[];break;default:i=r,"function"!=typeof(o=n).onClick&&"function"==typeof i.onClick&&kl(e)}pn(t,i);var f=null;for(u in o)if(!i.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if(u===hl){var d=o[u];for(s in d)d.hasOwnProperty(s)&&(f||(f={}),f[s]="")}else u===cl||u===ml||u===fl||u===dl||u===pl||(N.hasOwnProperty(u)?c||(c=[]):(c=c||[]).push(u,null));for(u in i){var p=i[u],m=null!=o?o[u]:void 0;if(i.hasOwnProperty(u)&&p!==m&&(null!=p||null!=m))if(u===hl)if(p&&Object.freeze(p),m){for(s in m)!m.hasOwnProperty(s)||p&&p.hasOwnProperty(s)||(f||(f={}),f[s]="");for(s in p)p.hasOwnProperty(s)&&m[s]!==p[s]&&(f||(f={}),f[s]=p[s])}else f||(c||(c=[]),c.push(u,f)),f=p;else if(u===cl){var h=p?p.__html:void 0,v=m?m.__html:void 0;null!=h&&v!==h&&(c=c||[]).push(u,h)}else u===ml?"string"!=typeof p&&"number"!=typeof p||(c=c||[]).push(u,""+p):u===fl||u===dl||(N.hasOwnProperty(u)?(null!=p&&("function"!=typeof p&&ol(u,p),"onScroll"===u&&Wi("scroll",e)),c||m===p||(c=[])):"object"==typeof p&&null!==p&&p.$$typeof===pe?p.toString():(c=c||[]).push(u,p))}return f&&(!function(e,t){if(t){var n,r=fn(e),a=fn(t),o={};for(var i in r){var u=r[i],s=a[i];if(s&&u!==s){var c=u+","+s;if(o[c])continue;o[c]=!0,l("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==(n=e[u])||"boolean"==typeof n||""===n?"Removing":"Updating",u,s)}}}}(f,i.style),(c=c||[]).push(hl,f)),c}function Sl(e,t,n,r,a){"input"===n&&"radio"===a.type&&null!=a.name&&mt(e,a);mn(n,r);switch(function(e,t,n,r){for(var a=0;a<t.length;a+=2){var o=t[a],i=t[a+1];o===hl?cn(e,i):o===cl?Vt(e,i):o===ml?$t(e,i):Z(e,o,i,r)}}(e,t,0,mn(n,a)),n){case"input":ht(e,a);break;case"textarea":It(e,a);break;case"select":!function(e,t){var n=e,r=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!t.multiple;var a=t.value;null!=a?Tt(n,!!t.multiple,a,!1):r!==!!t.multiple&&(null!=t.defaultValue?Tt(n,!!t.multiple,t.defaultValue,!0):Tt(n,!!t.multiple,t.multiple?[]:"",!1))}(e,a)}}function Cl(e,t){nl(e.nodeValue,t)}function Tl(e,t){sl||(sl=!0,l("Did not expect server HTML to contain a <%s> in <%s>.",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function Nl(e,t){sl||(sl=!0,l('Did not expect server HTML to contain the text node "%s" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function Rl(e,t,n){sl||(sl=!0,l("Expected server HTML to contain a matching <%s> in <%s>.",t,e.nodeName.toLowerCase()))}function Pl(e,t){""!==t&&(sl||(sl=!0,l('Expected server HTML to contain a matching text node for "%s" in <%s>.',t,e.nodeName.toLowerCase())))}ll=function(e){return("string"==typeof e?e:""+e).replace(gl,"\n").replace(yl,"")},nl=function(e,t){if(!sl){var n=ll(t),r=ll(e);r!==n&&(sl=!0,l('Text content did not match. Server: "%s" Client: "%s"',r,n))}},rl=function(e,t,n){if(!sl){var r=ll(n),a=ll(t);a!==r&&(sl=!0,l("Prop `%s` did not match. Server: %s Client: %s",e,JSON.stringify(a),JSON.stringify(r)))}},al=function(e){if(!sl){sl=!0;var t=[];e.forEach((function(e){t.push(e)})),l("Extra attributes from the server: %s",t)}},ol=function(e,t){!1===t?l("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):l("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)},ul=function(e,t){var n=e.namespaceURI===vl?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return n.innerHTML=t,n.innerHTML};var _l,Dl,Il=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],Ol=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],Ll=Ol.concat(["button"]),Ml=["dd","dt","li","option","optgroup","p","rp","rt"],Fl={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};Dl=function(e,n){var r=t({},e||Fl),a={tag:n};return-1!==Ol.indexOf(n)&&(r.aTagInScope=null,r.buttonTagInScope=null,r.nobrTagInScope=null),-1!==Ll.indexOf(n)&&(r.pTagInButtonScope=null),-1!==Il.indexOf(n)&&"address"!==n&&"div"!==n&&"p"!==n&&(r.listItemTagAutoclosing=null,r.dlItemTagAutoclosing=null),r.current=a,"form"===n&&(r.formTag=a),"a"===n&&(r.aTagInScope=a),"button"===n&&(r.buttonTagInScope=a),"nobr"===n&&(r.nobrTagInScope=a),"p"===n&&(r.pTagInButtonScope=a),"li"===n&&(r.listItemTagAutoclosing=a),"dd"!==n&&"dt"!==n||(r.dlItemTagAutoclosing=a),r};var zl={};_l=function(e,t,n){var r=(n=n||Fl).current,a=r&&r.tag;null!=t&&(null!=e&&l("validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var o=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===Ml.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frameset":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}(e,a)?null:r,i=o?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,n),u=o||i;if(u){var s=u.tag,c=!!o+"|"+e+"|"+s;if(!zl[c]){zl[c]=!0;var f=e,d="";if("#text"===e?/\S/.test(t)?f="Text nodes":(f="Whitespace text nodes",d=" Make sure you don't have any extra whitespace between tags on each line of your source code."):f="<"+e+">",o){var p="";"table"===s&&"tr"===e&&(p+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),l("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s",f,s,d,p)}else l("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.",f,s)}}};var Al="$?",jl="$!",Ul=null,Wl=null;function Bl(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vl(e){var t;Ul=qa,t=Si(),Wl={focusedElem:t,selectionRange:Ci(t)?Ni(t):null};return Qa(!1),null}function Hl(e,t,n,r,a){var o=r;if(_l(e,null,o.ancestorInfo),"string"==typeof t.children||"number"==typeof t.children){var i=""+t.children,u=Dl(o.ancestorInfo,e);_l(null,i,u)}var s=function(e,t,n,r){var a,o,i=bl(n),u=r;if(u===vl&&(u=jt(e)),u===vl){if((a=mn(e,t))||e===e.toLowerCase()||l("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",e),"script"===e){var s=i.createElement("div");s.innerHTML="<script><\/script>";var c=s.firstChild;o=s.removeChild(c)}else if("string"==typeof t.is)o=i.createElement(e,{is:t.is});else if(o=i.createElement(e),"select"===e){var f=o;t.multiple?f.multiple=!0:t.size&&(f.size=t.size)}}else o=i.createElementNS(u,e);return u===vl&&(a||"[object HTMLUnknownElement]"!==Object.prototype.toString.call(o)||Object.prototype.hasOwnProperty.call(Zi,e)||(Zi[e]=!0,l("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",e))),o}(e,t,n,o.namespace);return mu(a,s),ku(s,t),s}function $l(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function Yl(e,t,n,r){_l(null,e,n.ancestorInfo);var a=function(e,t){return bl(t).createTextNode(e)}(e,t);return mu(r,a),a}var ql="function"==typeof setTimeout?setTimeout:void 0,Ql="function"==typeof clearTimeout?clearTimeout:void 0;function Kl(e){$t(e,"")}function Gl(e,t){e.removeChild(t)}function Xl(e){var t=(e=e).style;"function"==typeof t.setProperty?t.setProperty("display","none","important"):t.display="none"}function Jl(e,t){e=e;var n=t.style,r=null!=n&&n.hasOwnProperty("display")?n.display:null;e.style.display=Kt("display",r)}function Zl(e,t){e.nodeValue=t}function eu(e){if(1===e.nodeType)e.textContent="";else if(9===e.nodeType){var t=e.body;null!=t&&(t.textContent="")}}function tu(e){return e.data===jl}function nu(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function ru(e){return nu(e.nextSibling)}function au(e){return nu(e.firstChild)}function ou(e,t,n,r,a,o){return mu(o,e),ku(e,n),function(e,t,n,r,a){var o,i;switch(el=!0===n.suppressHydrationWarning,o=mn(t,n),tl(t,n),t){case"dialog":Wi("cancel",e),Wi("close",e);break;case"iframe":case"object":case"embed":Wi("load",e);break;case"video":case"audio":for(var l=0;l<Fi.length;l++)Wi(Fi[l],e);break;case"source":Wi("error",e);break;case"img":case"image":case"link":Wi("error",e),Wi("load",e);break;case"details":Wi("toggle",e);break;case"input":pt(e,n),Wi("invalid",e);break;case"option":Et(0,n);break;case"select":Rt(e,n),Wi("invalid",e);break;case"textarea":Dt(e,n),Wi("invalid",e)}pn(t,n),i=new Set;for(var u=e.attributes,s=0;s<u.length;s++)switch(u[s].name.toLowerCase()){case"data-reactroot":case"value":case"checked":case"selected":break;default:i.add(u[s].name)}var c,f=null;for(var d in n)if(n.hasOwnProperty(d)){var p=n[d];if(d===ml)"string"==typeof p?e.textContent!==p&&(el||nl(e.textContent,p),f=[ml,p]):"number"==typeof p&&e.textContent!==""+p&&(el||nl(e.textContent,p),f=[ml,""+p]);else if(N.hasOwnProperty(d))null!=p&&("function"!=typeof p&&ol(d,p),"onScroll"===d&&Wi("scroll",e));else if("boolean"==typeof o){var m=void 0,h=V(d);if(el);else if(d===fl||d===dl||"value"===d||"checked"===d||"selected"===d);else if(d===cl){var v=e.innerHTML,g=p?p.__html:void 0;if(null!=g){var y=ul(e,g);y!==v&&rl(d,v,y)}}else if(d===hl){if(i.delete(d),il){var b=sn(p);b!==(m=e.getAttribute("style"))&&rl(d,m,b)}}else if(o)i.delete(d.toLowerCase()),p!==(m=J(e,d,p))&&rl(d,m,p);else if(!U(d,h,o)&&!B(d,p,h,o)){var w=!1;if(null!==h)i.delete(h.attributeName),m=X(e,d,p,h);else{var k=r;if(k===vl&&(k=jt(t)),k===vl)i.delete(d.toLowerCase());else{var E=(c=void 0,c=d.toLowerCase(),hn.hasOwnProperty(c)&&hn[c]||null);null!==E&&E!==d&&(w=!0,i.delete(E)),i.delete(d)}m=J(e,d,p)}p===m||w||rl(d,m,p)}}}switch(i.size>0&&!el&&al(i),t){case"input":at(e),vt(e,n,!0);break;case"textarea":at(e),Ot(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&kl(e)}return f}(e,t,n,a.namespace)}function iu(e){for(var t=e.previousSibling,n=0;t;){if(8===t.nodeType){var r=t.data;if("$"===r||r===jl||r===Al){if(0===n)return t;n--}else"/$"===r&&n++}t=t.previousSibling}return null}var lu=0;function uu(e){var t="r:"+(lu++).toString(36);return{toString:function(){return e(),t},valueOf:function(){return e(),t}}}var su=Math.random().toString(36).slice(2),cu="__reactFiber$"+su,fu="__reactProps$"+su,du="__reactContainer$"+su,pu="__reactEvents$"+su;function mu(e,t){t[cu]=e}function hu(e){e[du]=null}function vu(e){return!!e[du]}function gu(e){var t=e[cu];if(t)return t;for(var n=e.parentNode;n;){if(t=n[du]||n[cu]){var r=t.alternate;if(null!==t.child||null!==r&&null!==r.child)for(var a=iu(e);null!==a;){var o=a[cu];if(o)return o;a=iu(a)}return t}n=(e=n).parentNode}return null}function yu(e){var t=e[cu]||e[du];return t&&(5===t.tag||6===t.tag||t.tag===h||3===t.tag)?t:null}function bu(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error("getNodeFromInstance: Invalid argument.")}function wu(e){return e[fu]||null}function ku(e,t){e[fu]=t}function Eu(e){var t=e[pu];return void 0===t&&(t=e[pu]=new Set),t}var xu={},Su=o.ReactDebugCurrentFrame;function Cu(e){if(e){var t=e._owner,n=je(e.type,e._source,t?t.type:null);Su.setExtraStackFrame(n)}else Su.setExtraStackFrame(null)}function Tu(e,t,n,r,a){var o=Function.call.bind(Object.prototype.hasOwnProperty);for(var i in e)if(o(e,i)){var u=void 0;try{if("function"!=typeof e[i]){var s=Error((r||"React class")+": "+n+" type `"+i+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[i]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw s.name="Invariant Violation",s}u=e[i](t,i,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){u=e}!u||u instanceof Error||(Cu(a),l("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,i,typeof u),Cu(null)),u instanceof Error&&!(u.message in xu)&&(xu[u.message]=!0,Cu(a),l("Failed %s type: %s",n,u.message),Cu(null))}}var Nu,Ru=[];Nu=[];var Pu,_u=-1;function Du(e){return{current:e}}function Iu(e,t){_u<0?l("Unexpected pop."):(t!==Nu[_u]&&l("Unexpected Fiber popped."),e.current=Ru[_u],Ru[_u]=null,Nu[_u]=null,_u--)}function Ou(e,t,n){_u++,Ru[_u]=e.current,Nu[_u]=n,e.current=t}Pu={};var Lu={};Object.freeze(Lu);var Mu=Du(Lu),Fu=Du(!1),zu=Lu;function Au(e,t,n){return n&&Bu(t)?zu:Mu.current}function ju(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function Uu(e,t){var n=e.type,r=n.contextTypes;if(!r)return Lu;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var o={};for(var i in r)o[i]=t[i];return Tu(r,o,"context",Ve(n)||"Unknown"),a&&ju(e,t,o),o}function Wu(){return Fu.current}function Bu(e){var t=e.childContextTypes;return null!=t}function Vu(e){Iu(Fu,e),Iu(Mu,e)}function Hu(e){Iu(Fu,e),Iu(Mu,e)}function $u(e,t,n){if(Mu.current!==Lu)throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");Ou(Mu,t,e),Ou(Fu,n,e)}function Yu(e,n,r){var a=e.stateNode,o=n.childContextTypes;if("function"!=typeof a.getChildContext){var i=Ve(n)||"Unknown";return Pu[i]||(Pu[i]=!0,l("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",i,i)),r}var u=a.getChildContext();for(var s in u)if(!(s in o))throw Error((Ve(n)||"Unknown")+'.getChildContext(): key "'+s+'" is not defined in childContextTypes.');return Tu(o,u,"child context",Ve(n)||"Unknown"),t({},r,u)}function qu(e){var t=e.stateNode,n=t&&t.__reactInternalMemoizedMergedChildContext||Lu;return zu=Mu.current,Ou(Mu,n,e),Ou(Fu,Fu.current,e),!0}function Qu(e,t,n){var r=e.stateNode;if(!r)throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");if(n){var a=Yu(e,t,zu);r.__reactInternalMemoizedMergedChildContext=a,Iu(Fu,e),Iu(Mu,e),Ou(Mu,a,e),Ou(Fu,n,e)}else Iu(Fu,e),Ou(Fu,n,e)}function Ku(e){if(!function(e){return Er(e)===e}(e)||1!==e.tag)throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");var t=e;do{switch(t.tag){case 3:return t.stateNode.context;case 1:if(Bu(t.type))return t.stateNode.__reactInternalMemoizedMergedChildContext}t=t.return}while(null!==t);throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.")}var Gu=null,Xu=null,Ju=!1,Zu="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__;function es(e,t){if(Xu&&"function"==typeof Xu.onCommitFiberRoot)try{var n=(e.current.flags&dr)===dr;Xu.onCommitFiberRoot(Gu,e,t,n)}catch(e){Ju||(Ju=!0,l("React instrumentation encountered an error: %s",e))}}var ts=n.unstable_runWithPriority,ns=n.unstable_scheduleCallback,rs=n.unstable_cancelCallback,as=n.unstable_shouldYield,os=n.unstable_requestPaint,is=n.unstable_now,ls=n.unstable_getCurrentPriorityLevel,us=n.unstable_ImmediatePriority,ss=n.unstable_UserBlockingPriority,cs=n.unstable_NormalPriority,fs=n.unstable_LowPriority,ds=n.unstable_IdlePriority;if(null==a.__interactionsRef||null==a.__interactionsRef.current)throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");var ps={},ms=99,hs=98,vs=97,gs=as,ys=void 0!==os?os:function(){},bs=null,ws=null,ks=!1,Es=is(),xs=Es<1e4?is:function(){return is()-Es};function Ss(){switch(ls()){case us:return ms;case ss:return hs;case cs:return vs;case fs:return 96;case ds:return 95;default:throw Error("Unknown priority level.")}}function Cs(e){switch(e){case ms:return us;case hs:return ss;case vs:return cs;case 96:return fs;case 95:return ds;default:throw Error("Unknown priority level.")}}function Ts(e,t){var n=Cs(e);return ts(n,t)}function Ns(e,t,n){var r=Cs(e);return ns(r,t,n)}function Rs(e){e!==ps&&rs(e)}function Ps(){if(null!==ws){var e=ws;ws=null,rs(e)}_s()}function _s(){if(!ks&&null!==bs){ks=!0;var e=0;try{var t=bs;Ts(ms,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(true)}while(null!==n)}})),bs=null}catch(t){throw null!==bs&&(bs=bs.slice(e+1)),ns(us,Ps),t}finally{ks=!1}}}var Ds="17.0.2",Is=o.ReactCurrentBatchConfig;var Os={recordUnsafeLifecycleWarnings:function(e,t){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(e,t){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},Ls=function(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")},Ms=[],Fs=[],zs=[],As=[],js=[],Us=[],Ws=new Set;Os.recordUnsafeLifecycleWarnings=function(e,t){Ws.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Ms.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillMount&&Fs.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&zs.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&As.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&js.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillUpdate&&Us.push(e))},Os.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;Ms.length>0&&(Ms.forEach((function(t){e.add(Ve(t.type)||"Component"),Ws.add(t.type)})),Ms=[]);var t=new Set;Fs.length>0&&(Fs.forEach((function(e){t.add(Ve(e.type)||"Component"),Ws.add(e.type)})),Fs=[]);var n=new Set;zs.length>0&&(zs.forEach((function(e){n.add(Ve(e.type)||"Component"),Ws.add(e.type)})),zs=[]);var r=new Set;As.length>0&&(As.forEach((function(e){r.add(Ve(e.type)||"Component"),Ws.add(e.type)})),As=[]);var a=new Set;js.length>0&&(js.forEach((function(e){a.add(Ve(e.type)||"Component"),Ws.add(e.type)})),js=[]);var o=new Set;(Us.length>0&&(Us.forEach((function(e){o.add(Ve(e.type)||"Component"),Ws.add(e.type)})),Us=[]),t.size>0)&&l("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",Ls(t));r.size>0&&l("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",Ls(r));o.size>0&&l("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",Ls(o));e.size>0&&i("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Ls(e));n.size>0&&i("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Ls(n));a.size>0&&i("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Ls(a))};var Bs=new Map,Vs=new Set;function Hs(e,n){if(e&&e.defaultProps){var r=t({},n),a=e.defaultProps;for(var o in a)void 0===r[o]&&(r[o]=a[o]);return r}return n}Os.recordLegacyContextWarning=function(e,t){var n=function(e){for(var t=null,n=e;null!==n;)1&n.mode&&(t=n),n=n.return;return t}(e);if(null!==n){if(!Vs.has(e.type)){var r=Bs.get(n);(null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],Bs.set(n,r)),r.push(e))}}else l("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.")},Os.flushLegacyContextWarning=function(){Bs.forEach((function(e,t){if(0!==e.length){var n=e[0],r=new Set;e.forEach((function(e){r.add(Ve(e.type)||"Component"),Vs.add(e.type)}));var a=Ls(r);try{Ge(n),l("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",a)}finally{Ke()}}}))},Os.discardPendingWarnings=function(){Ms=[],Fs=[],zs=[],As=[],js=[],Us=[],Bs=new Map};var $s,Ys=1073741823,qs=Du(null);$s={};var Qs=null,Ks=null,Gs=null,Xs=!1;function Js(){Qs=null,Ks=null,Gs=null,Xs=!1}function Zs(){Xs=!0}function ec(){Xs=!1}function tc(e,t){var n=e.type._context;Ou(qs,n._currentValue,e),n._currentValue=t,void 0!==n._currentRenderer&&null!==n._currentRenderer&&n._currentRenderer!==$s&&l("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),n._currentRenderer=$s}function nc(e){var t=qs.current;Iu(qs,e),e.type._context._currentValue=t}function rc(e,t){for(var n=e;null!==n;){var r=n.alternate;if(Ma(n.childLanes,t)){if(null===r||Ma(r.childLanes,t))break;r.childLanes=Fa(r.childLanes,t)}else n.childLanes=Fa(n.childLanes,t),null!==r&&(r.childLanes=Fa(r.childLanes,t));n=n.return}}function ac(e,t){Qs=e,Ks=null,Gs=null;var n=e.dependencies;null!==n&&(null!==n.firstContext&&(La(n.lanes,t)&&om(),n.firstContext=null))}function oc(e,t){if(Xs&&l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),Gs===e);else if(!1===t||0===t);else{var n;"number"!=typeof t||t===Ys?(Gs=e,n=Ys):n=t;var r={context:e,observedBits:n,next:null};if(null===Ks){if(null===Qs)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");Ks=r,Qs.dependencies={lanes:0,firstContext:r,responders:null}}else Ks=Ks.next=r}return e._currentValue}var ic,lc,uc=2,sc=!1;function cc(e){var t={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};e.updateQueue=t}function fc(e,t){var n=t.updateQueue,r=e.updateQueue;if(n===r){var a={baseState:r.baseState,firstBaseUpdate:r.firstBaseUpdate,lastBaseUpdate:r.lastBaseUpdate,shared:r.shared,effects:r.effects};t.updateQueue=a}}function dc(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function pc(e,t){var n=e.updateQueue;if(null!==n){var r=n.shared,a=r.pending;null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,lc!==r||ic||(l("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),ic=!0)}}function mc(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r){var a=r.updateQueue;if(n===a){var o=null,i=null,l=n.firstBaseUpdate;if(null!==l){var u=l;do{var s={eventTime:u.eventTime,lane:u.lane,tag:u.tag,payload:u.payload,callback:u.callback,next:null};null===i?o=i=s:(i.next=s,i=s),u=u.next}while(null!==u);null===i?o=i=t:(i.next=t,i=t)}else o=i=t;return n={baseState:a.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}}var c=n.lastBaseUpdate;null===c?n.firstBaseUpdate=t:c.next=t,n.lastBaseUpdate=t}function hc(e,n,r,a,o,i){switch(r.tag){case 1:var l=r.payload;if("function"==typeof l){Zs();var u=l.call(i,a,o);if(1&e.mode){Pe();try{l.call(i,a,o)}finally{_e()}}return ec(),u}return l;case 3:e.flags=-4097&e.flags|dr;case 0:var s,c=r.payload;if("function"==typeof c){if(Zs(),s=c.call(i,a,o),1&e.mode){Pe();try{c.call(i,a,o)}finally{_e()}}ec()}else s=c;return null==s?a:t({},a,s);case uc:return sc=!0,a}return a}function vc(e,t,n,r){var a=e.updateQueue;sc=!1,lc=a.shared;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;if(null!==c){var f=c.updateQueue,d=f.lastBaseUpdate;d!==i&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=u)}}if(null!==o){for(var p=a.baseState,m=0,h=null,v=null,g=null,y=o;;){var b=y.lane,w=y.eventTime;if(Ma(r,b)){if(null!==g){var k={eventTime:w,lane:0,tag:y.tag,payload:y.payload,callback:y.callback,next:null};g=g.next=k}if(p=hc(e,0,y,p,t,n),null!==y.callback){e.flags|=32;var E=a.effects;null===E?a.effects=[y]:E.push(y)}}else{var x={eventTime:w,lane:b,tag:y.tag,payload:y.payload,callback:y.callback,next:null};null===g?(v=g=x,h=p):g=g.next=x,m=Fa(m,b)}if(null===(y=y.next)){if(null===(l=a.shared.pending))break;var S=l,C=S.next;S.next=null,y=C,a.lastBaseUpdate=S,a.shared.pending=null}}null===g&&(h=p),a.baseState=h,a.firstBaseUpdate=v,a.lastBaseUpdate=g,nv(m),e.lanes=m,e.memoizedState=p}lc=null}function gc(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function yc(){sc=!1}function bc(){return sc}function wc(e,t,n){var r=t.effects;if(t.effects=null,null!==r)for(var a=0;a<r.length;a++){var o=r[a],i=o.callback;null!==i&&(o.callback=null,gc(i,n))}}ic=!1,lc=null;var kc,Ec,xc,Sc,Cc,Tc,Nc,Rc,Pc,_c,Dc={},Ic=Array.isArray,Oc=(new e.Component).refs;kc=new Set,Ec=new Set,xc=new Set,Sc=new Set,Rc=new Set,Cc=new Set,Pc=new Set,_c=new Set;var Lc=new Set;function Mc(e,n,r,a){var o=e.memoizedState;if(1&e.mode){Pe();try{r(a,o)}finally{_e()}}var i=r(a,o);Tc(n,i);var l=null==i?o:t({},o,i);(e.memoizedState=l,0===e.lanes)&&(e.updateQueue.baseState=l)}Nc=function(e,t){if(null!==e&&"function"!=typeof e){var n=t+"_"+e;Lc.has(n)||(Lc.add(n),l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Tc=function(e,t){if(void 0===t){var n=Ve(e)||"Component";Cc.has(n)||(Cc.add(n),l("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",n))}},Object.defineProperty(Dc,"_processChildContext",{enumerable:!1,value:function(){throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(Dc);var Fc,zc,Ac,jc,Uc,Wc={isMounted:function(e){var t=kr.current;if(null!==t&&1===t.tag){var n=t,r=n.stateNode;r._warnedAboutRefsInRender||l("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",Ve(n.type)||"A component"),r._warnedAboutRefsInRender=!0}var a=lr(e);return!!a&&Er(a)===a},enqueueSetState:function(e,t,n){var r=lr(e),a=Fh(),o=zh(r),i=dc(a,o);i.payload=t,null!=n&&(Nc(n,"setState"),i.callback=n),pc(r,i),jh(r,o,a)},enqueueReplaceState:function(e,t,n){var r=lr(e),a=Fh(),o=zh(r),i=dc(a,o);i.tag=1,i.payload=t,null!=n&&(Nc(n,"replaceState"),i.callback=n),pc(r,i),jh(r,o,a)},enqueueForceUpdate:function(e,t){var n=lr(e),r=Fh(),a=zh(n),o=dc(r,a);o.tag=uc,null!=t&&(Nc(t,"forceUpdate"),o.callback=t),pc(n,o),jh(n,a,r)}};function Bc(e,t,n,r,a,o,i){var u=e.stateNode;if("function"==typeof u.shouldComponentUpdate){if(1&e.mode){Pe();try{u.shouldComponentUpdate(r,o,i)}finally{_e()}}var s=u.shouldComponentUpdate(r,o,i);return void 0===s&&l("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",Ve(t)||"Component"),s}return!t.prototype||!t.prototype.isPureReactComponent||(!hi(n,r)||!hi(a,o))}function Vc(e,t){var n;t.updater=Wc,e.stateNode=t,n=e,t._reactInternals=n,t._reactInternalInstance=Dc}function Hc(e,t,n){var r=!1,a=Lu,o=Lu,i=t.contextType;if("contextType"in t&&(!(null===i||void 0!==i&&i.$$typeof===ie&&void 0===i._context)&&!_c.has(t))){_c.add(t);var u="";u=void 0===i?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof i?" However, it is set to a "+typeof i+".":i.$$typeof===oe?" Did you accidentally pass the Context.Provider instead?":void 0!==i._context?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(i).join(", ")+"}.",l("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",Ve(t)||"Component",u)}if("object"==typeof i&&null!==i)o=oc(i);else{a=Au(0,t,!0);var s=t.contextTypes;o=(r=null!=s)?Uu(e,a):Lu}if(1&e.mode){Pe();try{new t(n,o)}finally{_e()}}var c=new t(n,o),f=e.memoizedState=null!==c.state&&void 0!==c.state?c.state:null;if(Vc(e,c),"function"==typeof t.getDerivedStateFromProps&&null===f){var d=Ve(t)||"Component";Ec.has(d)||(Ec.add(d),l("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",d,null===c.state?"null":"undefined",d))}if("function"==typeof t.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate){var p=null,m=null,h=null;if("function"==typeof c.componentWillMount&&!0!==c.componentWillMount.__suppressDeprecationWarning?p="componentWillMount":"function"==typeof c.UNSAFE_componentWillMount&&(p="UNSAFE_componentWillMount"),"function"==typeof c.componentWillReceiveProps&&!0!==c.componentWillReceiveProps.__suppressDeprecationWarning?m="componentWillReceiveProps":"function"==typeof c.UNSAFE_componentWillReceiveProps&&(m="UNSAFE_componentWillReceiveProps"),"function"==typeof c.componentWillUpdate&&!0!==c.componentWillUpdate.__suppressDeprecationWarning?h="componentWillUpdate":"function"==typeof c.UNSAFE_componentWillUpdate&&(h="UNSAFE_componentWillUpdate"),null!==p||null!==m||null!==h){var v=Ve(t)||"Component",g="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";Sc.has(v)||(Sc.add(v),l("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",v,g,null!==p?"\n  "+p:"",null!==m?"\n  "+m:"",null!==h?"\n  "+h:""))}}return r&&ju(e,a,o),c}function $c(e,t,n,r){var a=t.state;if("function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==a){var o=Ve(e.type)||"Component";kc.has(o)||(kc.add(o),l("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",o)),Wc.enqueueReplaceState(t,t.state,null)}}function Yc(e,t,n,r){!function(e,t,n){var r=e.stateNode,a=Ve(t)||"Component";r.render||(t.prototype&&"function"==typeof t.prototype.render?l("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",a):l("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",a)),!r.getInitialState||r.getInitialState.isReactClassApproved||r.state||l("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",a),r.getDefaultProps&&!r.getDefaultProps.isReactClassApproved&&l("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",a),r.propTypes&&l("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",a),r.contextType&&l("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",a),r.contextTypes&&l("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",a),t.contextType&&t.contextTypes&&!Pc.has(t)&&(Pc.add(t),l("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",a)),"function"==typeof r.componentShouldUpdate&&l("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",a),t.prototype&&t.prototype.isPureReactComponent&&void 0!==r.shouldComponentUpdate&&l("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",Ve(t)||"A pure component"),"function"==typeof r.componentDidUnmount&&l("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",a),"function"==typeof r.componentDidReceiveProps&&l("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",a),"function"==typeof r.componentWillRecieveProps&&l("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",a),"function"==typeof r.UNSAFE_componentWillRecieveProps&&l("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",a);var o=r.props!==n;void 0!==r.props&&o&&l("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",a,a),r.defaultProps&&l("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",a,a),"function"!=typeof r.getSnapshotBeforeUpdate||"function"==typeof r.componentDidUpdate||xc.has(t)||(xc.add(t),l("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",Ve(t))),"function"==typeof r.getDerivedStateFromProps&&l("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",a),"function"==typeof r.getDerivedStateFromError&&l("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",a),"function"==typeof t.getSnapshotBeforeUpdate&&l("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",a);var i=r.state;i&&("object"!=typeof i||Ic(i))&&l("%s.state: must be set to an object or null",a),"function"==typeof r.getChildContext&&"object"!=typeof t.childContextTypes&&l("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",a)}(e,t,n);var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Oc,cc(e);var o=t.contextType;if("object"==typeof o&&null!==o)a.context=oc(o);else{var i=Au(0,t,!0);a.context=Uu(e,i)}if(a.state===n){var u=Ve(t)||"Component";Rc.has(u)||(Rc.add(u),l("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",u))}1&e.mode&&Os.recordLegacyContextWarning(e,a),Os.recordUnsafeLifecycleWarnings(e,a),vc(e,n,a,r),a.state=e.memoizedState;var s=t.getDerivedStateFromProps;"function"==typeof s&&(Mc(e,t,s,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(!function(e,t){var n=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),n!==t.state&&(l("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",Ve(e.type)||"Component"),Wc.enqueueReplaceState(t,t.state,null))}(e,a),vc(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var qc;Fc=!1,zc=!1,Ac={},jc={},Uc={},qc=function(e,t){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){if("object"!=typeof e._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");e._store.validated=!0;var n=Ve(t.type)||"Component";jc[n]||(jc[n]=!0,l('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'))}};var Qc=Array.isArray;function Kc(e,t,n){var r=n.ref;if(null!==r&&"function"!=typeof r&&"object"!=typeof r){if(1&e.mode&&(!n._owner||!n._self||n._owner.stateNode===n._self)){var a=Ve(e.type)||"Component";Ac[a]||(l('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r),Ac[a]=!0)}if(n._owner){var o,i=n._owner;if(i){var u=i;if(1!==u.tag)throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");o=u.stateNode}if(!o)throw Error("Missing owner for string ref "+r+". This error is likely caused by a bug in React. Please file an issue.");var s=""+r;if(null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===s)return t.ref;var c=function(e){var t=o.refs;t===Oc&&(t=o.refs={}),null===e?delete t[s]:t[s]=e};return c._stringRef=s,c}if("string"!=typeof r)throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");if(!n._owner)throw Error("Element ref was specified as a string ("+r+") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.")}return r}function Gc(e,t){if("textarea"!==e.type)throw Error("Objects are not valid as a React child (found: "+("[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}function Xc(e){var t=Ve(e.type)||"Component";Uc[t]||(Uc[t]=!0,l("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."))}function Jc(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(var a=r;null!==a;)t(n,a),a=a.sibling;return null}function r(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function a(e,t){var n=fg(e,t);return n.index=0,n.sibling=null,n}function o(t,n,r){if(t.index=r,!e)return n;var a=t.alternate;if(null!==a){var o=a.index;return o<n?(t.flags=2,n):o}return t.flags=2,n}function i(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){if(null===t||6!==t.tag){var o=gg(n,e.mode,r);return o.return=e,o}var i=a(t,n);return i.return=e,i}function s(e,t,n,r){if(null!==t&&(t.elementType===n.type||Gv(t,n))){var o=a(t,n.props);return o.ref=Kc(e,t,n),o.return=e,o._debugSource=n._source,o._debugOwner=n._owner,o}var i=mg(n,e.mode,r);return i.ref=Kc(e,t,n),i.return=e,i}function c(e,t,n,r){if(null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var o=yg(n,e.mode,r);return o.return=e,o}var i=a(t,n.children||[]);return i.return=e,i}function d(e,t,n,r,o){if(null===t||7!==t.tag){var i=hg(n,e.mode,r,o);return i.return=e,i}var l=a(t,n);return l.return=e,l}function p(e,t,n){if("string"==typeof t||"number"==typeof t){var r=gg(""+t,e.mode,n);return r.return=e,r}if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:var a=mg(t,e.mode,n);return a.ref=Kc(e,null,t),a.return=e,a;case te:var o=yg(t,e.mode,n);return o.return=e,o}if(Qc(t)||be(t)){var i=hg(t,e.mode,n,null);return i.return=e,i}Gc(e,t)}return"function"==typeof t&&Xc(e),null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===a?n.type===ne?d(e,t,n.props.children,r,a):s(e,t,n,r):null;case te:return n.key===a?c(e,t,n,r):null}if(Qc(n)||be(n))return null!==a?null:d(e,t,n,r,null);Gc(e,n)}return"function"==typeof n&&Xc(e),null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:var o=e.get(null===r.key?n:r.key)||null;return r.type===ne?d(t,o,r.props.children,a,r.key):s(t,o,r,a);case te:return c(t,e.get(null===r.key?n:r.key)||null,r,a)}if(Qc(r)||be(r))return d(t,e.get(n)||null,r,a,null);Gc(t,r)}return"function"==typeof r&&Xc(t),null}function v(e,t,n){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case ee:case te:qc(e,n);var r=e.key;if("string"!=typeof r)break;if(null===t){(t=new Set).add(r);break}if(!t.has(r)){t.add(r);break}l("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",r)}return t}return function(u,s,c,d){var g="object"==typeof c&&null!==c&&c.type===ne&&null===c.key;g&&(c=c.props.children);var b="object"==typeof c&&null!==c;if(b)switch(c.$$typeof){case ee:return i(function(e,r,o,i){for(var l=o.key,u=r;null!==u;){if(u.key===l){if(7===u.tag){if(o.type===ne){n(e,u.sibling);var s=a(u,o.props.children);return s.return=e,s._debugSource=o._source,s._debugOwner=o._owner,s}}else if(u.elementType===o.type||Gv(u,o)){n(e,u.sibling);var c=a(u,o.props);return c.ref=Kc(e,u,o),c.return=e,c._debugSource=o._source,c._debugOwner=o._owner,c}n(e,u);break}t(e,u),u=u.sibling}if(o.type===ne){var f=hg(o.props.children,e.mode,i,o.key);return f.return=e,f}var d=mg(o,e.mode,i);return d.ref=Kc(e,r,o),d.return=e,d}(u,s,c,d));case te:return i(function(e,r,o,i){for(var l=o.key,u=r;null!==u;){if(u.key===l){if(4===u.tag&&u.stateNode.containerInfo===o.containerInfo&&u.stateNode.implementation===o.implementation){n(e,u.sibling);var s=a(u,o.children||[]);return s.return=e,s}n(e,u);break}t(e,u),u=u.sibling}var c=yg(o,e.mode,i);return c.return=e,c}(u,s,c,d))}if("string"==typeof c||"number"==typeof c)return i(function(e,t,r,o){if(null!==t&&6===t.tag){n(e,t.sibling);var i=a(t,r);return i.return=e,i}n(e,t);var l=gg(r,e.mode,o);return l.return=e,l}(u,s,""+c,d));if(Qc(c))return function(a,i,l,u){for(var s=null,c=0;c<l.length;c++)s=v(l[c],s,a);for(var f=null,d=null,g=i,y=0,b=0,w=null;null!==g&&b<l.length;b++){g.index>b?(w=g,g=null):w=g.sibling;var k=m(a,g,l[b],u);if(null===k){null===g&&(g=w);break}e&&g&&null===k.alternate&&t(a,g),y=o(k,y,b),null===d?f=k:d.sibling=k,d=k,g=w}if(b===l.length)return n(a,g),f;if(null===g){for(;b<l.length;b++){var E=p(a,l[b],u);null!==E&&(y=o(E,y,b),null===d?f=E:d.sibling=E,d=E)}return f}for(var x=r(0,g);b<l.length;b++){var S=h(x,a,b,l[b],u);null!==S&&(e&&null!==S.alternate&&x.delete(null===S.key?b:S.key),y=o(S,y,b),null===d?f=S:d.sibling=S,d=S)}return e&&x.forEach((function(e){return t(a,e)})),f}(u,s,c,d);if(be(c))return function(a,i,u,s){var c=be(u);if("function"!=typeof c)throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");"function"==typeof Symbol&&"Generator"===u[Symbol.toStringTag]&&(zc||l("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."),zc=!0),u.entries===c&&(Fc||l("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),Fc=!0);var f=c.call(u);if(f)for(var d=null,g=f.next();!g.done;g=f.next())d=v(g.value,d,a);var y=c.call(u);if(null==y)throw Error("An iterable object provided no iterator.");for(var b=null,w=null,k=i,E=0,x=0,S=null,C=y.next();null!==k&&!C.done;x++,C=y.next()){k.index>x?(S=k,k=null):S=k.sibling;var T=m(a,k,C.value,s);if(null===T){null===k&&(k=S);break}e&&k&&null===T.alternate&&t(a,k),E=o(T,E,x),null===w?b=T:w.sibling=T,w=T,k=S}if(C.done)return n(a,k),b;if(null===k){for(;!C.done;x++,C=y.next()){var N=p(a,C.value,s);null!==N&&(E=o(N,E,x),null===w?b=N:w.sibling=N,w=N)}return b}for(var R=r(0,k);!C.done;x++,C=y.next()){var P=h(R,a,x,C.value,s);null!==P&&(e&&null!==P.alternate&&R.delete(null===P.key?x:P.key),E=o(P,E,x),null===w?b=P:w.sibling=P,w=P)}return e&&R.forEach((function(e){return t(a,e)})),b}(u,s,c,d);if(b&&Gc(u,c),"function"==typeof c&&Xc(u),void 0===c&&!g)switch(u.tag){case 1:if(u.stateNode.render._isMockFunction)break;case E:case 0:case f:case y:throw Error((Ve(u.type)||"Component")+"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.")}return n(u,s)}}var Zc=Jc(!0),ef=Jc(!1);function tf(e,t){for(var n=e.child;null!==n;)dg(n,t),n=n.sibling}var nf={},rf=Du(nf),af=Du(nf),of=Du(nf);function lf(e){if(e===nf)throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");return e}function uf(){return lf(of.current)}function sf(e,t){Ou(of,t,e),Ou(af,e,e),Ou(rf,nf,e);var n=function(e){var t,n,r=e.nodeType;switch(r){case 9:case 11:t=9===r?"#document":"#fragment";var a=e.documentElement;n=a?a.namespaceURI:Ut(null,"");break;default:var o=8===r?e.parentNode:e;n=Ut(o.namespaceURI||null,t=o.tagName)}var i=t.toLowerCase();return{namespace:n,ancestorInfo:Dl(null,i)}}(t);Iu(rf,e),Ou(rf,n,e)}function cf(e){Iu(rf,e),Iu(af,e),Iu(of,e)}function ff(){return lf(rf.current)}function df(e){lf(of.current);var t,n,r,a=lf(rf.current),o=(t=a,n=e.type,{namespace:Ut((r=t).namespace,n),ancestorInfo:Dl(r.ancestorInfo,n)});a!==o&&(Ou(af,e,e),Ou(rf,o,e))}function pf(e){af.current===e&&(Iu(rf,e),Iu(af,e))}var mf=Du(0);function hf(e,t){return 0!=(e&t)}function vf(e){return 1&e}function gf(e,t){return 1&e|t}function yf(e,t){Ou(mf,t,e)}function bf(e){Iu(mf,e)}function wf(e,t){var n=e.memoizedState;if(null!==n)return null!==n.dehydrated;var r=e.memoizedProps;return void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!t)}function kf(e){for(var t=e;null!==t;){if(t.tag===h){var n=t.memoizedState;if(null!==n){var r=n.dehydrated;if(null===r||r.data===Al||tu(r))return t}}else if(t.tag===w&&void 0!==t.memoizedProps.revealOrder){if(0!=(t.flags&dr))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return null;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ef=null,xf=null,Sf=!1;function Cf(e,t){switch(e.tag){case 3:!function(e,t){1===t.nodeType?Tl(e,t):8===t.nodeType||Nl(e,t)}(e.stateNode.containerInfo,t);break;case 5:!function(e,t,n,r){!0!==t.suppressHydrationWarning&&(1===r.nodeType?Tl(n,r):8===r.nodeType||Nl(n,r))}(e.type,e.memoizedProps,e.stateNode,t)}var n,r=((n=sg(5,null,null,0)).elementType="DELETED",n.type="DELETED",n);r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Tf(e,t){switch(t.flags=-1025&t.flags|2,e.tag){case 3:var n=e.stateNode.containerInfo;switch(t.tag){case 5:var r=t.type;t.pendingProps,function(e,t,n){Rl(e,t)}(n,r);break;case 6:!function(e,t){Pl(e,t)}(n,t.pendingProps)}break;case 5:e.type;var a=e.memoizedProps,o=e.stateNode;switch(t.tag){case 5:var i=t.type;t.pendingProps,function(e,t,n,r,a){!0!==t.suppressHydrationWarning&&Rl(n,r)}(0,a,o,i);break;case 6:!function(e,t,n,r){!0!==t.suppressHydrationWarning&&Pl(n,r)}(0,a,o,t.pendingProps);break;case h:!function(e,t,n){t.suppressHydrationWarning}(0,a)}break;default:return}}function Nf(e,t){switch(e.tag){case 5:var n=e.type;e.pendingProps;var r=function(e,t,n){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e}(t,n);return null!==r&&(e.stateNode=r,!0);case 6:var a=function(e,t){return""===t||3!==e.nodeType?null:e}(t,e.pendingProps);return null!==a&&(e.stateNode=a,!0);default:return!1}}function Rf(e){if(Sf){var t=xf;if(!t)return Tf(Ef,e),Sf=!1,void(Ef=e);var n=t;if(!Nf(e,t)){if(!(t=ru(n))||!Nf(e,t))return Tf(Ef,e),Sf=!1,void(Ef=e);Cf(Ef,n)}Ef=e,xf=au(t)}}function Pf(e){var t=e.stateNode,n=e.memoizedProps,r=function(e,t,n){return mu(n,e),function(e,t){return e.nodeValue!==t}(e,t)}(t,n,e);if(r){var a=Ef;if(null!==a)switch(a.tag){case 3:a.stateNode.containerInfo;!function(e,t,n){Cl(t,n)}(0,t,n);break;case 5:a.type;var o=a.memoizedProps;a.stateNode;!function(e,t,n,r,a){!0!==t.suppressHydrationWarning&&Cl(r,a)}(0,o,0,t,n)}}return r}function _f(e){var t=e.memoizedState,n=null!==t?t.dehydrated:null;if(!n)throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");return function(e){for(var t=e.nextSibling,n=0;t;){if(8===t.nodeType){var r=t.data;if("/$"===r){if(0===n)return ru(t);n--}else"$"!==r&&r!==jl&&r!==Al||n++}t=t.nextSibling}return null}(n)}function Df(e){for(var t=e.return;null!==t&&5!==t.tag&&3!==t.tag&&t.tag!==h;)t=t.return;Ef=t}function If(e){if(e!==Ef)return!1;if(!Sf)return Df(e),Sf=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$l(t,e.memoizedProps))for(var n=xf;n;)Cf(e,n),n=ru(n);return Df(e),xf=e.tag===h?_f(e):Ef?ru(e.stateNode):null,!0}function Of(){Ef=null,xf=null,Sf=!1}function Lf(){return Sf}var Mf,Ff=[];function zf(){for(var e=0;e<Ff.length;e++){Ff[e]._workInProgressVersionPrimary=null}Ff.length=0}function Af(e,t){e._workInProgressVersionPrimary=t,Ff.push(e)}Mf={};var jf,Uf,Wf=o.ReactCurrentDispatcher,Bf=o.ReactCurrentBatchConfig;Uf={},jf=new Set;var Vf=0,Hf=null,$f=null,Yf=null,qf=!1,Qf=!1,Kf=null,Gf=null,Xf=-1,Jf=!1;function Zf(){var e=Kf;null===Gf?Gf=[e]:Gf.push(e)}function ed(){var e=Kf;null!==Gf&&(Xf++,Gf[Xf]!==e&&function(e){var t=Ve(Hf.type);if(!jf.has(t)&&(jf.add(t),null!==Gf)){for(var n="",r=30,a=0;a<=Xf;a++){for(var o=Gf[a],i=a===Xf?e:o,u=a+1+". "+o;u.length<r;)u+=" ";n+=u+=i+"\n"}l("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}(e))}function td(e){null==e||Array.isArray(e)||l("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",Kf,typeof e)}function nd(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.")}function rd(e,t){if(Jf)return!1;if(null===t)return l("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",Kf),!1;e.length!==t.length&&l("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",Kf,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!pi(e[n],t[n]))return!1;return!0}function ad(e,t,n,r,a,o){Vf=o,Hf=t,Gf=null!==e?e._debugHookTypes:null,Xf=-1,Jf=null!==e&&e.type!==t.type,t.memoizedState=null,t.updateQueue=null,t.lanes=0,null!==e&&null!==e.memoizedState?Wf.current=ep:Wf.current=null!==Gf?Zd:Jd;var i=n(r,a);if(Qf){var l=0;do{if(Qf=!1,!(l<25))throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");l+=1,Jf=!1,$f=null,Yf=null,t.updateQueue=null,Xf=-1,Wf.current=tp,i=n(r,a)}while(Qf)}Wf.current=Xd,t._debugHookTypes=Gf;var u=null!==$f&&null!==$f.next;if(Vf=0,Hf=null,$f=null,Yf=null,Kf=null,Gf=null,Xf=-1,qf=!1,u)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");return i}function od(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes=za(e.lanes,n)}function id(){if(Wf.current=Xd,qf){for(var e=Hf.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}qf=!1}Vf=0,Hf=null,$f=null,Yf=null,Gf=null,Xf=-1,Kf=null,$d=!1,Qf=!1}function ld(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Yf?Hf.memoizedState=Yf=e:Yf=Yf.next=e,Yf}function ud(){var e,t;if(null===$f){var n=Hf.alternate;e=null!==n?n.memoizedState:null}else e=$f.next;if(null!==(t=null===Yf?Hf.memoizedState:Yf.next))t=(Yf=t).next,$f=e;else{if(null===e)throw Error("Rendered more hooks than during the previous render.");var r={memoizedState:($f=e).memoizedState,baseState:$f.baseState,baseQueue:$f.baseQueue,queue:$f.queue,next:null};null===Yf?Hf.memoizedState=Yf=r:Yf=Yf.next=r}return Yf}function sd(e,t){return"function"==typeof t?t(e):t}function cd(e,t,n){var r,a=ld();r=void 0!==n?n(t):t,a.memoizedState=a.baseState=r;var o=a.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:r},i=o.dispatch=Gd.bind(null,Hf,o);return[a.memoizedState,i]}function fd(e,t,n){var r=ud(),a=r.queue;if(null===a)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");a.lastRenderedReducer=e;var o=$f,i=o.baseQueue,u=a.pending;if(null!==u){if(null!==i){var s=i.next,c=u.next;i.next=c,u.next=s}o.baseQueue!==i&&l("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),o.baseQueue=i=u,a.pending=null}if(null!==i){var f=i.next,d=o.baseState,p=null,m=null,h=null,v=f;do{var g=v.lane;if(Ma(Vf,g)){if(null!==h){var y={lane:0,action:v.action,eagerReducer:v.eagerReducer,eagerState:v.eagerState,next:null};h=h.next=y}if(v.eagerReducer===e)d=v.eagerState;else d=e(d,v.action)}else{var b={lane:g,action:v.action,eagerReducer:v.eagerReducer,eagerState:v.eagerState,next:null};null===h?(m=h=b,p=d):h=h.next=b,Hf.lanes=Fa(Hf.lanes,g),nv(g)}v=v.next}while(null!==v&&v!==f);null===h?p=d:h.next=m,pi(d,r.memoizedState)||om(),r.memoizedState=d,r.baseState=p,r.baseQueue=h,a.lastRenderedState=d}var w=a.dispatch;return[r.memoizedState,w]}function dd(e,t,n){var r=ud(),a=r.queue;if(null===a)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");a.lastRenderedReducer=e;var o=a.dispatch,i=a.pending,l=r.memoizedState;if(null!==i){a.pending=null;var u=i.next,s=u;do{l=e(l,s.action),s=s.next}while(s!==u);pi(l,r.memoizedState)||om(),r.memoizedState=l,null===r.baseQueue&&(r.baseState=l),a.lastRenderedState=l}return[l,o]}function pd(e,t,n){var r;null==(r=t)._currentPrimaryRenderer?r._currentPrimaryRenderer=Mf:r._currentPrimaryRenderer!==Mf&&l("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");var a=(0,t._getVersion)(t._source),o=!1,i=function(e){return e._workInProgressVersionPrimary}(t);if(null!==i?o=i===a:(o=Ma(Vf,e.mutableReadLanes))&&Af(t,a),o){var u=n(t._source);return"function"==typeof u&&l("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."),u}throw function(e){Ff.push(e)}(t),Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.")}function md(e,t,n,r){var a=Zm;if(null===a)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");var o=t._getVersion,i=o(t._source),u=Wf.current,s=u.useState((function(){return pd(a,t,n)})),c=s[0],f=s[1],d=c,p=Yf,m=e.memoizedState,h=m.refs,v=h.getSnapshot,g=m.source,y=m.subscribe,b=Hf;if(e.memoizedState={refs:h,source:t,subscribe:r},u.useEffect((function(){h.getSnapshot=n,h.setSnapshot=f;var e=o(t._source);if(!pi(i,e)){var r=n(t._source);if("function"==typeof r&&l("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."),!pi(d,r)){f(r);var u=zh(b);Wa(a,u)}!function(e,t){e.entangledLanes|=t;for(var n=e.entanglements,r=t;r>0;){var a=Oa(r),o=1<<a;n[a]|=t,r&=~o}}(a,a.mutableReadLanes)}}),[n,t,r]),u.useEffect((function(){var e=r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=zh(b);Wa(a,r)}catch(e){n((function(){throw e}))}}));return"function"!=typeof e&&l("Mutable source subscribe function must return an unsubscribe function."),e}),[t,r]),!pi(v,n)||!pi(g,t)||!pi(y,r)){var w={pending:null,dispatch:null,lastRenderedReducer:sd,lastRenderedState:d};w.dispatch=f=Gd.bind(null,Hf,w),p.queue=w,p.baseQueue=null,d=pd(a,t,n),p.memoizedState=p.baseState=d}return d}function hd(e,t,n){var r=ld();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},md(r,e,t,n)}function vd(e,t,n){return md(ud(),e,t,n)}function gd(e){var t=ld();"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e;var n=t.queue={pending:null,dispatch:null,lastRenderedReducer:sd,lastRenderedState:e},r=n.dispatch=Gd.bind(null,Hf,n);return[t.memoizedState,r]}function yd(e){return fd(sd)}function bd(e){return dd(sd)}function wd(e,t,n,r){var a={tag:e,create:t,destroy:n,deps:r,next:null},o=Hf.updateQueue;if(null===o)o={lastEffect:null},Hf.updateQueue=o,o.lastEffect=a.next=a;else{var i=o.lastEffect;if(null===i)o.lastEffect=a.next=a;else{var l=i.next;i.next=a,a.next=l,o.lastEffect=a}}return a}function kd(e){var t=ld(),n={current:e};return Object.seal(n),t.memoizedState=n,n}function Ed(e){return ud().memoizedState}function xd(e,t,n,r){var a=ld(),o=void 0===r?null:r;Hf.flags|=e,a.memoizedState=wd(1|t,n,void 0,o)}function Sd(e,t,n,r){var a=ud(),o=void 0===r?null:r,i=void 0;if(null!==$f){var l=$f.memoizedState;if(i=l.destroy,null!==o)if(rd(o,l.deps))return void wd(t,n,i,o)}Hf.flags|=e,a.memoizedState=wd(1|t,n,i,o)}function Cd(e,t){return"undefined"!=typeof jest&&Ov(Hf),xd(516,4,e,t)}function Td(e,t){return"undefined"!=typeof jest&&Ov(Hf),Sd(516,4,e,t)}function Nd(e,t){return xd(4,2,e,t)}function Rd(e,t){return Sd(4,2,e,t)}function Pd(e,t){if("function"==typeof t){var n=t,r=e();return n(r),function(){n(null)}}if(null!=t){var a=t;a.hasOwnProperty("current")||l("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(a).join(", ")+"}");var o=e();return a.current=o,function(){a.current=null}}}function _d(e,t,n){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null;return xd(4,2,Pd.bind(null,t,e),r)}function Dd(e,t,n){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null;return Sd(4,2,Pd.bind(null,t,e),r)}function Id(e,t){}var Od=Id;function Ld(e,t){var n=void 0===t?null:t;return ld().memoizedState=[e,n],e}function Md(e,t){var n=ud(),r=void 0===t?null:t,a=n.memoizedState;if(null!==a&&(null!==r&&rd(r,a[1])))return a[0];return n.memoizedState=[e,r],e}function Fd(e,t){var n=ld(),r=void 0===t?null:t,a=e();return n.memoizedState=[a,r],a}function zd(e,t){var n=ud(),r=void 0===t?null:t,a=n.memoizedState;if(null!==a&&(null!==r&&rd(r,a[1])))return a[0];var o=e();return n.memoizedState=[o,r],o}function Ad(e){var t=gd(e),n=t[0],r=t[1];return Cd((function(){var t=Bf.transition;Bf.transition=1;try{r(e)}finally{Bf.transition=t}}),[e]),n}function jd(e){var t=yd(),n=t[0],r=t[1];return Td((function(){var t=Bf.transition;Bf.transition=1;try{r(e)}finally{Bf.transition=t}}),[e]),n}function Ud(e){var t=bd(),n=t[0],r=t[1];return Td((function(){var t=Bf.transition;Bf.transition=1;try{r(e)}finally{Bf.transition=t}}),[e]),n}function Wd(e,t){var n=Ss();Ts(n<hs?hs:n,(function(){e(!0)})),Ts(n>vs?vs:n,(function(){var n=Bf.transition;Bf.transition=1;try{e(!1),t()}finally{Bf.transition=n}}))}function Bd(){var e=gd(!1),t=e[0],n=e[1],r=Wd.bind(null,n);return kd(r),[r,t]}function Vd(){var e=yd()[0];return[Ed().current,e]}function Hd(){var e=bd()[0];return[Ed().current,e]}var $d=!1;function Yd(e){var t=Ve(e.type)||"Unknown";Ye&&!Uf[t]&&(l("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly."),Uf[t]=!0)}function qd(){var e=uu.bind(null,Yd.bind(null,Hf));if(Lf()){var t=!1,n=Hf,r={$$typeof:pe,toString:o=function(){throw t||(t=!0,$d=!0,a(e()),$d=!1,Yd(n)),Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.")},valueOf:o},a=gd(r)[1];return 0==(2&Hf.mode)&&(Hf.flags|=516,wd(5,(function(){a(e())}),void 0,null)),r}var o,i=e();return gd(i),i}function Qd(){return yd()[0]}function Kd(){return bd()[0]}function Gd(e,t,n){"function"==typeof arguments[3]&&l("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var r=Fh(),a=zh(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o;var u=e.alternate;if(e===Hf||null!==u&&u===Hf)Qf=qf=!0;else{if(0===e.lanes&&(null===u||0===u.lanes)){var s=t.lastRenderedReducer;if(null!==s){var c;c=Wf.current,Wf.current=rp;try{var f=t.lastRenderedState,d=s(f,n);if(o.eagerReducer=s,o.eagerState=d,pi(d,f))return}catch(e){}finally{Wf.current=c}}}"undefined"!=typeof jest&&(Iv(e),Lv(e)),jh(e,a,r)}}var Xd={readContext:oc,useCallback:nd,useContext:nd,useEffect:nd,useImperativeHandle:nd,useLayoutEffect:nd,useMemo:nd,useReducer:nd,useRef:nd,useState:nd,useDebugValue:nd,useDeferredValue:nd,useTransition:nd,useMutableSource:nd,useOpaqueIdentifier:nd,unstable_isNewReconciler:C},Jd=null,Zd=null,ep=null,tp=null,np=null,rp=null,ap=null,op=function(){l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")},ip=function(){l("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks")};Jd={readContext:function(e,t){return oc(e,t)},useCallback:function(e,t){return Kf="useCallback",Zf(),td(t),Ld(e,t)},useContext:function(e,t){return Kf="useContext",Zf(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",Zf(),td(t),Cd(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",Zf(),td(n),_d(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",Zf(),td(t),Nd(e,t)},useMemo:function(e,t){Kf="useMemo",Zf(),td(t);var n=Wf.current;Wf.current=np;try{return Fd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",Zf();var r=Wf.current;Wf.current=np;try{return cd(e,t,n)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",Zf(),kd(e)},useState:function(e){Kf="useState",Zf();var t=Wf.current;Wf.current=np;try{return gd(e)}finally{Wf.current=t}},useDebugValue:function(e,t){Kf="useDebugValue",Zf()},useDeferredValue:function(e){return Kf="useDeferredValue",Zf(),Ad(e)},useTransition:function(){return Kf="useTransition",Zf(),Bd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",Zf(),hd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",Zf(),qd()},unstable_isNewReconciler:C},Zd={readContext:function(e,t){return oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ed(),Ld(e,t)},useContext:function(e,t){return Kf="useContext",ed(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ed(),Cd(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ed(),_d(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ed(),Nd(e,t)},useMemo:function(e,t){Kf="useMemo",ed();var n=Wf.current;Wf.current=np;try{return Fd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ed();var r=Wf.current;Wf.current=np;try{return cd(e,t,n)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ed(),kd(e)},useState:function(e){Kf="useState",ed();var t=Wf.current;Wf.current=np;try{return gd(e)}finally{Wf.current=t}},useDebugValue:function(e,t){Kf="useDebugValue",ed()},useDeferredValue:function(e){return Kf="useDeferredValue",ed(),Ad(e)},useTransition:function(){return Kf="useTransition",ed(),Bd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ed(),hd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ed(),qd()},unstable_isNewReconciler:C},ep={readContext:function(e,t){return oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ed(),Md(e,t)},useContext:function(e,t){return Kf="useContext",ed(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ed(),Td(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ed(),Dd(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ed(),Rd(e,t)},useMemo:function(e,t){Kf="useMemo",ed();var n=Wf.current;Wf.current=rp;try{return zd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ed();var r=Wf.current;Wf.current=rp;try{return fd(e)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ed(),Ed()},useState:function(e){Kf="useState",ed();var t=Wf.current;Wf.current=rp;try{return yd()}finally{Wf.current=t}},useDebugValue:function(e,t){return Kf="useDebugValue",ed(),Od()},useDeferredValue:function(e){return Kf="useDeferredValue",ed(),jd(e)},useTransition:function(){return Kf="useTransition",ed(),Vd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ed(),vd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ed(),Qd()},unstable_isNewReconciler:C},tp={readContext:function(e,t){return oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ed(),Md(e,t)},useContext:function(e,t){return Kf="useContext",ed(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ed(),Td(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ed(),Dd(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ed(),Rd(e,t)},useMemo:function(e,t){Kf="useMemo",ed();var n=Wf.current;Wf.current=ap;try{return zd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ed();var r=Wf.current;Wf.current=ap;try{return dd(e)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ed(),Ed()},useState:function(e){Kf="useState",ed();var t=Wf.current;Wf.current=ap;try{return bd()}finally{Wf.current=t}},useDebugValue:function(e,t){return Kf="useDebugValue",ed(),Od()},useDeferredValue:function(e){return Kf="useDeferredValue",ed(),Ud(e)},useTransition:function(){return Kf="useTransition",ed(),Hd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ed(),vd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ed(),Kd()},unstable_isNewReconciler:C},np={readContext:function(e,t){return op(),oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ip(),Zf(),Ld(e,t)},useContext:function(e,t){return Kf="useContext",ip(),Zf(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ip(),Zf(),Cd(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ip(),Zf(),_d(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ip(),Zf(),Nd(e,t)},useMemo:function(e,t){Kf="useMemo",ip(),Zf();var n=Wf.current;Wf.current=np;try{return Fd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ip(),Zf();var r=Wf.current;Wf.current=np;try{return cd(e,t,n)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ip(),Zf(),kd(e)},useState:function(e){Kf="useState",ip(),Zf();var t=Wf.current;Wf.current=np;try{return gd(e)}finally{Wf.current=t}},useDebugValue:function(e,t){Kf="useDebugValue",ip(),Zf()},useDeferredValue:function(e){return Kf="useDeferredValue",ip(),Zf(),Ad(e)},useTransition:function(){return Kf="useTransition",ip(),Zf(),Bd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ip(),Zf(),hd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ip(),Zf(),qd()},unstable_isNewReconciler:C},rp={readContext:function(e,t){return op(),oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ip(),ed(),Md(e,t)},useContext:function(e,t){return Kf="useContext",ip(),ed(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ip(),ed(),Td(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ip(),ed(),Dd(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ip(),ed(),Rd(e,t)},useMemo:function(e,t){Kf="useMemo",ip(),ed();var n=Wf.current;Wf.current=rp;try{return zd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ip(),ed();var r=Wf.current;Wf.current=rp;try{return fd(e)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ip(),ed(),Ed()},useState:function(e){Kf="useState",ip(),ed();var t=Wf.current;Wf.current=rp;try{return yd()}finally{Wf.current=t}},useDebugValue:function(e,t){return Kf="useDebugValue",ip(),ed(),Od()},useDeferredValue:function(e){return Kf="useDeferredValue",ip(),ed(),jd(e)},useTransition:function(){return Kf="useTransition",ip(),ed(),Vd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ip(),ed(),vd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ip(),ed(),Qd()},unstable_isNewReconciler:C},ap={readContext:function(e,t){return op(),oc(e,t)},useCallback:function(e,t){return Kf="useCallback",ip(),ed(),Md(e,t)},useContext:function(e,t){return Kf="useContext",ip(),ed(),oc(e,t)},useEffect:function(e,t){return Kf="useEffect",ip(),ed(),Td(e,t)},useImperativeHandle:function(e,t,n){return Kf="useImperativeHandle",ip(),ed(),Dd(e,t,n)},useLayoutEffect:function(e,t){return Kf="useLayoutEffect",ip(),ed(),Rd(e,t)},useMemo:function(e,t){Kf="useMemo",ip(),ed();var n=Wf.current;Wf.current=rp;try{return zd(e,t)}finally{Wf.current=n}},useReducer:function(e,t,n){Kf="useReducer",ip(),ed();var r=Wf.current;Wf.current=rp;try{return dd(e)}finally{Wf.current=r}},useRef:function(e){return Kf="useRef",ip(),ed(),Ed()},useState:function(e){Kf="useState",ip(),ed();var t=Wf.current;Wf.current=rp;try{return bd()}finally{Wf.current=t}},useDebugValue:function(e,t){return Kf="useDebugValue",ip(),ed(),Od()},useDeferredValue:function(e){return Kf="useDeferredValue",ip(),ed(),Ud(e)},useTransition:function(){return Kf="useTransition",ip(),ed(),Hd()},useMutableSource:function(e,t,n){return Kf="useMutableSource",ip(),ed(),vd(e,t,n)},useOpaqueIdentifier:function(){return Kf="useOpaqueIdentifier",ip(),ed(),Kd()},unstable_isNewReconciler:C};var lp=n.unstable_now,up=0,sp=-1;function cp(){return up}function fp(){up=lp()}function dp(e){sp=lp(),e.actualStartTime<0&&(e.actualStartTime=lp())}function pp(e){sp=-1}function mp(e,t){if(sp>=0){var n=lp()-sp;e.actualDuration+=n,t&&(e.selfBaseDuration=n),sp=-1}}function hp(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}var vp,gp,yp,bp,wp,kp,Ep,xp,Sp=o.ReactCurrentOwner,Cp=!1;function Tp(e,t,n,r){t.child=null===e?ef(t,null,n,r):Zc(t,e.child,n,r)}function Np(e,t,n,r,a){if(t.type!==t.elementType){var o=n.propTypes;o&&Tu(o,r,"prop",Ve(n))}var i,l=n.render,u=t.ref;if(ac(t,a),Sp.current=t,Xe(!0),i=ad(e,t,l,r,u,a),1&t.mode){Pe();try{i=ad(e,t,l,r,u,a)}finally{_e()}}return Xe(!1),null===e||Cp?(t.flags|=1,Tp(e,t,i,a),t.child):(od(e,t,a),im(e,t,a))}function Rp(e,t,n,r,a,o){if(null===e){var i=n.type;if(function(e){return"function"==typeof e&&!cg(e)&&void 0===e.defaultProps}(i)&&null===n.compare&&void 0===n.defaultProps){var l;return l=qv(i),t.tag=y,t.type=l,jp(t,i),Pp(e,t,l,r,a,o)}var u=i.propTypes;u&&Tu(u,r,"prop",Ve(i));var s=pg(n.type,null,r,t,t.mode,o);return s.ref=t.ref,s.return=t,t.child=s,s}var c=n.type,f=c.propTypes;f&&Tu(f,r,"prop",Ve(c));var d=e.child;if(!La(a,o)){var p=d.memoizedProps,m=n.compare;if((m=null!==m?m:hi)(p,r)&&e.ref===t.ref)return im(e,t,o)}t.flags|=1;var h=fg(d,r);return h.ref=t.ref,h.return=t,t.child=h,h}function Pp(e,t,n,r,a,o){if(t.type!==t.elementType){var i=t.elementType;if(i.$$typeof===fe){var l=i,u=l._payload,s=l._init;try{i=s(u)}catch(e){i=null}var c=i&&i.propTypes;c&&Tu(c,r,"prop",Ve(i))}}if(null!==e&&(hi(e.memoizedProps,r)&&e.ref===t.ref&&t.type===e.type)){if(Cp=!1,!La(o,a))return t.lanes=e.lanes,im(e,t,o);0!=(e.flags&wr)&&(Cp=!0)}return Op(e,t,n,r,o)}function _p(e,t,n){var r,a=t.pendingProps,o=a.children,i=null!==e?e.memoizedState:null;if("hidden"===a.mode||"unstable-defer-without-hiding"===a.mode)if(0==(4&t.mode)){var l={baseLanes:0};t.memoizedState=l,Qh(t,n)}else{if(!La(n,Ea)){var u;if(null!==i)u=Fa(i.baseLanes,n);else u=n;zv(Ea),t.lanes=t.childLanes=Ea;var s={baseLanes:u};return t.memoizedState=s,Qh(t,u),null}var c={baseLanes:0};t.memoizedState=c,Qh(t,null!==i?i.baseLanes:n)}else null!==i?(r=Fa(i.baseLanes,n),t.memoizedState=null):r=n,Qh(t,r);return Tp(e,t,o,n),t.child}vp={},gp={},yp={},bp={},wp={},kp=!1,Ep={},xp={};var Dp=_p;function Ip(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=pr)}function Op(e,t,n,r,a){if(t.type!==t.elementType){var o=n.propTypes;o&&Tu(o,r,"prop",Ve(n))}var i,l;if(i=Uu(t,Au(0,n,!0)),ac(t,a),Sp.current=t,Xe(!0),l=ad(e,t,n,r,i,a),1&t.mode){Pe();try{l=ad(e,t,n,r,i,a)}finally{_e()}}return Xe(!1),null===e||Cp?(t.flags|=1,Tp(e,t,l,a),t.child):(od(e,t,a),im(e,t,a))}function Lp(e,t,n,r,a){if(t.type!==t.elementType){var o=n.propTypes;o&&Tu(o,r,"prop",Ve(n))}var i,u;Bu(n)?(i=!0,qu(t)):i=!1,ac(t,a),null===t.stateNode?(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),Hc(t,n,r),Yc(t,n,r,a),u=!0):u=null===e?function(e,t,n,r){var a=e.stateNode,o=e.memoizedProps;a.props=o;var i=a.context,l=t.contextType,u=Lu;u="object"==typeof l&&null!==l?oc(l):Uu(e,Au(0,t,!0));var s=t.getDerivedStateFromProps,c="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||o===n&&i===u||$c(e,a,n,u),yc();var f=e.memoizedState,d=a.state=f;if(vc(e,n,a,r),d=e.memoizedState,o===n&&f===d&&!Wu()&&!bc())return"function"==typeof a.componentDidMount&&(e.flags|=4),!1;"function"==typeof s&&(Mc(e,t,s,n),d=e.memoizedState);var p=bc()||Bc(e,t,o,n,f,d,u);return p?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=n,e.memoizedState=d),a.props=n,a.state=d,a.context=u,p}(t,n,r,a):function(e,t,n,r,a){var o=t.stateNode;fc(e,t);var i=t.memoizedProps,l=t.type===t.elementType?i:Hs(t.type,i);o.props=l;var u=t.pendingProps,s=o.context,c=n.contextType,f=Lu;f="object"==typeof c&&null!==c?oc(c):Uu(t,Au(0,n,!0));var d=n.getDerivedStateFromProps,p="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate;p||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||i===u&&s===f||$c(t,o,r,f),yc();var m=t.memoizedState,h=o.state=m;if(vc(t,r,o,a),h=t.memoizedState,i===u&&m===h&&!Wu()&&!bc())return"function"==typeof o.componentDidUpdate&&(i===e.memoizedProps&&m===e.memoizedState||(t.flags|=4)),"function"==typeof o.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&m===e.memoizedState||(t.flags|=mr)),!1;"function"==typeof d&&(Mc(t,n,d,r),h=t.memoizedState);var v=bc()||Bc(t,n,l,r,m,h,f);return v?(p||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,f),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,f)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=mr)):("function"==typeof o.componentDidUpdate&&(i===e.memoizedProps&&m===e.memoizedState||(t.flags|=4)),"function"==typeof o.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&m===e.memoizedState||(t.flags|=mr)),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=f,v}(e,t,n,r,a);var s=Mp(e,t,n,u,i,a),c=t.stateNode;return u&&c.props!==r&&(kp||l("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",Ve(t.type)||"a component"),kp=!0),s}function Mp(e,t,n,r,a,o){Ip(e,t);var i=0!=(t.flags&dr);if(!r&&!i)return a&&Qu(t,n,!1),im(e,t,o);var l,u=t.stateNode;if(Sp.current=t,i&&"function"!=typeof n.getDerivedStateFromError)l=null,pp();else{if(Xe(!0),l=u.render(),1&t.mode){Pe();try{u.render()}finally{_e()}}Xe(!1)}return t.flags|=1,null!==e&&i?function(e,t,n,r){t.child=Zc(t,e.child,null,r),t.child=Zc(t,null,n,r)}(e,t,l,o):Tp(e,t,l,o),t.memoizedState=u.state,a&&Qu(t,n,!0),t.child}function Fp(e){var t=e.stateNode;t.pendingContext?$u(e,t.pendingContext,t.pendingContext!==t.context):t.context&&$u(e,t.context,!1),sf(e,t.containerInfo)}function zp(e,t,n){Fp(t);var r=t.updateQueue;if(null===e||null===r)throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");var a=t.pendingProps,o=t.memoizedState,i=null!==o?o.element:null;fc(e,t),vc(t,a,null,n);var l=t.memoizedState.element;if(l===i)return Of(),im(e,t,n);var u,s,c=t.stateNode;if(c.hydrate&&(s=(u=t).stateNode.containerInfo,xf=au(s),Ef=u,Sf=!0,1)){var f=c.mutableSourceEagerHydrationData;if(null!=f)for(var d=0;d<f.length;d+=2){Af(f[d],f[d+1])}var p=ef(t,null,l,n);t.child=p;for(var m=p;m;)m.flags=-3&m.flags|gr,m=m.sibling}else Tp(e,t,l,n),Of();return t.child}function Ap(e,t,n,r,a){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var o=t.pendingProps,i=n,l=i._payload,u=(0,i._init)(l);t.type=u;var s=t.tag=function(e){if("function"==typeof e)return cg(e)?1:0;if(null!=e){var t=e.$$typeof;if(t===le)return f;if(t===ce)return g}return 2}(u),c=Hs(u,o);switch(s){case 0:return jp(t,u),t.type=u=qv(u),Op(null,t,u,c,a);case 1:return t.type=u=Qv(u),Lp(null,t,u,c,a);case f:return t.type=u=Kv(u),Np(null,t,u,c,a);case g:if(t.type!==t.elementType){var d=u.propTypes;d&&Tu(d,c,"prop",Ve(u))}return Rp(null,t,u,Hs(u.type,c),r,a)}var p="";throw null!==u&&"object"==typeof u&&u.$$typeof===fe&&(p=" Did you wrap a component in React.lazy() more than once?"),Error("Element type is invalid. Received a promise that resolves to: "+u+". Lazy element type must resolve to a class or function."+p)}function jp(e,t){if(t&&t.childContextTypes&&l("%s(...): childContextTypes cannot be defined on a function component.",t.displayName||t.name||"Component"),null!==e.ref){var n="",r=qe();r&&(n+="\n\nCheck the render method of `"+r+"`.");var a=r||e._debugID||"",o=e._debugSource;o&&(a=o.fileName+":"+o.lineNumber),wp[a]||(wp[a]=!0,l("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",n))}if("function"==typeof t.getDerivedStateFromProps){var i=Ve(t)||"Unknown";bp[i]||(l("%s: Function components do not support getDerivedStateFromProps.",i),bp[i]=!0)}if("object"==typeof t.contextType&&null!==t.contextType){var u=Ve(t)||"Unknown";yp[u]||(l("%s: Function components do not support contextType.",u),yp[u]=!0)}}var Up={dehydrated:null,retryLane:0};function Wp(e){return{baseLanes:e}}function Bp(e,t){return{baseLanes:Fa(e.baseLanes,t)}}function Vp(e,t){return za(e.childLanes,t)}function Hp(e,t,n){var r=t.pendingProps;Pg(t)&&(t.flags|=dr);var a=mf.current,o=!1;if(0!=(t.flags&dr)||function(e,t,n,r){return(null===t||null!==t.memoizedState)&&hf(e,2)}(a,e)?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0!==r.fallback&&!0!==r.unstable_avoidThisFallback&&(a=a|1),yf(t,a=vf(a)),null===e){void 0!==r.fallback&&Rf(t);var i=r.children,l=r.fallback;if(o){var u=$p(t,i,l,n);return t.child.memoizedState=Wp(n),t.memoizedState=Up,u}if("number"==typeof r.unstable_expectedLoadTime){var s=$p(t,i,l,n);return t.child.memoizedState=Wp(n),t.memoizedState=Up,t.lanes=ga,zv(ga),s}return function(e,t,n){var r=e.mode,a=vg({mode:"visible",children:t},r,n,null);return a.return=e,e.child=a,a}(t,i,n)}if(null!==e.memoizedState){if(o){var c=r.fallback,f=Qp(e,t,r.children,c,n),d=t.child,p=e.child.memoizedState;return d.memoizedState=null===p?Wp(n):Bp(p,n),d.childLanes=Vp(e,n),t.memoizedState=Up,f}var m=qp(e,t,r.children,n);return t.memoizedState=null,m}if(o){var h=r.fallback,v=Qp(e,t,r.children,h,n),g=t.child,y=e.child.memoizedState;return g.memoizedState=null===y?Wp(n):Bp(y,n),g.childLanes=Vp(e,n),t.memoizedState=Up,v}var b=qp(e,t,r.children,n);return t.memoizedState=null,b}function $p(e,t,n,r){var a,o,i=e.mode,l=e.child,u={mode:"hidden",children:t};return 0==(2&i)&&null!==l?((a=l).childLanes=0,a.pendingProps=u,8&e.mode&&(a.actualDuration=0,a.actualStartTime=-1,a.selfBaseDuration=0,a.treeBaseDuration=0),o=hg(n,i,r,null)):(a=vg(u,i,0,null),o=hg(n,i,r,null)),a.return=e,o.return=e,a.sibling=o,e.child=a,o}function Yp(e,t){return fg(e,t)}function qp(e,t,n,r){var a=e.child,o=a.sibling,i=Yp(a,{mode:"visible",children:n});return 0==(2&t.mode)&&(i.lanes=r),i.return=t,i.sibling=null,null!==o&&(o.nextEffect=null,o.flags=8,t.firstEffect=t.lastEffect=o),t.child=i,i}function Qp(e,t,n,r,a){var o,i,l=t.mode,u=e.child,s=u.sibling,c={mode:"hidden",children:n};if(0==(2&l)&&t.child!==u){(o=t.child).childLanes=0,o.pendingProps=c,8&t.mode&&(o.actualDuration=0,o.actualStartTime=-1,o.selfBaseDuration=u.selfBaseDuration,o.treeBaseDuration=u.treeBaseDuration);var f=o.lastEffect;null!==f?(t.firstEffect=o.firstEffect,t.lastEffect=f,f.nextEffect=null):t.firstEffect=t.lastEffect=null}else o=Yp(u,c);return null!==s?i=fg(s,r):(i=hg(r,l,a,null)).flags|=2,i.return=t,o.return=t,o.sibling=i,t.child=o,i}function Kp(e,t){e.lanes=Fa(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=Fa(n.lanes,t)),rc(e.return,t)}function Gp(e,t){var n=Array.isArray(e),r=!n&&"function"==typeof be(e);if(n||r){var a=n?"array":"iterable";return l("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",a,t,a),!1}return!0}function Xp(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function Jp(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail,i=r.children;!function(e){if(void 0!==e&&"forwards"!==e&&"backwards"!==e&&"together"!==e&&!Ep[e])if(Ep[e]=!0,"string"==typeof e)switch(e.toLowerCase()){case"together":case"forwards":case"backwards":l('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',e,e.toLowerCase());break;case"forward":case"backward":l('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',e,e.toLowerCase());break;default:l('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}else l('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}(a),function(e,t){void 0===e||xp[e]||("collapsed"!==e&&"hidden"!==e?(xp[e]=!0,l('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',e)):"forwards"!==t&&"backwards"!==t&&(xp[e]=!0,l('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',e)))}(o,a),function(e,t){if(("forwards"===t||"backwards"===t)&&null!=e&&!1!==e)if(Array.isArray(e)){for(var n=0;n<e.length;n++)if(!Gp(e[n],n))return}else{var r=be(e);if("function"==typeof r){var a=r.call(e);if(a)for(var o=a.next(),i=0;!o.done;o=a.next()){if(!Gp(o.value,i))return;i++}}else l('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',t)}}(i,a),Tp(e,t,i,n);var u=mf.current;hf(u,2)?(u=gf(u,2),t.flags|=dr):(null!==e&&0!=(e.flags&dr)&&function(e,t,n){for(var r=t;null!==r;){if(r.tag===h)null!==r.memoizedState&&Kp(r,n);else if(r.tag===w)Kp(r,n);else if(null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}(t,t.child,n),u=vf(u));if(yf(t,u),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":var s,c=function(e){for(var t=e,n=null;null!==t;){var r=t.alternate;null!==r&&null===kf(r)&&(n=t),t=t.sibling}return n}(t.child);null===c?(s=t.child,t.child=null):(s=c.sibling,c.sibling=null),Xp(t,!1,s,c,o,t.lastEffect);break;case"backwards":var f=null,d=t.child;for(t.child=null;null!==d;){var p=d.alternate;if(null!==p&&null===kf(p)){t.child=d;break}var m=d.sibling;d.sibling=f,f=d,d=m}Xp(t,!0,f,null,o,t.lastEffect);break;case"together":Xp(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}var Zp=!1;function em(e,t,n){var r=t.type._context,a=t.pendingProps,o=t.memoizedProps,i=a.value;"value"in a||Zp||(Zp=!0,l("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));var u=t.type.propTypes;if(u&&Tu(u,a,"prop","Context.Provider"),tc(t,i),null!==o){var c=function(e,t,n){if(pi(n,t))return 0;var r="function"==typeof e._calculateChangedBits?e._calculateChangedBits(n,t):Ys;return(r&Ys)!==r&&l("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",r),0|r}(r,i,o.value);if(0===c){if(o.children===a.children&&!Wu())return im(e,t,n)}else!function(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=void 0,i=a.dependencies;if(null!==i){o=a.child;for(var l=i.firstContext;null!==l;){if(l.context===t&&0!=(l.observedBits&n)){if(1===a.tag){var u=dc(xa,Ia(r));u.tag=uc,pc(a,u)}a.lanes=Fa(a.lanes,r);var c=a.alternate;null!==c&&(c.lanes=Fa(c.lanes,r)),rc(a.return,r),i.lanes=Fa(i.lanes,r);break}l=l.next}}else o=a.tag===s&&a.type===e.type?null:a.child;if(null!==o)o.return=a;else for(o=a;null!==o;){if(o===e){o=null;break}var f=o.sibling;if(null!==f){f.return=o.return,o=f;break}o=o.return}a=o}}(t,r,c,n)}return Tp(e,t,a.children,n),t.child}var tm,nm,rm,am=!1;function om(){Cp=!0}function im(e,t,n){return null!==e&&(t.dependencies=e.dependencies),pp(),nv(t.lanes),La(n,t.childLanes)?(function(e,t){if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){var n=t.child,r=fg(n,n.pendingProps);for(t.child=r,r.return=t;null!==n.sibling;)n=n.sibling,(r=r.sibling=fg(n,n.pendingProps)).return=t;r.sibling=null}}(e,t),t.child):null}function lm(e,t,n){var r=t.lanes;if(t._debugNeedsRemount&&null!==e)return function(e,t,n){var r=t.return;if(null===r)throw new Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,t===r.child)r.child=n;else{var a=r.child;if(null===a)throw new Error("Expected parent to have a child.");for(;a.sibling!==t;)if(null===(a=a.sibling))throw new Error("Expected to find the previous sibling.");a.sibling=n}var o=r.lastEffect;return null!==o?(o.nextEffect=e,r.lastEffect=e):r.firstEffect=r.lastEffect=e,e.nextEffect=null,e.flags=8,n.flags|=2,n}(e,t,pg(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes));if(null!==e)if(e.memoizedProps!==t.pendingProps||Wu()||t.type!==e.type)Cp=!0;else{if(!La(n,r)){switch(Cp=!1,t.tag){case 3:Fp(t),Of();break;case 5:df(t);break;case 1:Bu(t.type)&&qu(t);break;case 4:sf(t,t.stateNode.containerInfo);break;case s:tc(t,t.memoizedProps.value);break;case d:La(n,t.childLanes)&&(t.flags|=4);var a=t.stateNode;a.effectDuration=0,a.passiveEffectDuration=0;break;case h:if(null!==t.memoizedState){if(La(n,t.child.childLanes))return Hp(e,t,n);yf(t,vf(mf.current));var o=im(e,t,n);return null!==o?o.sibling:null}yf(t,vf(mf.current));break;case w:var i=0!=(e.flags&dr),u=La(n,t.childLanes);if(i){if(u)return Jp(e,t,n);t.flags|=dr}var c=t.memoizedState;if(null!==c&&(c.rendering=null,c.tail=null,c.lastEffect=null),yf(t,mf.current),u)break;return null;case x:case S:return t.lanes=0,_p(e,t,n)}return im(e,t,n)}Cp=0!=(e.flags&wr)}else Cp=!1;switch(t.lanes=0,t.tag){case 2:return function(e,t,n,r){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var a,o,i=t.pendingProps;if(a=Uu(t,Au(0,n,!1)),ac(t,r),n.prototype&&"function"==typeof n.prototype.render){var u=Ve(n)||"Unknown";vp[u]||(l("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",u,u),vp[u]=!0)}if(1&t.mode&&Os.recordLegacyContextWarning(t,null),Xe(!0),Sp.current=t,o=ad(null,t,n,i,a,r),Xe(!1),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){var s=Ve(n)||"Unknown";gp[s]||(l("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",s,s,s),gp[s]=!0)}if("object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){var c=Ve(n)||"Unknown";gp[c]||(l("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",c,c,c),gp[c]=!0),t.tag=1,t.memoizedState=null,t.updateQueue=null;var f=!1;Bu(n)?(f=!0,qu(t)):f=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,cc(t);var d=n.getDerivedStateFromProps;return"function"==typeof d&&Mc(t,n,d,i),Vc(t,o),Yc(t,n,i,r),Mp(null,t,n,!0,f,r)}if(t.tag=0,1&t.mode){Pe();try{o=ad(null,t,n,i,a,r)}finally{_e()}}return Tp(null,t,o,r),jp(t,n),t.child}(e,t,t.type,n);case 16:return Ap(e,t,t.elementType,r,n);case 0:var p=t.type,m=t.pendingProps;return Op(e,t,p,t.elementType===p?m:Hs(p,m),n);case 1:var v=t.type,C=t.pendingProps;return Lp(e,t,v,t.elementType===v?C:Hs(v,C),n);case 3:return zp(e,t,n);case 5:return function(e,t,n){df(t),null===e&&Rf(t);var r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children;return $l(r,a)?i=null:null!==o&&$l(r,o)&&(t.flags|=16),Ip(e,t),Tp(e,t,i,n),t.child}(e,t,n);case 6:return function(e,t){return null===e&&Rf(t),null}(e,t);case h:return Hp(e,t,n);case 4:return function(e,t,n){sf(t,t.stateNode.containerInfo);var r=t.pendingProps;return null===e?t.child=Zc(t,null,r,n):Tp(e,t,r,n),t.child}(e,t,n);case f:var T=t.type,N=t.pendingProps;return Np(e,t,T,t.elementType===T?N:Hs(T,N),n);case 7:return function(e,t,n){return Tp(e,t,t.pendingProps,n),t.child}(e,t,n);case 8:return function(e,t,n){return Tp(e,t,t.pendingProps.children,n),t.child}(e,t,n);case d:return function(e,t,n){t.flags|=4;var r=t.stateNode;return r.effectDuration=0,r.passiveEffectDuration=0,Tp(e,t,t.pendingProps.children,n),t.child}(e,t,n);case s:return em(e,t,n);case 9:return function(e,t,n){var r=t.type;void 0===r._context?r!==r.Consumer&&(am||(am=!0,l("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))):r=r._context;var a=t.pendingProps,o=a.children;"function"!=typeof o&&l("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),ac(t,n);var i,u=oc(r,a.unstable_observedBits);return Sp.current=t,Xe(!0),i=o(u),Xe(!1),t.flags|=1,Tp(e,t,i,n),t.child}(e,t,n);case g:var R=t.type,P=Hs(R,t.pendingProps);if(t.type!==t.elementType){var _=R.propTypes;_&&Tu(_,P,"prop",Ve(R))}return Rp(e,t,R,P=Hs(R.type,P),r,n);case y:return Pp(e,t,t.type,t.pendingProps,r,n);case b:var D=t.type,I=t.pendingProps;return function(e,t,n,r,a){var o;return null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Bu(n)?(o=!0,qu(t)):o=!1,ac(t,a),Hc(t,n,r),Yc(t,n,r,a),Mp(null,t,n,!0,o,a)}(e,t,D,t.elementType===D?I:Hs(D,I),n);case w:return Jp(e,t,n);case k:case 21:case E:break;case x:return _p(e,t,n);case S:return Dp(e,t,n)}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function um(e){e.flags|=4}function sm(e){e.flags|=pr}function cm(e,t){if(!Lf())switch(e.tailMode){case"hidden":for(var n=e.tail,r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":for(var a=e.tail,o=null;null!==a;)null!==a.alternate&&(o=a),a=a.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function fm(e,t,n){var r,a,o,i=t.pendingProps;switch(t.tag){case 2:case 16:case y:case 0:case f:case 7:case 8:case d:case 9:case g:return null;case 1:return Bu(t.type)&&Vu(t),null;case 3:cf(t),Hu(t),zf();var l=t.stateNode;if(l.pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null===e||null===e.child)If(t)?um(t):l.hydrate||(t.flags|=mr);return null;case 5:pf(t);var u=uf(),c=t.type;if(null!==e&&null!=t.stateNode)nm(e,t,c,i),e.ref!==t.ref&&sm(t);else{if(!i){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return null}var p=ff();if(If(t))a=p,o=ou((r=t).stateNode,r.type,r.memoizedProps,0,a,r),r.updateQueue=o,null!==o&&um(t);else{var m=Hl(c,i,u,p,t);tm(m,t),t.stateNode=m,function(e,t,n,r,a){return El(e,t,n),Bl(t,n)}(m,c,i)&&um(t)}null!==t.ref&&sm(t)}return null;case 6:var v=i;if(e&&null!=t.stateNode){var C=e.memoizedProps;rm(0,t,C,v)}else{if("string"!=typeof v&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");var T=uf(),N=ff();If(t)?Pf(t)&&um(t):t.stateNode=Yl(v,T,N,t)}return null;case h:bf(t);var R=t.memoizedState;if(0!=(t.flags&dr))return t.lanes=n,0!=(8&t.mode)&&hp(t),t;var P=null!==R,_=!1;if(null===e)void 0!==t.memoizedProps.fallback&&If(t);else _=null!==e.memoizedState;if(P&&!_)if(0!=(2&t.mode))null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||hf(mf.current,1)?0===ah&&(ah=3):function(){0!==ah&&3!==ah||(ah=4);null!==Zm&&(Pa(lh)||Pa(uh))&&Vh(Zm,th)}();return(P||_)&&(t.flags|=4),null;case 4:return cf(t),null===e&&Vi(t.stateNode.containerInfo),null;case s:return nc(t),null;case b:return Bu(t.type)&&Vu(t),null;case w:bf(t);var D=t.memoizedState;if(null===D)return null;var I=0!=(t.flags&dr),O=D.rendering;if(null===O)if(I)cm(D,!1);else{if(!(0===ah&&(null===e||0==(e.flags&dr))))for(var L=t.child;null!==L;){var M=kf(L);if(null!==M){I=!0,t.flags|=dr,cm(D,!1);var F=M.updateQueue;return null!==F&&(t.updateQueue=F,t.flags|=4),null===D.lastEffect&&(t.firstEffect=null),t.lastEffect=D.lastEffect,tf(t,n),yf(t,gf(mf.current,2)),t.child}L=L.sibling}null!==D.tail&&xs()>mh()&&(t.flags|=dr,I=!0,cm(D,!1),t.lanes=ga,zv(ga))}else{if(!I){var z=kf(O);if(null!==z){t.flags|=dr,I=!0;var A=z.updateQueue;if(null!==A&&(t.updateQueue=A,t.flags|=4),cm(D,!0),null===D.tail&&"hidden"===D.tailMode&&!O.alternate&&!Lf()){var j=t.lastEffect=D.lastEffect;return null!==j&&(j.nextEffect=null),null}}else 2*xs()-D.renderingStartTime>mh()&&n!==Ea&&(t.flags|=dr,I=!0,cm(D,!1),t.lanes=ga,zv(ga))}if(D.isBackwards)O.sibling=t.child,t.child=O;else{var U=D.last;null!==U?U.sibling=O:t.child=O,D.last=O}}if(null!==D.tail){var W=D.tail;D.rendering=W,D.tail=W.sibling,D.lastEffect=t.lastEffect,D.renderingStartTime=xs(),W.sibling=null;var B=mf.current;return yf(t,B=I?gf(B,2):vf(B)),W}return null;case k:case 21:case E:break;case x:case S:if(Kh(t),null!==e){var V=t.memoizedState;null!==e.memoizedState!==(null!==V)&&"unstable-defer-without-hiding"!==i.mode&&(t.flags|=4)}return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function dm(e,t){switch(e.tag){case 1:Bu(e.type)&&Vu(e);var n=e.flags;return n&br?(e.flags=-4097&n|dr,0!=(8&e.mode)&&hp(e),e):null;case 3:cf(e),Hu(e),zf();var r=e.flags;if(0!=(r&dr))throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");return e.flags=-4097&r|dr,e;case 5:return pf(e),null;case h:bf(e);var a=e.flags;return a&br?(e.flags=-4097&a|dr,0!=(8&e.mode)&&hp(e),e):null;case w:return bf(e),null;case 4:return cf(e),null;case s:return nc(e),null;case x:case S:return Kh(e),null;default:return null}}function pm(e){switch(e.tag){case 1:var t=e.type.childContextTypes;null!=t&&Vu(e);break;case 3:cf(e),Hu(e),zf();break;case 5:pf(e);break;case 4:cf(e);break;case h:case w:bf(e);break;case s:nc(e);break;case x:case S:Kh(e)}}function mm(e,t){return{value:e,source:t,stack:We(t)}}function hm(e,t){try{0;var n=t.value,r=t.source,a=t.stack,o=null!==a?a:"";if(null!=n&&n._suppressLogging){if(1===e.tag)return;console.error(n)}var i=r?Ve(r.type):null,l=i?"The above error occurred in the <"+i+"> component:":"The above error occurred in one of your React components:",u=Ve(e.type),s=l+"\n"+o+"\n\n"+(u?"React will try to recreate this component tree from scratch using the error boundary you provided, "+u+".":"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.");console.error(s)}catch(e){setTimeout((function(){throw e}))}}tm=function(e,t,n,r){for(var a,o,i=t.child;null!==i;){if(5===i.tag||6===i.tag)a=e,o=i.stateNode,a.appendChild(o);else if(4===i.tag);else if(null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},nm=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var i=function(e,t,n,r,a,o){var i=o;if(typeof r.children!=typeof n.children&&("string"==typeof r.children||"number"==typeof r.children)){var l=""+r.children,u=Dl(i.ancestorInfo,t);_l(null,l,u)}return xl(e,t,n,r)}(t.stateNode,n,o,r,0,ff());t.updateQueue=i,i&&um(t)}},rm=function(e,t,n,r){n!==r&&um(t)};var vm="function"==typeof WeakMap?WeakMap:Map;function gm(e,t,n){var r=dc(xa,n);r.tag=3,r.payload={element:null};var a=t.value;return r.callback=function(){wv(a),hm(e,t)},r}function ym(e,t,n){var r=dc(xa,n);r.tag=3;var a=e.type.getDerivedStateFromError;if("function"==typeof a){var o=t.value;r.payload=function(){return hm(e,t),a(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch?r.callback=function(){var n;Xv(e),"function"!=typeof a&&(n=this,null===yh?yh=new Set([n]):yh.add(n),hm(e,t));var r=t.value,o=t.stack;this.componentDidCatch(r,{componentStack:null!==o?o:""}),"function"!=typeof a&&(La(e.lanes,1)||l("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",Ve(e.type)||"Unknown"))}:r.callback=function(){Xv(e)},r}function bm(e,t,n){var r,a=e.pingCache;if(null===a?(a=e.pingCache=new vm,r=new Set,a.set(t,r)):void 0===(r=a.get(t))&&(r=new Set,a.set(t,r)),!r.has(n)){r.add(n);var o=xv.bind(null,e,t,n);t.then(o,o)}}function wm(e,t,n,r,a){if(n.flags|=yr,n.firstEffect=n.lastEffect=null,null!==r&&"object"==typeof r&&"function"==typeof r.then){var o=r;if(0==(2&n.mode)){var i=n.alternate;i?(n.updateQueue=i.updateQueue,n.memoizedState=i.memoizedState,n.lanes=i.lanes):(n.updateQueue=null,n.memoizedState=null)}var l=hf(mf.current,1),u=t;do{if(u.tag===h&&wf(u,l)){var s=u.updateQueue;if(null===s){var c=new Set;c.add(o),u.updateQueue=c}else s.add(o);if(0==(2&u.mode)){if(u.flags|=dr,n.flags|=wr,n.flags&=-2981,1===n.tag)if(null===n.alternate)n.tag=b;else{var f=dc(xa,1);f.tag=uc,pc(n,f)}return void(n.lanes=Fa(n.lanes,1))}return bm(e,o,a),u.flags|=br,void(u.lanes=a)}u=u.return}while(null!==u);r=new Error((Ve(n.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==ah&&(ah=2),r=mm(r,n);var d=t;do{switch(d.tag){case 3:var p=r;d.flags|=br;var m=Ia(a);return d.lanes=Fa(d.lanes,m),void mc(d,gm(d,p,m));case 1:var v=r,g=d.type,y=d.stateNode;if(0==(d.flags&dr)&&("function"==typeof g.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&!bv(y))){d.flags|=br;var w=Ia(a);return d.lanes=Fa(d.lanes,w),void mc(d,ym(d,v,w))}}d=d.return}while(null!==d)}var km;km=new Set;var Em="function"==typeof WeakSet?WeakSet:Set,xm=function(e,t){t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()};function Sm(e){var t=e.ref;null!==t&&("function"==typeof t?(ar(null,t,null,null),or()&&Ev(e,ir())):t.current=null)}function Cm(e,t){(ar(null,t,null),or())&&Ev(e,ir())}function Tm(e,t){switch(t.tag){case 0:case f:case y:case E:return;case 1:if(t.flags&mr&&null!==e){var n=e.memoizedProps,r=e.memoizedState,a=t.stateNode;t.type!==t.elementType||kp||(a.props!==t.memoizedProps&&l("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Ve(t.type)||"instance"),a.state!==t.memoizedState&&l("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Ve(t.type)||"instance"));var o=a.getSnapshotBeforeUpdate(t.elementType===t.type?n:Hs(t.type,n),r),i=km;void 0!==o||i.has(t.type)||(i.add(t.type),l("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",Ve(t.type))),a.__reactInternalSnapshotBeforeUpdate=o}return;case 3:if(t.flags&mr)eu(t.stateNode.containerInfo);return;case 5:case 6:case 4:case b:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function Nm(e,t,n,r){switch(n.tag){case 0:case f:case y:case E:return function(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next,o=a;do{if((o.tag&e)===e){var i=o.create;o.destroy=i();var u=o.destroy;void 0!==u&&"function"!=typeof u&&l("An effect function must not return anything besides a function, which is used for clean-up.%s",null===u?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof u.then?"\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching":" You returned: "+u)}o=o.next}while(o!==a)}}(3,n),void function(e){var t=e.updateQueue,n=null!==t?t.lastEffect:null;if(null!==n){var r=n.next,a=r;do{var o=a,i=o.next,l=o.tag;0!=(4&l)&&0!=(1&l)&&(vv(e,a),hv(e,a)),a=i}while(a!==r)}}(n);case 1:var a=n.stateNode;if(4&n.flags)if(null===t)n.type!==n.elementType||kp||(a.props!==n.memoizedProps&&l("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Ve(n.type)||"instance"),a.state!==n.memoizedState&&l("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Ve(n.type)||"instance")),a.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:Hs(n.type,t.memoizedProps),i=t.memoizedState;n.type!==n.elementType||kp||(a.props!==n.memoizedProps&&l("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Ve(n.type)||"instance"),a.state!==n.memoizedState&&l("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Ve(n.type)||"instance")),a.componentDidUpdate(o,i,a.__reactInternalSnapshotBeforeUpdate)}var u=n.updateQueue;return void(null!==u&&(n.type!==n.elementType||kp||(a.props!==n.memoizedProps&&l("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Ve(n.type)||"instance"),a.state!==n.memoizedState&&l("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Ve(n.type)||"instance")),wc(0,u,a)));case 3:var s=n.updateQueue;if(null!==s){var c=null;if(null!==n.child)switch(n.child.tag){case 5:case 1:c=n.child.stateNode}wc(0,s,c)}return;case 5:var p=n.stateNode;if(null===t&&4&n.flags)!function(e,t,n,r){Bl(t,n)&&e.focus()}(p,n.type,n.memoizedProps);return;case 6:case 4:return;case d:var m=n.memoizedProps;m.onCommit;var v=m.onRender;n.stateNode.effectDuration;var g=cp();return void("function"==typeof v&&v(n.memoizedProps.id,null===t?"mount":"update",n.actualDuration,n.treeBaseDuration,n.actualStartTime,g,e.memoizedInteractions));case h:return void function(e,t){if(null===t.memoizedState){var n=t.alternate;if(null!==n){var r=n.memoizedState;if(null!==r){var a=r.dehydrated;null!==a&&function(e){Qr(e)}(a)}}}}(0,n);case w:case b:case k:case 21:case x:case S:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function Rm(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?Xl(r):Jl(n.stateNode,n.memoizedProps)}else if(6===n.tag){var a=n.stateNode;t?a.nodeValue="":Zl(a,n.memoizedProps)}else if(n.tag!==x&&n.tag!==S||null===n.memoizedState||n===e){if(null!==n.child){n.child.return=n,n=n.child;continue}}else;if(n===e)return;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Pm(e){var t=e.ref;if(null!==t){var n,r=e.stateNode;e.tag,n=r,"function"==typeof t?t(n):(t.hasOwnProperty("current")||l("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",Ve(e.type)),t.current=n)}}function _m(e){var t=e.ref;null!==t&&("function"==typeof t?t(null):t.current=null)}function Dm(e,t,n){switch(function(e){if(Xu&&"function"==typeof Xu.onCommitFiberUnmount)try{Xu.onCommitFiberUnmount(Gu,e)}catch(e){Ju||(Ju=!0,l("React instrumentation encountered an error: %s",e))}}(t),t.tag){case 0:case f:case g:case y:case E:var r=t.updateQueue;if(null!==r){var a=r.lastEffect;if(null!==a){var o=a.next,i=o;do{var u=i,s=u.destroy,c=u.tag;void 0!==s&&(0!=(4&c)?vv(t,i):Cm(t,s)),i=i.next}while(i!==o)}}return;case 1:Sm(t);var d=t.stateNode;return void("function"==typeof d.componentWillUnmount&&function(e,t){ar(null,xm,null,e,t),or()&&Ev(e,ir())}(t,d));case 5:return void Sm(t);case 4:return void Am(e,t);case k:case 18:case 21:return}}function Im(e,t,n){for(var r=t;;)if(Dm(e,r),null===r.child||4===r.tag){if(r===t)return;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}else r.child.return=r,r=r.child}function Om(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null,e._debugOwner=null}function Lm(e){return 5===e.tag||3===e.tag||4===e.tag}function Mm(e){var t,n,r=function(e){for(var t=e.return;null!==t;){if(Lm(t))return t;t=t.return}throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e),a=r.stateNode;switch(r.tag){case 5:t=a,n=!1;break;case 3:case 4:t=a.containerInfo,n=!0;break;default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}16&r.flags&&(Kl(t),r.flags&=-17);var o=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||Lm(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue e;if(null===t.child||4===t.tag)continue e;t.child.return=t,t=t.child}if(!(2&t.flags))return t.stateNode}}(e);n?Fm(e,o,t):zm(e,o,t)}function Fm(e,t,n){var r=e.tag,a=5===r||6===r;if(a){var o=a?e.stateNode:e.stateNode.instance;t?function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)}(n,o,t):function(e,t){var n;8===e.nodeType?(n=e.parentNode).insertBefore(t,e):(n=e).appendChild(t),null==e._reactRootContainer&&null===n.onclick&&kl(n)}(n,o)}else if(4===r);else{var i=e.child;if(null!==i){Fm(i,t,n);for(var l=i.sibling;null!==l;)Fm(l,t,n),l=l.sibling}}}function zm(e,t,n){var r=e.tag,a=5===r||6===r;if(a){var o=a?e.stateNode:e.stateNode.instance;t?function(e,t,n){e.insertBefore(t,n)}(n,o,t):function(e,t){e.appendChild(t)}(n,o)}else if(4===r);else{var i=e.child;if(null!==i){zm(i,t,n);for(var l=i.sibling;null!==l;)zm(l,t,n),l=l.sibling}}}function Am(e,t,n){for(var r,a,o,i,l=t,u=!1;;){if(!u){var s=l.return;e:for(;;){if(null===s)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");var c=s.stateNode;switch(s.tag){case 5:r=c,a=!1;break e;case 3:case 4:r=c.containerInfo,a=!0;break e}s=s.return}u=!0}if(5===l.tag||6===l.tag)Im(e,l),a?(o=r,i=l.stateNode,8===o.nodeType?o.parentNode.removeChild(i):o.removeChild(i)):Gl(r,l.stateNode);else if(4===l.tag){if(null!==l.child){r=l.stateNode.containerInfo,a=!0,l.child.return=l,l=l.child;continue}}else if(Dm(e,l),null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)return;for(;null===l.sibling;){if(null===l.return||l.return===t)return;4===(l=l.return).tag&&(u=!1)}l.sibling.return=l.return,l=l.sibling}}function jm(e,t,n){Am(e,t);var r=t.alternate;Om(t),null!==r&&Om(r)}function Um(e,t){switch(t.tag){case 0:case f:case g:case y:case E:return void function(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next,o=a;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&i()}o=o.next}while(o!==a)}}(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r,o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,a,o){ku(e,a),Sl(e,t,n,r,a)}(n,i,o,a,r)}return;case 6:if(null===t.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var l=t.stateNode,u=t.memoizedProps;null!==e&&e.memoizedProps;return void function(e,t,n){e.nodeValue=n}(l,0,u);case 3:var s=t.stateNode;return void(s.hydrate&&(s.hydrate=!1,Qr(s.containerInfo)));case d:return;case h:return function(e){if(null!==e.memoizedState){fh=xs(),Rm(e.child,!0)}}(t),void Wm(t);case w:return void Wm(t);case b:return;case k:case 21:break;case x:case S:return void Rm(t,null!==t.memoizedState)}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function Wm(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Em),t.forEach((function(t){var r=Sv.bind(null,e,t);n.has(t)||(!0!==t.__reactDoNotTraceInteractions&&(r=a.unstable_wrap(r)),n.add(t),t.then(r,r))}))}}function Bm(e,t){if(null!==e){var n=e.memoizedState;if(null===n||null!==n.dehydrated){var r=t.memoizedState;return null!==r&&null===r.dehydrated}}return!1}function Vm(e){Kl(e.stateNode)}if("function"==typeof Symbol&&Symbol.for){var Hm=Symbol.for;Hm("selector.component"),Hm("selector.has_pseudo_class"),Hm("selector.role"),Hm("selector.test_id"),Hm("selector.text")}var $m=[];var Ym=Math.ceil,qm=o.ReactCurrentDispatcher,Qm=o.ReactCurrentOwner,Km=o.IsSomeRendererActing,Gm=16,Xm=32,Jm=0,Zm=null,eh=null,th=0,nh=0,rh=Du(0),ah=0,oh=null,ih=0,lh=0,uh=0,sh=0,ch=null,fh=0,dh=1/0;function ph(){dh=xs()+500}function mh(){return dh}var hh=null,vh=!1,gh=null,yh=null,bh=!1,wh=null,kh=90,Eh=0,xh=[],Sh=[],Ch=null,Th=0,Nh=null,Rh=0,Ph=null,_h=xa,Dh=0,Ih=0,Oh=!1,Lh=null,Mh=!1;function Fh(){return 0!=(48&Jm)?xs():_h!==xa?_h:_h=xs()}function zh(e){var t=e.mode;if(0==(2&t))return 1;if(0==(4&t))return Ss()===ms?1:2;if(0===Dh&&(Dh=ih),0!==Is.transition)return 0!==Ih&&(Ih=null!==ch?ch.pendingLanes:0),function(e,t){var n=Ia(ha&~t);return 0===n&&0===(n=Ia(ha&~e))&&(n=Ia(ha)),n}(Dh,Ih);var n,r=Ss();0!=(4&Jm)&&r===hs?n=Da(12,Dh):n=Da(function(e){switch(e){case 99:return da;case 98:return pa;case 97:case 96:return 8;case 95:return 2;default:return 0}}(r),Dh);return n}function Ah(e){var t,n=e.mode;return 0==(2&n)?1:0==(4&n)?Ss()===ms?1:2:(0===Dh&&(Dh=ih),0===(t=Ia(va&~Dh))&&(t=Ia(va)),t)}function jh(e,t,n){!function(){if(Th>50)throw Th=0,Nh=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");Rh>50&&(Rh=0,l("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."))}(),function(e){if(Ye&&0!=(Jm&Gm)&&!$d)switch(e.tag){case 0:case f:case y:var t=eh&&Ve(eh.type)||"Unknown",n=t;if(!Pv.has(n))Pv.add(n),l("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render",Ve(e.type)||"Unknown",t,t);break;case 1:_v||(l("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),_v=!0)}}(e);var r=Uh(e,t);if(null===r)return function(e){var t=e.tag;if(3!==t&&1!==t&&0!==t&&t!==f&&t!==g&&t!==y&&t!==E)return;if(0!=(e.flags&vr))return;var n=Ve(e.type)||"ReactComponent";if(null!==Rv){if(Rv.has(n))return;Rv.add(n)}else Rv=new Set([n]);if(Oh);else{var r=$e;try{Ge(e),l("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.",1===t?"the componentWillUnmount method":"a useEffect cleanup function")}finally{r?Ge(e):Ke()}}}(e),null;ja(r,t,n),r===Zm&&(uh=Fa(uh,t),4===ah&&Vh(r,th));var a=Ss();1===t?0!=(8&Jm)&&0==(48&Jm)?(jv(r,t),Hh(r)):(Wh(r,n),jv(r,t),0===Jm&&(ph(),Ps())):(0==(4&Jm)||a!==hs&&a!==ms||(null===Ch?Ch=new Set([r]):Ch.add(r)),Wh(r,n),jv(r,t)),ch=r}function Uh(e,t){e.lanes=Fa(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=Fa(n.lanes,t)),null===n&&0!=(1026&e.flags)&&Tv(e);for(var r=e,a=e.return;null!==a;)a.childLanes=Fa(a.childLanes,t),null!==(n=a.alternate)?n.childLanes=Fa(n.childLanes,t):0!=(1026&a.flags)&&Tv(e),r=a,a=a.return;return 3===r.tag?r.stateNode:null}function Wh(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.pendingLanes,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,i=n;i>0;){var l=Oa(i),u=1<<l,s=o[l];s===xa?0!=(u&r)&&0==(u&a)||(o[l]=Na(u,t)):s<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=Ta(e,e===Zm?th:0),a=Sa;if(0!==r){if(null!==n){if(e.callbackPriority===a)return;Rs(n)}var o,i;if(a===da)i=Hh.bind(null,e),null===bs?(bs=[i],ws=ns(us,_s)):bs.push(i),o=ps;else if(14===a)o=Ns(ms,Hh.bind(null,e));else{o=Ns(function(e){switch(e){case da:case 14:return 99;case 13:case 12:case 11:case pa:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error("Invalid update priority: "+e+". This is a bug in React.")}}(a),Bh.bind(null,e))}e.callbackPriority=a,e.callbackNode=o}else null!==n&&(Rs(n),e.callbackNode=null,e.callbackPriority=0)}function Bh(e){if(_h=xa,Dh=0,Ih=0,0!=(48&Jm))throw Error("Should not already be working.");var t=e.callbackNode;if(mv()&&e.callbackNode!==t)return null;var n=Ta(e,e===Zm?th:0);if(0===n)return null;var r=function(e,t){var n=Jm;Jm|=Gm;var r=Jh();Zm===e&&th===t||(ph(),Gh(e,t),Uv(e,t));var a=ev(e);for(;;)try{ov();break}catch(t){Xh(e,t)}return Js(),tv(a),Zh(r),Jm=n,null!==eh?0:(Zm=null,th=0,ah)}(e,n);if(La(ih,uh))Gh(e,0);else if(0!==r){if(2===r&&(Jm|=64,e.hydrate&&(e.hydrate=!1,eu(e.containerInfo)),0!==(n=Ra(e))&&(r=rv(e,n))),1===r){var a=oh;throw Gh(e,0),Vh(e,n),Wh(e,xs()),a}var o=e.current.alternate;e.finishedWork=o,e.finishedLanes=n,function(e,t,n){switch(t){case 0:case 1:throw Error("Root did not complete. This is a bug in React.");case 2:case 5:sv(e);break;case 3:if(Vh(e,n),_a(n)&&!(Bv>0)){var r=fh+500-xs();if(r>10){if(0!==Ta(e,0))break;var a=e.suspendedLanes;if(!Ma(a,n)){Fh(),Ua(e,a);break}e.timeoutHandle=ql(sv.bind(null,e),r);break}}sv(e);break;case 4:if(Vh(e,n),function(e){return(e&ha)===e}(n))break;var o=function(e,t){for(var n=e.eventTimes,r=xa;t>0;){var a=Oa(t),o=1<<a,i=n[a];i>r&&(r=i),t&=~o}return r}(e,n),i=o,l=xs()-i,u=((s=l)<120?120:s<480?480:s<1080?1080:s<1920?1920:s<3e3?3e3:s<4320?4320:1960*Ym(s/1960))-l;if(u>10){e.timeoutHandle=ql(sv.bind(null,e),u);break}sv(e);break;default:throw Error("Unknown root exit status.")}var s}(e,r,n)}return Wh(e,xs()),e.callbackNode===t?Bh.bind(null,e):null}function Vh(e,t){t=za(t,sh),function(e,t){e.suspendedLanes|=t,e.pingedLanes&=~t;for(var n=e.expirationTimes,r=t;r>0;){var a=Oa(r),o=1<<a;n[a]=xa,r&=~o}}(e,t=za(t,uh))}function Hh(e){if(0!=(48&Jm))throw Error("Should not already be working.");var t,n;if(mv(),e===Zm&&La(e.expiredLanes,th)?(n=rv(e,t=th),La(ih,uh)&&(n=rv(e,t=Ta(e,t)))):n=rv(e,t=Ta(e,0)),0!==e.tag&&2===n&&(Jm|=64,e.hydrate&&(e.hydrate=!1,eu(e.containerInfo)),0!==(t=Ra(e))&&(n=rv(e,t))),1===n){var r=oh;throw Gh(e,0),Vh(e,t),Wh(e,xs()),r}var a=e.current.alternate;return e.finishedWork=a,e.finishedLanes=t,sv(e),Wh(e,xs()),null}function $h(e,t){var n=Jm;Jm|=1;try{return e(t)}finally{0===(Jm=n)&&(ph(),Ps())}}function Yh(e,t){var n=Jm;Jm&=-2,Jm|=8;try{return e(t)}finally{0===(Jm=n)&&(ph(),Ps())}}function qh(e,t){var n=Jm;if(0!=(48&n))return l("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."),e(t);Jm|=1;try{return e?Ts(ms,e.bind(null,t)):void 0}finally{Jm=n,Ps()}}function Qh(e,t){Ou(rh,nh,e),nh=Fa(nh,t),ih=Fa(ih,t)}function Kh(e){nh=rh.current,Iu(rh,e)}function Gh(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ql(n)),null!==eh)for(var r=eh.return;null!==r;)pm(r),r=r.return;Zm=e,eh=fg(e.current,null),th=nh=ih=t,ah=0,oh=null,lh=0,uh=0,sh=0,Ph=null,Os.discardPendingWarnings()}function Xh(e,t){for(;;){var n=eh;try{if(Js(),id(),Ke(),Qm.current=null,null===n||null===n.return)return ah=1,oh=t,void(eh=null);8&n.mode&&mp(n,!0),wm(e,n.return,n,t,th),lv(n)}catch(e){t=e,eh===n&&null!==n?(n=n.return,eh=n):n=eh;continue}return}}function Jh(){var e=qm.current;return qm.current=Xd,null===e?Xd:e}function Zh(e){qm.current=e}function ev(e){var t=a.__interactionsRef.current;return a.__interactionsRef.current=e.memoizedInteractions,t}function tv(e){a.__interactionsRef.current=e}function nv(e){lh=Fa(e,lh)}function rv(e,t){var n=Jm;Jm|=Gm;var r=Jh();Zm===e&&th===t||(Gh(e,t),Uv(e,t));for(var a=ev(e);;)try{av();break}catch(t){Xh(e,t)}if(Js(),tv(a),Jm=n,Zh(r),null!==eh)throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");return Zm=null,th=0,ah}function av(){for(;null!==eh;)iv(eh)}function ov(){for(;null!==eh&&!gs();)iv(eh)}function iv(e){var t,n=e.alternate;Ge(e),0!=(8&e.mode)?(dp(e),t=Nv(n,e,nh),mp(e,!0)):t=Nv(n,e,nh),Ke(),e.memoizedProps=e.pendingProps,null===t?lv(e):eh=t,Qm.current=null}function lv(e){var t=e;do{var n=t.alternate,r=t.return;if(0==(t.flags&yr)){Ge(t);var a=void 0;if(0==(8&t.mode)?a=fm(n,t,nh):(dp(t),a=fm(n,t,nh),mp(t,!1)),Ke(),null!==a)return void(eh=a);if(uv(t),null!==r&&0==(r.flags&yr))null===r.firstEffect&&(r.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=t.firstEffect),r.lastEffect=t.lastEffect),t.flags>1&&(null!==r.lastEffect?r.lastEffect.nextEffect=t:r.firstEffect=t,r.lastEffect=t)}else{var o=dm(t);if(null!==o)return o.flags&=2047,void(eh=o);if(0!=(8&t.mode)){mp(t,!1);for(var i=t.actualDuration,l=t.child;null!==l;)i+=l.actualDuration,l=l.sibling;t.actualDuration=i}null!==r&&(r.firstEffect=r.lastEffect=null,r.flags|=yr)}var u=t.sibling;if(null!==u)return void(eh=u);eh=t=r}while(null!==t);0===ah&&(ah=5)}function uv(e){if(e.tag!==S&&e.tag!==x||null===e.memoizedState||La(nh,Ea)||0==(4&e.mode)){var t=0;if(0!=(8&e.mode)){for(var n=e.actualDuration,r=e.selfBaseDuration,a=null===e.alternate||e.child!==e.alternate.child,o=e.child;null!==o;)t=Fa(t,Fa(o.lanes,o.childLanes)),a&&(n+=o.actualDuration),r+=o.treeBaseDuration,o=o.sibling;if(e.tag===h&&null!==e.memoizedState){var i=e.child;null!==i&&(r-=i.treeBaseDuration)}e.actualDuration=n,e.treeBaseDuration=r}else for(var l=e.child;null!==l;)t=Fa(t,Fa(l.lanes,l.childLanes)),l=l.sibling;e.childLanes=t}}function sv(e){var t=Ss();return Ts(ms,cv.bind(null,e,t)),null}function cv(e,t){do{mv()}while(null!==wh);if(Os.flushLegacyContextWarning(),Os.flushPendingUnsafeLifecycleWarnings(),0!=(48&Jm))throw Error("Should not already be working.");var n=e.finishedWork,r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");e.callbackNode=null;var a,o=Fa(n.lanes,n.childLanes);if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t;for(var r=e.entanglements,a=e.eventTimes,o=e.expirationTimes,i=n;i>0;){var l=Oa(i),u=1<<l;r[l]=0,a[l]=xa,o[l]=xa,i&=~u}}(e,o),null!==Ch&&!function(e){return 0!=(24&e)}(o)&&Ch.has(e)&&Ch.delete(e),e===Zm&&(Zm=null,eh=null,th=0),n.flags>1?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var i=Jm;Jm|=Xm;var l=ev(e);Qm.current=null,Lh=Vl(e.containerInfo),Mh=!1,hh=a;do{if(ar(null,fv,null),or()){if(null===hh)throw Error("Should be working on an effect.");var u=ir();Ev(hh,u),hh=hh.nextEffect}}while(null!==hh);Lh=null,fp(),hh=a;do{if(ar(null,dv,null,e,t),or()){if(null===hh)throw Error("Should be working on an effect.");var s=ir();Ev(hh,s),hh=hh.nextEffect}}while(null!==hh);e.containerInfo,Ti(Wl),Qa(Ul),Ul=null,Wl=null,e.current=n,hh=a;do{if(ar(null,pv,null,e,r),or()){if(null===hh)throw Error("Should be working on an effect.");var c=ir();Ev(hh,c),hh=hh.nextEffect}}while(null!==hh);hh=null,ys(),tv(l),Jm=i}else e.current=n,fp();var f=bh;if(bh)bh=!1,wh=e,Eh=r,kh=t;else for(hh=a;null!==hh;){var d=hh.nextEffect;hh.nextEffect=null,8&hh.flags&&Vv(hh),hh=d}if(0!==(o=e.pendingLanes)){if(null!==Ph){var p=Ph;Ph=null;for(var m=0;m<p.length;m++)Av(e,p[m],e.memoizedInteractions)}jv(e,o)}else yh=null;if(f||Wv(e,r),1===o?e===Nh?Th++:(Th=0,Nh=e):Th=0,es(n.stateNode,t),$m.forEach((function(e){return e()})),Wh(e,xs()),vh){vh=!1;var h=gh;throw gh=null,h}return 0!=(8&Jm)||Ps(),null}function fv(){for(;null!==hh;){var e=hh.alternate;Mh||null===Lh||(0!=(8&hh.flags)?Rr(hh,Lh)&&(Mh=!0):hh.tag===h&&Bm(e,hh)&&Rr(hh,Lh)&&(Mh=!0));var t=hh.flags;0!=(t&mr)&&(Ge(hh),Tm(e,hh),Ke()),0!=(t&hr)&&(bh||(bh=!0,Ns(vs,(function(){return mv(),null})))),hh=hh.nextEffect}}function dv(e,t){for(;null!==hh;){Ge(hh);var n=hh.flags;if(16&n&&Vm(hh),n&pr){var r=hh.alternate;null!==r&&_m(r)}switch(1038&n){case 2:Mm(hh),hh.flags&=-3;break;case 6:Mm(hh),hh.flags&=-3,Um(hh.alternate,hh);break;case gr:hh.flags&=-1025;break;case 1028:hh.flags&=-1025,Um(hh.alternate,hh);break;case 4:Um(hh.alternate,hh);break;case 8:jm(e,hh)}Ke(),hh=hh.nextEffect}}function pv(e,t){for(;null!==hh;){Ge(hh);var n=hh.flags;if(36&n)Nm(e,hh.alternate,hh);n&pr&&Pm(hh),Ke(),hh=hh.nextEffect}}function mv(){if(90!==kh){var e=kh>vs?vs:kh;return kh=90,Ts(e,yv)}return!1}function hv(e,t){xh.push(t,e),bh||(bh=!0,Ns(vs,(function(){return mv(),null})))}function vv(e,t){Sh.push(t,e),e.flags|=vr;var n=e.alternate;null!==n&&(n.flags|=vr),bh||(bh=!0,Ns(vs,(function(){return mv(),null})))}function gv(e){var t=e.create;e.destroy=t()}function yv(){if(null===wh)return!1;var e=wh,t=Eh;if(wh=null,Eh=0,0!=(48&Jm))throw Error("Cannot flush passive effects while already rendering.");Oh=!0;var n=Jm;Jm|=Xm;var r=ev(e),a=Sh;Sh=[];for(var o=0;o<a.length;o+=2){var i=a[o],l=a[o+1],u=i.destroy;i.destroy=void 0,l.flags&=-8193;var s=l.alternate;if(null!==s&&(s.flags&=-8193),"function"==typeof u){if(Ge(l),ar(null,u,null),or()){if(null===l)throw Error("Should be working on an effect.");Ev(l,ir())}Ke()}}var c=xh;xh=[];for(var f=0;f<c.length;f+=2){var d=c[f],p=c[f+1];if(Ge(p),ar(null,gv,null,d),or()){if(null===p)throw Error("Should be working on an effect.");Ev(p,ir())}Ke()}for(var m=e.current.firstEffect;null!==m;){var h=m.nextEffect;m.nextEffect=null,8&m.flags&&Vv(m),m=h}return tv(r),Wv(e,t),Oh=!1,Jm=n,Ps(),Rh=null===wh?0:Rh+1,!0}function bv(e){return null!==yh&&yh.has(e)}var wv=function(e){vh||(vh=!0,gh=e)};function kv(e,t,n){pc(e,gm(e,mm(n,t),1));var r=Fh(),a=Uh(e,1);null!==a&&(ja(a,1,r),Wh(a,r),jv(a,1))}function Ev(e,t){if(3!==e.tag)for(var n=e.return;null!==n;){if(3===n.tag)return void kv(n,e,t);if(1===n.tag){var r=n.type,a=n.stateNode;if("function"==typeof r.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&!bv(a)){var o=mm(t,e);pc(n,ym(n,o,1));var i=Fh(),l=Uh(n,1);if(null!==l)ja(l,1,i),Wh(l,i),jv(l,1);else if("function"==typeof a.componentDidCatch&&!bv(a))try{a.componentDidCatch(t,o)}catch(e){}return}}n=n.return}else kv(e,e,t)}function xv(e,t,n){var r=e.pingCache;null!==r&&r.delete(t);var a=Fh();Ua(e,n),Zm===e&&Ma(th,n)&&(4===ah||3===ah&&_a(th)&&xs()-fh<500?Gh(e,0):sh=Fa(sh,n)),Wh(e,a),jv(e,n)}function Sv(e,t){var n;null!==(n=e.stateNode)&&n.delete(t),function(e,t){0===t&&(t=Ah(e));var n=Fh(),r=Uh(e,t);null!==r&&(ja(r,t,n),Wh(r,n),jv(r,t))}(e,0)}var Cv=null;function Tv(e){if(0==(Jm&Gm)&&6&e.mode){var t=e.tag;if(2===t||3===t||1===t||0===t||t===f||t===g||t===y||t===E){var n=Ve(e.type)||"ReactComponent";if(null!==Cv){if(Cv.has(n))return;Cv.add(n)}else Cv=new Set([n]);var r=$e;try{Ge(e),l("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}finally{r?Ge(e):Ke()}}}}var Nv,Rv=null;Nv=function(e,t,n){var r=bg(null,t);try{return lm(e,t,n)}catch(a){if(null!==a&&"object"==typeof a&&"function"==typeof a.then)throw a;if(Js(),id(),pm(t),bg(t,r),8&t.mode&&dp(t),ar(null,lm,null,e,t,n),or())throw ir();throw a}};var Pv,_v=!1;Pv=new Set;var Dv={current:!1};function Iv(e){if(!0===Km.current&&!0!==Dv.current){var t=$e;try{Ge(e),l("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);")}finally{t?Ge(e):Ke()}}}function Ov(e){0!=(1&e.mode)&&!1===Km.current&&!1===Dv.current&&l("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",Ve(e.type))}var Lv=function(e){if(0===Jm&&!1===Km.current&&!1===Dv.current){var t=$e;try{Ge(e),l("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",Ve(e.type))}finally{t?Ge(e):Ke()}}},Mv=!1;function Fv(e,t){return 1e3*t+e.interactionThreadID}function zv(e){null===Ph?Ph=[e]:Ph.push(e)}function Av(e,t,n){if(n.size>0){var r=e.pendingInteractionMap,o=r.get(t);null!=o?n.forEach((function(e){o.has(e)||e.__count++,o.add(e)})):(r.set(t,new Set(n)),n.forEach((function(e){e.__count++})));var i=a.__subscriberRef.current;if(null!==i){var l=Fv(e,t);i.onWorkScheduled(n,l)}}}function jv(e,t){Av(e,t,a.__interactionsRef.current)}function Uv(e,t){var n=new Set;if(e.pendingInteractionMap.forEach((function(e,r){La(t,r)&&e.forEach((function(e){return n.add(e)}))})),e.memoizedInteractions=n,n.size>0){var r=a.__subscriberRef.current;if(null!==r){var o=Fv(e,t);try{r.onWorkStarted(n,o)}catch(e){Ns(ms,(function(){throw e}))}}}}function Wv(e,t){var n,r=e.pendingLanes;try{if(null!==(n=a.__subscriberRef.current)&&e.memoizedInteractions.size>0){var o=Fv(e,t);n.onWorkStopped(e.memoizedInteractions,o)}}catch(e){Ns(ms,(function(){throw e}))}finally{var i=e.pendingInteractionMap;i.forEach((function(e,t){La(r,t)||(i.delete(t),e.forEach((function(e){if(e.__count--,null!==n&&0===e.__count)try{n.onInteractionScheduledWorkCompleted(e)}catch(e){Ns(ms,(function(){throw e}))}})))}))}}var Bv=0;function Vv(e){e.sibling=null,e.stateNode=null}var Hv=null,$v=null,Yv=function(e){Hv=e};function qv(e){if(null===Hv)return e;var t=Hv(e);return void 0===t?e:t.current}function Qv(e){return qv(e)}function Kv(e){if(null===Hv)return e;var t=Hv(e);if(void 0===t){if(null!=e&&"function"==typeof e.render){var n=qv(e.render);if(e.render!==n){var r={$$typeof:le,render:n};return void 0!==e.displayName&&(r.displayName=e.displayName),r}}return e}return t.current}function Gv(e,t){if(null===Hv)return!1;var n=e.elementType,r=t.type,a=!1,o="object"==typeof r&&null!==r?r.$$typeof:null;switch(e.tag){case 1:"function"==typeof r&&(a=!0);break;case 0:("function"==typeof r||o===fe)&&(a=!0);break;case f:(o===le||o===fe)&&(a=!0);break;case g:case y:(o===ce||o===fe)&&(a=!0);break;default:return!1}if(a){var i=Hv(n);if(void 0!==i&&i===Hv(r))return!0}return!1}function Xv(e){null!==Hv&&"function"==typeof WeakSet&&(null===$v&&($v=new WeakSet),$v.add(e))}var Jv=function(e,t){if(null!==Hv){var n=t.staleFamilies,r=t.updatedFamilies;mv(),qh((function(){eg(e.current,r,n)}))}},Zv=function(e,t){e.context===Lu&&(mv(),qh((function(){Sg(t,e,null,null)})))};function eg(e,t,n){var r=e.alternate,a=e.child,o=e.sibling,i=e.tag,l=e.type,u=null;switch(i){case 0:case y:case 1:u=l;break;case f:u=l.render}if(null===Hv)throw new Error("Expected resolveFamily to be set during hot reload.");var s=!1,c=!1;if(null!==u){var d=Hv(u);void 0!==d&&(n.has(d)?c=!0:t.has(d)&&(1===i?c=!0:s=!0))}null!==$v&&($v.has(e)||null!==r&&$v.has(r))&&(c=!0),c&&(e._debugNeedsRemount=!0),(c||s)&&jh(e,1,xa),null===a||c||eg(a,t,n),null!==o&&eg(o,t,n)}var tg,ng=function(e,t){var n=new Set,r=new Set(t.map((function(e){return e.current})));return rg(e.current,r,n),n};function rg(e,t,n){var r=e.child,a=e.sibling,o=e.tag,i=e.type,l=null;switch(o){case 0:case y:case 1:l=i;break;case f:l=i.render}var u=!1;null!==l&&t.has(l)&&(u=!0),u?function(e,t){if(function(e,t){var n=e,r=!1;for(;;){if(5===n.tag)r=!0,t.add(n.stateNode);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)return r;for(;null===n.sibling;){if(null===n.return||n.return===e)return r;n=n.return}n.sibling.return=n.return,n=n.sibling}return!1}(e,t))return;var n=e;for(;;){switch(n.tag){case 5:return void t.add(n.stateNode);case 4:case 3:return void t.add(n.stateNode.containerInfo)}if(null===n.return)throw new Error("Expected to reach root first.");n=n.return}}(e,n):null!==r&&rg(r,t,n),null!==a&&rg(a,t,n)}tg=!1;try{var ag=Object.preventExtensions({});new Map([[ag,null]]),new Set([ag])}catch(e){tg=!0}var og=1;function ig(e,t,n,r){this.tag=e,this.key=n,this.elementType=null,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.dependencies=null,this.mode=r,this.flags=0,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.lanes=0,this.childLanes=0,this.alternate=null,this.actualDuration=Number.NaN,this.actualStartTime=Number.NaN,this.selfBaseDuration=Number.NaN,this.treeBaseDuration=Number.NaN,this.actualDuration=0,this.actualStartTime=-1,this.selfBaseDuration=0,this.treeBaseDuration=0,this._debugID=og++,this._debugSource=null,this._debugOwner=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,tg||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}var lg,ug,sg=function(e,t,n,r){return new ig(e,t,n,r)};function cg(e){var t=e.prototype;return!(!t||!t.isReactComponent)}function fg(e,t){var n=e.alternate;null===n?((n=sg(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugID=e._debugID,n._debugSource=e._debugSource,n._debugOwner=e._debugOwner,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null,n.actualDuration=0,n.actualStartTime=-1),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue;var r=e.dependencies;switch(n.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 2:case 0:case y:n.type=qv(e.type);break;case 1:n.type=Qv(e.type);break;case f:n.type=Kv(e.type)}return n}function dg(e,t){e.flags&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null;var n=e.alternate;if(null===n)e.childLanes=0,e.lanes=t,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0;else{e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type;var r=n.dependencies;e.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration}return e}function pg(e,t,n,r,a,o){var i=2,u=e;if("function"==typeof e)cg(e)?(i=1,u=Qv(u)):u=qv(u);else if("string"==typeof e)i=5;else e:switch(e){case ne:return hg(n.children,a,o,t);case me:i=8,a|=16;break;case re:i=8,a|=1;break;case ae:return function(e,t,n,r){"string"!=typeof e.id&&l('Profiler must specify an "id" as a prop');var a=sg(d,e,r,8|t);return a.elementType=ae,a.type=ae,a.lanes=n,a.stateNode={effectDuration:0,passiveEffectDuration:0},a}(n,a,o,t);case ue:return function(e,t,n,r){var a=sg(h,e,r,t);return a.type=ue,a.elementType=ue,a.lanes=n,a}(n,a,o,t);case se:return function(e,t,n,r){var a=sg(w,e,r,t);return a.type=se,a.elementType=se,a.lanes=n,a}(n,a,o,t);case he:return vg(n,a,o,t);case ve:return function(e,t,n,r){var a=sg(S,e,r,t);return a.type=ve,a.elementType=ve,a.lanes=n,a}(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:i=s;break e;case ie:i=9;break e;case le:i=f,u=Kv(u);break e;case ce:i=g;break e;case fe:i=16,u=null;break e;case de:i=E;break e}var c="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(c+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var p=r?Ve(r.type):null;throw p&&(c+="\n\nCheck the render method of `"+p+"`."),Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==e?e:typeof e)+"."+c)}var m=sg(i,n,t,a);return m.elementType=e,m.type=u,m.lanes=o,m._debugOwner=r,m}function mg(e,t,n){var r;r=e._owner;var a=pg(e.type,e.key,e.props,r,t,n);return a._debugSource=e._source,a._debugOwner=e._owner,a}function hg(e,t,n,r){var a=sg(7,e,r,t);return a.lanes=n,a}function vg(e,t,n,r){var a=sg(x,e,r,t);return a.type=he,a.elementType=he,a.lanes=n,a}function gg(e,t,n){var r=sg(6,e,null,t);return r.lanes=n,r}function yg(e,t,n){var r=null!==e.children?e.children:[],a=sg(4,r,e.key,t);return a.lanes=n,a.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},a}function bg(e,t){return null===e&&(e=sg(2,null,null,0)),e.tag=t.tag,e.key=t.key,e.elementType=t.elementType,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.dependencies=t.dependencies,e.mode=t.mode,e.flags=t.flags,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.lanes=t.lanes,e.childLanes=t.childLanes,e.alternate=t.alternate,e.actualDuration=t.actualDuration,e.actualStartTime=t.actualStartTime,e.selfBaseDuration=t.selfBaseDuration,e.treeBaseDuration=t.treeBaseDuration,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugNeedsRemount=t._debugNeedsRemount,e._debugHookTypes=t._debugHookTypes,e}function wg(e,t,n){switch(this.tag=t,this.containerInfo=e,this.pendingChildren=null,this.current=null,this.pingCache=null,this.finishedWork=null,this.timeoutHandle=-1,this.context=null,this.pendingContext=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Aa(0),this.expirationTimes=Aa(xa),this.pendingLanes=0,this.suspendedLanes=0,this.pingedLanes=0,this.expiredLanes=0,this.mutableReadLanes=0,this.finishedLanes=0,this.entangledLanes=0,this.entanglements=Aa(0),this.mutableSourceEagerHydrationData=null,this.interactionThreadID=a.unstable_getThreadID(),this.memoizedInteractions=new Set,this.pendingInteractionMap=new Map,t){case 1:this._debugRootType="createBlockingRoot()";break;case 2:this._debugRootType="createRoot()";break;case 0:this._debugRootType="createLegacyRoot()"}}function kg(e,t,n,r){var a=new wg(e,t,n),o=function(e){var t;return t=2===e?7:1===e?3:0,Zu&&(t|=8),sg(3,null,null,t)}(t);return a.current=o,o.stateNode=a,cc(o),a}function Eg(e,t){var n=(0,t._getVersion)(t._source);null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)}function xg(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Sg(e,t,r,a){!function(e,t){if(Xu&&"function"==typeof Xu.onScheduleFiberRoot)try{Xu.onScheduleFiberRoot(Gu,e,t)}catch(e){Ju||(Ju=!0,l("React instrumentation encountered an error: %s",e))}}(t,e);var o,i=t.current,u=Fh();"undefined"!=typeof jest&&(o=i,!1===Mv&&void 0===n.unstable_flushAllWithoutAsserting&&(2&o.mode||4&o.mode)&&(Mv=!0,l("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler")),Iv(i));var s=zh(i),c=function(e){if(!e)return Lu;var t=lr(e),n=Ku(t);if(1===t.tag){var r=t.type;if(Bu(r))return Yu(t,r,n)}return n}(r);null===t.context?t.context=c:t.pendingContext=c,Ye&&null!==$e&&!lg&&(lg=!0,l("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",Ve($e.type)||"Unknown"));var f=dc(u,s);return f.payload={element:e},null!==(a=void 0===a?null:a)&&("function"!=typeof a&&l("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",a),f.callback=a),pc(i,f),jh(i,s,u),s}function Cg(e){var t=e.current;return t.child?(t.child.tag,t.child.stateNode):null}function Tg(e,t){var n,r,a=e.memoizedState;null!==a&&null!==a.dehydrated&&(a.retryLane=(n=a.retryLane,r=t,0!==n&&n<r?n:r))}function Ng(e,t){Tg(e,t);var n=e.alternate;n&&Tg(n,t)}function Rg(e){var t=function(e){var t=Tr(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.tag===k?t.stateNode.instance:t.stateNode}lg=!1,ug={};var Pg=function(e){return!1};var _g,Dg,Ig,Og,Lg,Mg,Fg,zg,Ag=function(e,n,r){var a=n[r],o=Array.isArray(e)?e.slice():t({},e);return r+1===n.length?(Array.isArray(o)?o.splice(a,1):delete o[a],o):(o[a]=Ag(e[a],n,r+1),o)},jg=function(e,t){return Ag(e,t,0)},Ug=function(e,n,r,a){var o=n[a],i=Array.isArray(e)?e.slice():t({},e);a+1===n.length?(i[r[a]]=i[o],Array.isArray(i)?i.splice(o,1):delete i[o]):i[o]=Ug(e[o],n,r,a+1);return i},Wg=function(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void i("copyWithRename() expects paths to be the same except for the deepest key");return Ug(e,t,n,0)}i("copyWithRename() expects paths of the same length")},Bg=function(e,n,r,a){if(r>=n.length)return a;var o=n[r],i=Array.isArray(e)?e.slice():t({},e);return i[o]=Bg(e[o],n,r+1,a),i},Vg=function(e,t,n){return Bg(e,t,0,n)},Hg=function(e,t){for(var n=e.memoizedState;null!==n&&t>0;)n=n.next,t--;return n};function $g(e){var t=Nr(e);return null===t?null:t.stateNode}function Yg(e){return null}function qg(){return $e}function Qg(e,t,n){this._internalRoot=function(e,t,n){var r=null!=n&&!0===n.hydrate;null!=n&&n.hydrationOptions;var a=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null,o=function(e,t,n,r){return kg(e,t,n)}(e,t,r);if(function(e,t){t[du]=e}(o.current,e),e.nodeType,Vi(e.nodeType===Ht?e.parentNode:e),a)for(var i=0;i<a.length;i++){Eg(o,a[i])}return o}(e,t,n)}function Kg(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}_g=function(e,n,r,a){var o=Hg(e,n);if(null!==o){var i=Vg(o.memoizedState,r,a);o.memoizedState=i,o.baseState=i,e.memoizedProps=t({},e.memoizedProps),jh(e,1,xa)}},Dg=function(e,n,r){var a=Hg(e,n);if(null!==a){var o=jg(a.memoizedState,r);a.memoizedState=o,a.baseState=o,e.memoizedProps=t({},e.memoizedProps),jh(e,1,xa)}},Ig=function(e,n,r,a){var o=Hg(e,n);if(null!==o){var i=Wg(o.memoizedState,r,a);o.memoizedState=i,o.baseState=i,e.memoizedProps=t({},e.memoizedProps),jh(e,1,xa)}},Og=function(e,t,n){e.pendingProps=Vg(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),jh(e,1,xa)},Lg=function(e,t){e.pendingProps=jg(e.memoizedProps,t),e.alternate&&(e.alternate.pendingProps=e.pendingProps),jh(e,1,xa)},Mg=function(e,t,n){e.pendingProps=Wg(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),jh(e,1,xa)},Fg=function(e){jh(e,1,xa)},zg=function(e){Pg=e},Qg.prototype.render=function(e){var t=this._internalRoot;"function"==typeof arguments[1]&&l("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");var n=t.containerInfo;if(8!==n.nodeType){var r=Rg(t.current);r&&r.parentNode!==n&&l("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.")}Sg(e,t,null,null)},Qg.prototype.unmount=function(){"function"==typeof arguments[0]&&l("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");var e=this._internalRoot,t=e.containerInfo;Sg(null,e,null,(function(){hu(t)}))};var Gg,Xg=o.ReactCurrentOwner,Jg=!1;function Zg(e){return e?9===e.nodeType?e.documentElement:e.firstChild:null}function ey(e,t){var n=t||function(e){var t=Zg(e);return!(!t||1!==t.nodeType||!t.hasAttribute(L))}(e);if(!n)for(var r,a=!1;r=e.lastChild;)!a&&1===r.nodeType&&r.hasAttribute(L)&&(a=!0,l("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.")),e.removeChild(r);return!n||t||Jg||(Jg=!0,i("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.")),function(e,t){return new Qg(e,0,t)}(e,n?{hydrate:!0}:void 0)}function ty(e,t,n,r,a){Gg(n),function(e,t){null!==e&&"function"!=typeof e&&l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e)}(void 0===a?null:a,"render");var o,i=n._reactRootContainer;if(i){if(o=i._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Cg(o);u.call(e)}}Sg(t,o,e,a)}else{if(i=n._reactRootContainer=ey(n,r),o=i._internalRoot,"function"==typeof a){var s=a;a=function(){var e=Cg(o);s.call(e)}}Yh((function(){Sg(t,o,e,a)}))}return Cg(o)}Gg=function(e){if(e._reactRootContainer&&8!==e.nodeType){var t=Rg(e._reactRootContainer._internalRoot.current);t&&t.parentNode!==e&&l("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.")}var n=!!e._reactRootContainer,r=Zg(e);!(!r||!yu(r))&&!n&&l("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),1===e.nodeType&&e.tagName&&"BODY"===e.tagName.toUpperCase()&&l("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.")},ur=function(e){e.tag===h&&(jh(e,4,Fh()),Ng(e,4))},function(e){sr=e}((function(e){if(e.tag===h){var t=Fh(),n=ya;jh(e,n,t),Ng(e,n)}})),function(e){cr=e}((function(e){if(e.tag===h){var t=Fh(),n=zh(e);jh(e,n,t),Ng(e,n)}})),function(e){fr=e}((function(e,t){try{return t()}finally{}}));var ny,ry,ay,oy=!1;function iy(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!Kg(t))throw Error("Target container is not a DOM element.");return xg(e,t,null,n)}"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||l("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),On=function(e,t,n){switch(t){case"input":return void gt(e,n);case"textarea":return void function(e,t){It(e,t)}(e,n);case"select":return void function(e,t){var n=e,r=t.value;null!=r&&Tt(n,!!t.multiple,r,!1)}(e,n)}},ny=function(e,t,n,r,a){var o=Jm;Jm|=4;try{return Ts(hs,e.bind(null,t,n,r,a))}finally{0===(Jm=o)&&(ph(),Ps())}},ry=function(){0==(49&Jm)?(function(){if(null!==Ch){var e=Ch;Ch=null,e.forEach((function(e){!function(e){e.expiredLanes|=24&e.pendingLanes}(e),Wh(e,xs())}))}Ps()}(),mv()):0!=(Jm&Gm)&&l("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.")},ay=function(e,t){var n=Jm;Jm|=2;try{return e(t)}finally{0===(Jm=n)&&(ph(),Ps())}},jn=$h,Un=ny,Wn=ry,Bn=ay;var ly={Events:[yu,bu,wu,zn,An,mv,Dv]},uy=function(e){var t=e.findFiberByHostInstance,n=o.ReactCurrentDispatcher;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return l("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"),!0;try{Gu=t.inject(e),Xu=t}catch(e){l("React instrumentation encountered an error: %s.",e)}return!0}({bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:_g,overrideHookStateDeletePath:Dg,overrideHookStateRenamePath:Ig,overrideProps:Og,overridePropsDeletePath:Lg,overridePropsRenamePath:Mg,setSuspenseHandler:zg,scheduleUpdate:Fg,currentDispatcherRef:n,findHostInstanceByFiber:$g,findFiberByHostInstance:t||Yg,findHostInstancesForRefresh:ng,scheduleRefresh:Jv,scheduleRoot:Zv,setRefreshHandler:Yv,getCurrentFiber:qg})}({findFiberByHostInstance:gu,bundleType:1,version:Ds,rendererPackageName:"react-dom"});if(!uy&&D&&window.top===window.self&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var sy=window.location.protocol;/^(https?|file):$/.test(sy)&&console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools"+("file:"===sy?"\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq":""),"font-weight:bold")}p.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ly,p.createPortal=iy,p.findDOMNode=function(e){var t=Xg.current;return null!==t&&null!==t.stateNode&&(t.stateNode._warnedAboutRefsInRender||l("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",Ve(t.type)||"A component"),t.stateNode._warnedAboutRefsInRender=!0),null==e?null:1===e.nodeType?e:function(e,t){var n=lr(e);if(void 0===n)throw"function"==typeof e.render?Error("Unable to find node on an unmounted component."):Error("Argument appears to not be a ReactComponent. Keys: "+Object.keys(e));var r=Nr(n);if(null===r)return null;if(1&r.mode){var a=Ve(n.type)||"Component";if(!ug[a]){ug[a]=!0;var o=$e;try{Ge(r),1&n.mode?l("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,a):l("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,a)}finally{o?Ge(o):Ke()}}}return r.stateNode}(e,"findDOMNode")},p.flushSync=qh,p.hydrate=function(e,t,n){if(!Kg(t))throw Error("Target container is not a DOM element.");return vu(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?"),ty(null,e,t,!0,n)},p.render=function(e,t,n){if(!Kg(t))throw Error("Target container is not a DOM element.");return vu(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?"),ty(null,e,t,!1,n)},p.unmountComponentAtNode=function(e){if(!Kg(e))throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");if(vu(e)&&void 0===e._reactRootContainer&&l("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?"),e._reactRootContainer){var t=Zg(e);return t&&!yu(t)&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."),Yh((function(){ty(null,null,e,!1,(function(){e._reactRootContainer=null,hu(e)}))})),!0}var n=Zg(e),r=!(!n||!yu(n)),a=1===e.nodeType&&Kg(e.parentNode)&&!!e.parentNode._reactRootContainer;return r&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",a?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1},p.unstable_batchedUpdates=$h,p.unstable_createPortal=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return oy||(oy=!0,i('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.')),iy(e,t,n)},p.unstable_renderSubtreeIntoContainer=function(e,t,n,r){return function(e,t,n,r){if(!Kg(n))throw Error("Target container is not a DOM element.");if(null==e||void 0===e._reactInternals)throw Error("parentComponent must be a valid React Component");return ty(e,t,n,!1,r)}(e,t,n,r)},p.version=Ds}(),d.exports=p;var y=d.exports,b={ID:0,name:"",email:""},w=f.createContext(b),k=f.createContext(null),E=document.getElementById("CSRFToken").textContent;function x(e){return null===e.note.message?null:(t=0===e.note.code?"warning":"success",f.createElement("div",{className:"alert alert-"+t,role:"alert"},f.createElement("div",{className:"row"},f.createElement("div",{className:"col-6"},f.createElement("h6",{className:"display-6"},e.note.message)),f.createElement("div",{className:"col d-flex justify-content-end"},f.createElement("button",{onClick:e.onClick,className:"btn btn-close"})))));var t}function S(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function C(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){S(o,r,a,i,l,"next",e)}function l(e){S(o,r,a,i,l,"throw",e)}i(void 0)}))}}var T={exports:{}};!function(e){var t=function(e){var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new R(r||[]);return o._invoke=function(e,t,n){var r=f;return function(a,o){if(r===p)throw new Error("Generator is already running");if(r===m){if("throw"===a)throw o;return _()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=C(i,n);if(l){if(l===h)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?m:d,u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=m,n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",m="completed",h={};function v(){}function g(){}function y(){}var b={};u(b,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,o)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(a,o,i,l){var u=c(e[a],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=c(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function N(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return g.prototype=y,u(E,"constructor",y),u(y,"constructor",g),g.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),u(S.prototype,i,(function(){return this})),e.AsyncIterator=S,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new S(s(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),u(E,o,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=P,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(N),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return l.type="throw",l.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),N(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;N(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}(T);var N=T.exports;function R(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1],i=n(r.exports.useState(""),2),l=i[0],u=i[1],s=r.exports.useContext(k),c=function(e){e.preventDefault(),"password"===e.target.type?u(e.target.value):o(e.target.value)};return f.createElement("form",{onSubmit:function(t){t.preventDefault();var n={username:a,password:l},r=function(){var t=C(N.mark((function t(){var r,a,o;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/login",{credentials:"include",method:"POST",body:JSON.stringify(n),headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/JSON"}});case 2:return r=t.sent,t.next=5,r.json();case 5:a=t.sent,r.ok?(o={ID:a.ID,name:a.name,email:a.email},e.onLogin(o)):s(a,0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();r().catch((function(e){return console.error(e)}))}},f.createElement("div",{className:"d-flex justify-content-end mb-2"},f.createElement("button",{onClick:e.onDismiss,className:"btn-close btn-close","aria-label":"Close"})),f.createElement("legend",null,"Log in to FantasyDraft!"),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"text",name:"username",id:"logName",className:"form-control",value:a,onChange:c,placeholder:"Username",required:!0}),f.createElement("label",{htmlFor:"logName",className:"form-label"},"Username")),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"password",name:"password",id:"logPass",className:"form-control",value:l,onChange:c,placeholder:"Password",required:!0}),f.createElement("label",{htmlFor:"logPass",className:"form-label"},"Password")),f.createElement("div",{className:"d-grid gap-2 mb-2"},f.createElement("button",{type:"submit",className:"btn btn-success"},"Login")))}function P(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1],i=n(r.exports.useState(""),2),l=i[0],u=i[1],s=n(r.exports.useState(""),2),c=s[0],d=s[1],p=n(r.exports.useState(""),2),m=p[0],h=p[1],v=r.exports.useContext(k),g=function(e){e.preventDefault(),"username"===e.target.name?o(e.target.value):"password"===e.target.name?u(e.target.value):"confirm"===e.target.name?d(e.target.value):h(e.target.value)};return f.createElement("form",{onSubmit:function(t){if(t.preventDefault(),l!==c)return v("Password and Password confirmation do not match!",0),null;var n=function(){var t=C(N.mark((function t(){var n,r,o,i;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n={username:a,password:l,email:m},t.next=3,fetch("/register",{method:"POST",body:JSON.stringify(n),headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"}});case 3:return r=t.sent,t.next=6,r.json();case 6:o=t.sent,r.ok?(i={ID:o.ID,name:o.name,email:o.email},e.onRegister(i)):v(o,0);case 8:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))}},f.createElement("div",{className:"d-flex justify-content-end"},f.createElement("button",{onClick:e.onDismiss,className:"btn-close btn-close","aria-label":"Close"})),f.createElement("legend",null,"Register for FantasyDraft!"),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"text",name:"username",className:"form-control",id:"registerName",onChange:g,required:!0,placeholder:"Username"}),f.createElement("label",{htmlFor:"registerName",className:"form-label"},"Username")),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"email",name:"email",className:"form-control",id:"registerEmail",onChange:g,placeholder:"Email Address",required:!0}),f.createElement("label",{htmlFor:"registerEmail",className:"form-label"},"Email Address")),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"password",name:"password",className:"form-control",id:"registerPass",onChange:g,placeholder:"Password",required:!0}),f.createElement("label",{htmlFor:"registerPass",className:"form-label"},"Password")),f.createElement("div",{className:"form-floating mb-2"},f.createElement("input",{type:"password",name:"confirm",className:"form-control",id:"registerConfirm",onChange:g,placeholder:"Confirm Password",required:!0}),f.createElement("label",{htmlFor:"registerConfirm",className:"form-label"},"Confirm Password")),f.createElement("div",{className:"d-grid gap-2 mb-2"},f.createElement("button",{type:"submit",className:"btn btn-success"},"Register")))}function _(e){return f.createElement("button",{onClick:e.onClick,className:"btn btn-success"},"Register")}function D(e){return f.createElement("button",{onClick:e.onClick,className:"btn btn-success"},"Login")}function I(e){var t=n(r.exports.useState(!1),2),a=t[0],o=t[1],i=n(r.exports.useState(!1),2),l=i[0],u=i[1];function s(){o(!a)}function c(){u(!l)}return a?f.createElement("div",{className:"row"},f.createElement(R,{onLogin:e.onRegister,onDismiss:s})):l?f.createElement("div",{className:"row"},f.createElement(P,{onRegister:e.onRegister,onDismiss:c})):f.createElement("div",{className:"row"},f.createElement("div",{className:"col"},f.createElement("h3",null,"New User?"),f.createElement(_,{onClick:c})),f.createElement("div",{className:"col"},f.createElement("h3",null,"Back Again?"),f.createElement(D,{onClick:s})))}function O(e){var t=r.exports.useContext(w);return""===t.name?f.createElement("p",{className:"text-white text-center mt-3"},"Welcome Guest!"):f.createElement("p",{className:"text-white text-center mt-3"},"Welcome ",t.name,"!")}function L(e){var t=r.exports.useContext(w);return f.createElement("nav",{className:"navbar navbar-expand-lg navbar-dark bg-success mb-3"},f.createElement("div",{className:"container-fluid text-center"},f.createElement("div",{className:"col"},f.createElement(O,null)),f.createElement("div",{className:"col-6"},f.createElement("a",{className:"navbar-brand",href:""},"Fantasy Draft")),f.createElement("div",{className:"col"},0===t.ID?"":f.createElement("a",{href:"\\logout"},f.createElement("button",{className:"btn btn-warning"},"logout")))))}function M(n){return function(t){if(Array.isArray(t))return e(t)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||t(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e){var t=n(r.exports.useState([]),2),a=t[0],o=t[1],i=n(r.exports.useState([]),2),l=i[0],u=i[1],s=n(r.exports.useState([]),2),c=s[0],d=s[1],p=n(r.exports.useState([]),2),m=p[0],h=p[1],v=n(r.exports.useState({context:"summary"}),2),g=v[0],y=v[1],b=n(r.exports.useState(""),2),E=b[0],x=b[1],S=n(r.exports.useState(0),2),T=S[0],R=S[1],P=n(r.exports.useState([]),2),_=P[0],D=P[1],I=n(r.exports.useState(!0),2),O=I[0],L=I[1],F=n(r.exports.useState([]),2),j=F[0],U=F[1],W=n(r.exports.useState([]),2),V=W[0],$=W[1],Y=n(r.exports.useState(""),2),q=Y[0],Q=Y[1],K=r.exports.useRef(null),G=r.exports.useContext(w),X=r.exports.useContext(k);r.exports.useEffect((function(){var t;t=function(){var t=C(N.mark((function t(){var n,r,a,o,i,l,u,s;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/draft/"+e.league.ID,{method:"GET"});case 2:return n=t.sent,t.next=5,n.json();case 5:if(r=t.sent,n.ok){if(a=r.map((function(e){return e})),R(a.length),a.length!==e.settings.draft.Rounds*e.teams.length)for(o=M(e.teams).sort((function(e,t){return e.Slot-t.Slot})),i=M(e.teams).sort((function(e,t){return t.Slot-e.Slot})),l=e.settings.draft.Rounds*e.teams.length,u=a.length;u<l;u++)s=u%e.teams.length,Math.floor(u/e.teams.length)%2==0?a.push({Player:null,Slot:u,Team:o[s].ID}):a.push({Player:null,Slot:u,Team:i[s].ID});d(a)}else X("Failed to fetch history",0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),t().catch((function(e){return console.error(e)})),function(){var e=function(){var e=C(N.mark((function e(){var t,n,r,a,i,l,s,c,f,d,p,m;return N.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/draftpool",{method:"GET"});case 2:return t=e.sent,e.next=5,t.json();case 5:if(n=e.sent,t.ok){for(r=[],a=[],i=0;i<n.Players.length;i++)if(r.push(n.Players[i]),0===i)for(l=Object.keys(n.Players[i]),s=0;s<l.length;s++){for(c="",f=[],d=0;d<l[s].length;d++)l[s].charAt(d)===l[s].charAt(d).toUpperCase()&&f.push(d);if(f.length===l[s].length)c=l[s];else for(p=0;p<f.length;p++)c=p+1<f.length?c.concat(l[s].slice(f[p],f[p+1])," "):c.concat(l[s].slice(f[p]));a.push({verbose:c,abbreviation:J[l[s]],raw:l[s]})}m=r.map((function(e){return e.ID})),h(a),u(m),o(r)}else X("Failed to fetch players",0);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e().catch((function(e){return console.error(e)}))}(),K.current=new WebSocket("ws://"+window.location.host+"/ws/draft/"+e.league.ID);var n=e.teams.map((function(e){return{team:e.ID,smack:""}}));$(n)}),[]),r.exports.useEffect((function(){a.length>0&&c.length>0&&_!==[]&&L(!1)}),[a,c,_]),r.exports.useEffect((function(){var e=M(l);c.filter((function(e){return null!=e.Player})).forEach((function(t){var n=e.findIndex((function(e){return e===t.Player}));e.splice(n,1)})),u(e)}),[O]),r.exports.useEffect((function(){null!==K&&(K.current.onclose=function(e){console.log("Websocket closed unexpectedly")},K.current.onopen=function(e){},K.current.onmessage=function(t){var n=JSON.parse(t.data);switch(n.Kind){case"users":var r=e.teams.map((function(e){return{ID:e.Manager.ID,active:!1}}));r.forEach((function(e){n.Users.includes(e.ID)&&(e.active=!0)})),D(r);break;case"status":var o=M(_);o.forEach((function(e){e.ID===n.User&&(e.active=n.Active)})),D(o);break;case"draft":var i=l.filter((function(e){return e!==n.Player})),s=M(c);s.find((function(e){return e.Slot===n.Pick})).Player=n.Player,u(i),d(s),Z({context:"default"}),R(T+1),X(e.teams.find((function(e){return e.ID===n.Team})).Name+" has selected "+a.find((function(e){return e.ID===n.Player})).Name,1);break;case"chat":var f=M(j),p=e.teams.find((function(e){return e.Manager.ID===n.User}));f.push({team:p,message:n.Payload}),U(f);break;default:console.log("sent "+n.Kind+" message type, why did you do that?")}})}),[K,c,l,_,T,j]);var J={ID:"ID",Name:"Name",PfbrName:"PN",Team:"Team",Position:"Pos",Age:"Age",Games:"GP",Starts:"GS",PassCompletions:"Comp",PassAttempts:"Att",PassYards:"Yd",PassTouchdowns:"Td",PassInterceptions:"Int",RushAttempts:"Att",RushYards:"Yd",RushTouchdowns:"Td",Targets:"Tar",Receptions:"Rec",ReceivingYards:"Yd",ReceivingTouchdowns:"Td",Fumbles:"Fmb",FumblesLost:"FmbL",AllTouchdowns:"Td",TwoPointConversion:"Tpc",TwoPointPass:"Tpp",FantasyPoints:"Fp",PointPerReception:"Ppr",ValueBased:"Vbd"};function Z(e){switch(e.context){case"player":y({context:"player",data:e.focusable});break;case"team":y({context:"team",data:e.focusable});break;default:y({context:"summary",data:null})}}return r.exports.useEffect((function(){if(""!==q){var e=M(j),t=M(V);e.shift(),t.find((function(e){return e.team===q.team.ID})).smack=q.message,$(t),U(e),Q("")}}),[q,V,j]),O?f.createElement("div",null,"loading..."):f.createElement("div",{className:"text-center"},f.createElement("h1",{className:"display-4"},e.league.name," Draft"),f.createElement("div",{className:"row m-2 g-1"},f.createElement("div",{className:"col-8"},f.createElement(A,{focus:g,history:c,players:a,shiftFocus:Z,selectPlayer:function(t){var n=e.teams.find((function(e){return e.Manager.ID===G.ID}));K.current.send(JSON.stringify({Kind:"pick",Payload:{Player:t,Pick:T,Team:n.ID,League:e.league.ID}}))},currentPick:T,teams:e.teams,rounds:e.settings.draft.Rounds})),f.createElement("div",{className:"col-4",style:{maxHeight:"30em",overflowY:"scroll"}},f.createElement(B,{currentPick:T,teams:e.teams,userStatus:_,history:c,shiftFocus:Z,smacks:V,rounds:e.settings.draft.Rounds}))),f.createElement(z,{players:a,available:l,headers:m,tableSort:function(e){for(var t=M(a),r=function(){var r=n(l[i],2),a=r[0],u=r[1];if(a===e){var s=String(u).toLowerCase().split("");return"abcdefghijklmnopqrstuvwxyz".includes(s[0])?(E!==e?(t.sort((function(e,t){return e[a].toString().localeCompare(t[a].toString())})),x(e)):(t.sort((function(e,t){return t[a].toString().localeCompare(e[a].toString())})),x("")),o(t)):(E!==e?(t.sort((function(e,t){return t[a]-e[a]})),x(e)):(t.sort((function(e,t){return e[a]-t[a]})),x("")),o(t)),"break"}},i=0,l=Object.entries(a[0]);i<l.length;i++){if("break"===r())break}},shiftFocus:Z}),f.createElement(H,{chat:function(e){K.current.send(JSON.stringify({Kind:"message",Payload:e}))},messages:j,setChat:U,progress:function(){var e=M(j).shift();Q(e)}}))}function z(e){var t=["PassCompletions","PassAttempts","PassYards","PassInterceptions"],a=["RushAttempts","RushYards"],o=["Targets","Receptions","ReceivingYards"],i=["TwoPointConversion","TwoPointPass"],l=["PointPerReception"],u=["Age","Team","Games","Starts"],s=n(r.exports.useState(["Position","Name","PassTouchdowns","RushTouchdowns","ReceivingTouchdowns","FantasyPoints","ValueBased"]),2),c=s[0],d=s[1],p=n(r.exports.useState(1),2),m=p[0],h=p[1],v=n(r.exports.useState(1),2),g=v[0],y=v[1],b=n(r.exports.useState(1),2),w=b[0],k=b[1],E=n(r.exports.useState(2),2),x=E[0],S=E[1],C=n(r.exports.useState(2),2),T=C[0],N=C[1],R=n(r.exports.useState("ValueBased"),2),P=R[0],_=R[1],D=function(t){t.preventDefault(),_(t.currentTarget.id),e.tableSort(t.currentTarget.id)},I=function(t){t.preventDefault();var n=e.players.find((function(e){return e.ID===parseInt(t.target.parentElement.id)}));e.shiftFocus({context:"player",focusable:n})},O=function(e){switch(e.target.id){case"general_x":u.every((function(e){return c.includes(e)}))?(d(M(c).filter((function(e){return!u.includes(e)}))),N(2)):(d(M(c).concat(u)),N(u.length+2));break;case"pass_x":t.every((function(e){return c.includes(e)}))?(d(M(c).filter((function(e){return!t.includes(e)}))),h(1)):(d(M(c).concat(t)),h(t.length+1));break;case"rush_x":a.every((function(e){return c.includes(e)}))?(d(M(c).filter((function(e){return!a.includes(e)}))),y(1)):(d(M(c).concat(a)),y(a.length+1));break;case"rec_x":o.every((function(e){return c.includes(e)}))?(d(M(c).filter((function(e){return!o.includes(e)}))),k(1)):(d(M(c).concat(o)),k(o.length+1));break;case"misc_x":i.every((function(e){return c.includes(e)}))?d(M(c).filter((function(e){return!i.includes(e)}))):d(M(c).concat(i));break;case"fant_x":l.every((function(e){return c.includes(e)}))?(d(M(c).filter((function(e){return!l.includes(e)}))),S(2)):(d(M(c).concat(l)),S(l.length+2))}};return f.createElement("div",{className:"table-responsive overflow-auto"},f.createElement("table",{className:"table table-bordered border-success table-hover table-sm text-center"},f.createElement("caption",null,"Draft Pool"),f.createElement("colgroup",null,e.headers.map((function(e){return c.includes(e.raw)?e.raw!==P?f.createElement("col",null):f.createElement("col",{className:"bg-warning"}):null}))),f.createElement("thead",null,f.createElement("tr",{className:"bg-warning"},f.createElement("td",{colSpan:T},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:O,id:"general_x"}," General "))),f.createElement("td",{colSpan:m},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:O,id:"pass_x"}," Passing "))),f.createElement("td",{colSpan:g},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:O,id:"rush_x"}," Rushing "))),f.createElement("td",{colSpan:w},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:O,id:"rec_x"}," Receiving "))),f.createElement("td",{colSpan:x},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:O,id:"fant_x"}," Fantasy ")))),f.createElement("tr",{key:"headers"},e.headers.map((function(e){return"Pfbr Name"===e.verbose?null:c.includes(e.raw)?f.createElement("th",{key:e.raw+"_key",scope:"col"},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{className:"btn btn-warning btn-sm",id:e.raw,onClick:D},e.abbreviation))):null})))),f.createElement("tbody",null,e.players.filter((function(t){return e.available.includes(t.ID)})).map((function(e){return f.createElement("tr",{key:e.PfbrName,onClick:I,id:e.ID},Object.values(e).map((function(t,n){var r=Object.keys(e),a=Object.values(e);return c.includes(r[n])?0===n?f.createElement("th",{scope:"row",key:r[n]+" "+a[1]},t):f.createElement("td",{key:r[n]+" "+a[1]},t):null})))})))))}function A(e){var t=r.exports.useContext(w);if(e.currentPick>=e.rounds*e.teams.length){for(var n=[],a=function(t){var r=e.history.filter((function(n){return n.Team===e.teams[t].ID})).map((function(t){return e.players.find((function(e){return e.ID===t.Player}))}));n.push(f.createElement(W,{team:e.teams[t],roster:r,currentPick:e.currentPick,max:e.rounds*e.teams.length}))},o=0;o<e.teams.length;o++)a(o);return n}var i=e.history[e.currentPick];if("player"===e.focus.context)return f.createElement(U,{player:e.focus.data,selectPlayer:e.selectPlayer,drafting:i.Team,teamControl:e.teams.find((function(e){return e.Manager.ID===t.ID})),shiftFocus:e.shiftFocus});if("team"===e.focus.context){var l=e.history.filter((function(t){return t.Team===e.focus.data.ID})).filter((function(e){return null!=e.Player})).map((function(t){return e.players.find((function(e){return e.ID===t.Player}))}));return f.createElement(W,{team:e.focus.data,roster:l,shiftFocus:e.shiftFocus,currentPick:e.currentPick,max:e.rounds*e.teams.length})}return f.createElement(j,{history:e.history,currentPick:e.currentPick,teams:e.teams,shiftFocus:e.shiftFocus,players:e.players,rounds:e.rounds})}function j(e){var t=n(r.exports.useState(0),2),a=t[0],o=t[1],i=n(r.exports.useState([]),2),l=i[0],u=i[1],s=10,c=Math.floor((e.rounds*e.teams.length-1)/s);r.exports.useEffect((function(){o(Math.floor(e.currentPick/s))}),[]),r.exports.useEffect((function(){var t=a*s+s>=e.rounds*e.teams.length?e.rounds*e.teams.length:a*s+s;u(e.history.slice(a*s,t))}),[a,e]);var d=function(e){e.preventDefault(),"previous"===e.target.id?o(a-1):o(a+1)},p=function(t){t.preventDefault();var n=e.teams.find((function(e){return e.ID===parseInt(t.currentTarget.attributes.team.value)}));e.shiftFocus({context:"team",focusable:n})};return f.createElement("table",{className:"table table-responsive table-sm text-center"},f.createElement("thead",null,f.createElement("tr",null,f.createElement("th",null,"Team"),f.createElement("th",null,"Pick"),f.createElement("th",null,"Selection"))),f.createElement("tbody",null,l.map((function(t){return f.createElement("tr",{key:"draft_row_"+t.Slot},f.createElement("td",null,f.createElement("div",{className:"d-grid gap-2 text-nowrap overflow-hidden"},f.createElement("button",{className:"btn btn-outline-success btn-sm",team:t.Team,onClick:p},e.teams.find((function(e){return t.Team===e.ID})).Name))),f.createElement("td",null,"Pick: ",t.Slot+1),f.createElement("td",null,null===t.Player?"tbd":e.players.find((function(e){return e.ID===t.Player})).Name))}))),f.createElement("tfoot",null,f.createElement("tr",null,f.createElement("td",{className:"col-5"},f.createElement("div",{className:"d-grid gap-2"},0===a?f.createElement("button",{className:"btn btn-warning btn-sm",id:"previous",onClick:d,disabled:!0},"Previous"):f.createElement("button",{className:"btn btn-warning btn-sm",id:"previous",onClick:d},"Previous"))),f.createElement("td",{className:"col-2"},f.createElement("div",{className:"text-center"},a+1," of ",c+1)),f.createElement("td",{className:"col-5"},f.createElement("div",{className:"d-grid gap-2"},a===c?f.createElement("button",{id:"next",className:"btn btn-warning btn-sm",onClick:d,disabled:!0},"Next"):f.createElement("button",{className:"btn btn-warning btn-sm",id:"next",onClick:d},"Next"))))))}function U(e){var t=function(t){t.preventDefault();var n=parseInt(t.target.id,10);e.selectPlayer(n)},r=["PassYards","PassInterceptions","PassTouchdowns","FantasyPoints","ValueBased"],a=["RushYards","RushTouchdowns","FantasyPoints","ValueBased"],o=["Receptions","ReceivingYards","ReceivingTouchdowns","FantasyPoints","ValueBased"],i="https://www.pro-football-reference.com/players/"+e.player.PfbrName[0]+"/"+e.player.PfbrName+".htm",l=[];return"RB"===e.player.Position&&l.push({key:"YPC",value:Math.ceil(e.player.RushYards/e.player.RushAttempts*100)/100}),Object.entries(e.player).forEach((function(t){var i=n(t,2),u=i[0],s=i[1];switch(e.player.Position){case"QB":r.includes(u)&&l.push({key:u,value:s});break;case"RB":a.includes(u)&&l.push({key:u,value:s});break;default:o.includes(u)&&l.push({key:u,value:s})}})),f.createElement("div",null,f.createElement("table",{className:"table table-responsive table"},f.createElement("thead",null,f.createElement("tr",null,f.createElement("td",{colSpan:"4"},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{onClick:function(t){t.preventDefault(),e.shiftFocus({context:"summary",focusable:null})},className:"btn btn-danger btn-sm"},"Draft Summary")))),f.createElement("tr",null,f.createElement("th",{colSpan:"2"},e.player.Name),f.createElement("th",null,"Age"),f.createElement("th",null,"Team")),f.createElement("tr",null,f.createElement("td",{colSpan:"2"},e.player.Position),f.createElement("td",null,e.player.Age),f.createElement("td",null,e.player.Team))),f.createElement("tbody",{className:"text-center"},l.map((function(e){return f.createElement("tr",{key:e.key+"_bio"},f.createElement("th",{colSpan:2},e.key),f.createElement("td",{colSpan:2},e.value))}))),f.createElement("tfoot",null,f.createElement("tr",null,f.createElement("td",{colSpan:"4"},f.createElement("a",{href:i},"See their whole career at Pro-Football-Reference.com"))),f.createElement("tr",null,f.createElement("td",{colSpan:"4"},f.createElement("div",{className:"d-grid gap-2"},e.teamControl.ID===e.drafting?f.createElement("button",{className:"btn btn-success btn-lg",id:e.player.ID,onClick:t},"Draft"):f.createElement("button",{className:"btn btn-light btn-lg",id:e.player.ID,onClick:t,disabled:!0},"Draft")))))))}function W(e){for(var t=[],n=[],r=[],a=[],o=0,i=0,l=0,u=0,s=0;s<e.roster.length;s++)if("tbd"!==e.roster[s])switch(e.roster[s].Position){case"QB":t.push(e.roster[s]),o+=e.roster[s].FantasyPoints;break;case"RB":n.push(e.roster[s]),i+=e.roster[s].FantasyPoints;break;case"WR":r.push(e.roster[s]),l+=e.roster[s].FantasyPoints;break;case"TE":a.push(e.roster[s]),u+=e.roster[s].FantasyPoints}return f.createElement("table",{className:"table table-responsive table text-center"},f.createElement("thead",null,e.currentPick<e.max?f.createElement("tr",null,f.createElement("td",{colSpan:"5"},f.createElement("div",{className:"d-grid gap-2"},f.createElement("button",{onClick:function(t){t.preventDefault(),e.shiftFocus({context:"summary",focusable:null})},className:"btn btn-danger btn-sm"},"Draft Summary")))):"",f.createElement("tr",null,f.createElement("th",{colSpan:"5"},e.team.Name)),f.createElement("tr",null,f.createElement("td",{colSpan:"5"},"Manager: ",e.team.Manager.name)),f.createElement("tr",null,f.createElement("td",null),f.createElement("th",null,"QB"),f.createElement("th",null,"RB"),f.createElement("th",null,"WR"),f.createElement("th",null,"TE"))),f.createElement("tbody",null,M(Array(5)).map((function(e,o){return f.createElement("tr",{key:"roster_row"+(o+1).toString()},f.createElement("th",null,o+1,":"),f.createElement("td",{key:"QB"+(o+1).toString()},o<t.length?t[o].Name:""),f.createElement("td",{key:"RB"+(o+1).toString()},o<n.length?n[o].Name:""),f.createElement("td",{key:"WR"+(o+1).toString()},o<r.length?r[o].Name:""),f.createElement("td",{key:"TE"+(o+1).toString()},o<a.length?a[o].Name:""))}))),f.createElement("tfoot",null,f.createElement("tr",null,f.createElement("td",null),f.createElement("td",null,"QB Pts: ",o),f.createElement("td",null," RB pts: ",i),f.createElement("td",null," WR pts: ",l),f.createElement("td",null,"TE Points: ",u))))}function B(e){function t(t){t.preventDefault();var n=e.teams.find((function(e){return e.ID===parseInt(t.currentTarget.attributes.team.value)}));e.shiftFocus({context:"team",focusable:n})}var n=e.teams.length*e.rounds,r=[];if(e.userStatus===[])return null;if(e.currentPick>=n)return null;for(var a=function(t){var a=Math.floor(t/e.teams.length)+1,o=t%e.teams.length+1,i="",l=e.teams.find((function(n){return n.ID===e.history[t].Team})),u=e.userStatus.find((function(e){return e.ID===l.Manager.ID}));t<n&&(t===e.currentPick?(i="#198754aa",u.active||(i="#ffc107aa")):(i="#0d6efdaa",u.active||(i="#6c757daa"))),t<n&&r.push({pick:o,round:a,team:l,highlight:i})},o=e.currentPick;o<e.currentPick+e.teams.length+16;o++)a(o);return f.createElement("div",{className:"text-center bg-warning rounded-3 m-2 p-2"},f.createElement("div",{className:"row"},f.createElement("div",{className:"col"},f.createElement("h4",null,"Draft Order")),f.createElement("div",{className:"col-sm-4 fw-lighter fst-italic overflow-hidden"},f.createElement("h6",{className:"border-bottom border-success"},"Round"),f.createElement("h6",null,"Pick")),f.createElement("div",null)),r.map((function(n){return f.createElement("div",{key:n.team.Name+"order"+n.round+n.pick,onClick:t,team:n.team.ID},f.createElement(V,{pick:n.pick,round:n.round,team:n.team,highlight:n.highlight,smack:e.smacks.find((function(e){return e.team===n.team.ID}))}))})))}function V(e){return f.createElement("div",{className:"row p-2 rounded-3",style:{backgroundColor:e.highlight}},f.createElement("div",{className:"col"},f.createElement("h6",null,e.team.Name),f.createElement("p",{className:"overflow-hidden mb-1 rounded-3 bg-white text-break",style:{maxHeight:"3em"}},""!==e.smack.smack?e.smack.smack:"Talk Some Smack!")),f.createElement("div",{className:"col-sm-2"},f.createElement("h6",{className:"border-bottom border-warning"},e.round),f.createElement("h6",null,e.pick)))}function H(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1];return f.createElement("div",{className:"row position-sticky bottom-0 p-2",style:{minWidth:"100%",maxHeight:"8em",backgroundColor:"#198754d0"}},f.createElement("div",{className:"col-8 bg-white text-center"},e.messages.length>0?f.createElement($,{message:e.messages[0],progress:e.progress}):""),f.createElement("div",{className:"col-4"},f.createElement("form",{className:"d-grid",onSubmit:function(t){t.preventDefault(),e.chat(a),o("")}},f.createElement("div",{className:"form-floating"},f.createElement("input",{id:"chatInput",type:"text",onChange:function(e){e.preventDefault(),o(e.target.value)},value:a,className:"form-control",placeholder:"Talk Smack!",required:!0}),f.createElement("label",{htmlFor:"chatInput"},"Talk Smack!")),f.createElement("button",{type:"submit",className:"btn btn-sm btn-info"},"Chat"))))}function $(e){return r.exports.useEffect((function(){var t=function(){var t=C(N.mark((function t(){var n,r,a,o;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.message.length>3?1250:2500,r=document.querySelector("#chatHighlight"),a=r.animate([{fontSize:"xx-small",opacity:1},{fontSize:"xx-large",opacity:1,offset:.8},{fontSize:"xx-large",opacity:0}],{duration:n}),t.next=5,a.finished;case 5:o=t.sent,console.log(o),"finished"===o.playState&&e.progress();case 8:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();t().catch((function(e){return console.error(e)}))}),[e.message]),f.createElement("div",{className:"row mt-3",id:"chatHighlight"},f.createElement("div",{className:"col-3"},f.createElement("p",{className:"mb-0 text-break"},e.message.team.Manager.name,":")),f.createElement("div",{className:"col-9"},f.createElement("p",{className:"mb-0 text-break"},e.message.message)))}function Y(e){var t=n(r.exports.useState({ID:0,name:"",state:"",maxOwner:0,kind:""}),2),a=t[0],o=t[1],i=n(r.exports.useState({ID:0,name:"",email:""}),2),l=i[0],u=i[1],s=n(r.exports.useState({draft:{},positional:{},scoring:{}}),2),c=s[0],d=s[1],p=n(r.exports.useState([]),2),m=p[0],h=p[1],v=n(r.exports.useState([]),2),g=v[0],y=v[1],b=n(r.exports.useState(0),2),x=b[0],S=b[1],T=n(r.exports.useState(!0),2),R=T[0],P=T[1],_=r.exports.useContext(w),D=r.exports.useContext(k);function I(){e.openLeague(0)}function O(e,t){var n=M(m);n.find((function(t){return t.ID===e})).Name=t,h(n)}if(r.exports.useEffect((function(){var t=function(){var t=C(N.mark((function t(){var n,r,a,i,l,s,c;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/home/"+e.ID,{method:"GET"});case 2:return n=t.sent,r=n.ok,t.next=6,n.json();case 6:if(a=t.sent,!r){t.next=24;break}return i=0,null!=a.teams&&(h(a.teams),i+=a.teams.length),null!=a.invites&&(y(a.invites),i+=a.invites.length),i>a.league.MaxOwner?S(0):S(a.league.MaxOwner-i),u(a.league.Commissioner),o({ID:a.league.ID,name:a.league.Name,state:a.league.State,maxOwner:a.league.MaxOwner,kind:a.league.Kind}),l="/league/settings/getdraft/"+a.league.ID,t.next=17,fetch(l,{method:"GET"});case 17:return s=t.sent,t.next=20,s.json();case 20:c=t.sent,n.ok?d(c):D("Bad Request",0),t.next=25;break;case 24:D(a,0);case 25:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();t().catch((function(e){return console.error(e)}))}),[]),r.exports.useEffect((function(){var e=g.length+m.length;e>a.maxOwner?(S(0),l.ID===_.ID&&D("You have more Invites than open league slots.  Consider increasing the maximum number of owners in your league.",0)):S(a.maxOwner-e)}),[a]),r.exports.useEffect((function(){Object.keys(c.draft).length>0&&0!==a.ID&&P(!1)}),[c,a]),R)return f.createElement("div",null,"loading...");switch(a.state){case"INIT":return f.createElement("div",{className:"text-center"},f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-danger",onClick:I},"Return to Dashboard")),f.createElement("h1",{className:"text-capitalize display-4 mb-2"},a.name," League Page"),f.createElement("h2",{className:"display-5 mb-2"},"League Invitations"),f.createElement("div",{className:"border border-warning p-1 mb-3"},f.createElement("h3",{className:"display-6 mb-2"},"Teams Confirmed"),m.map((function(e){return f.createElement(q,{key:e.ID+"_team",league:a.ID,team:e,updateTeam:O})}))),g.length>0?f.createElement("div",{className:"border border-warning p-1 mb-3"},f.createElement("h3",{className:"display-6 mb-2"},"Users Invited"),g.map((function(e,t){return t+m.length<a.maxOwner?f.createElement(Q,{key:"invite_"+t,index:t,commissioner:l,invite:e,league:a.ID}):""}))):"",x>0?f.createElement("h3",{className:"display-6 mb-2"},x," Slot",x>1?"s":""," Open"):"",M(Array(x)).map((function(e,t){return f.createElement(Q,{key:"anon_invite_"+t,index:t,invite:null,commissioner:l,league:a.ID})})),0===x&&_.ID===l.ID?f.createElement("div",{className:"d-grid mb-3"},f.createElement("button",{className:"btn btn-success",onClick:function(e){e.preventDefault();var t=function(){var e=C(N.mark((function e(){var t,n,r,i;return N.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/league/lock",{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify({league:a.ID})});case 2:return t=e.sent,n=t.ok,e.next=6,t.json();case 6:r=e.sent,n?(i={ID:a.ID,name:a.name,state:r.state,maxOwner:a.maxOwner,kind:a.kind},o(i),D("League is now in draft mode, please review settings",1)):D(r,0);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();t().catch((function(e){return console.log(e)}))}},"Lock League")):"",f.createElement("h2",{className:"display-5 mb-2"},"Review League Settings"),f.createElement(K,{league:a,commissioner:l,setLeague:o}));case"PREDRAFT":return f.createElement("div",{className:"text-center"},f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-danger",onClick:I},"Return to Dashboard")),f.createElement("h1",{className:"text-capitalize display-4 mb-2"},a.name," League Page"),f.createElement("div",{className:"border border-warning p-1 mb-3"},f.createElement("h2",{className:"display-5"},"Teams"),m.map((function(e){return f.createElement(q,{key:e.ID+"_team",league:a.ID,team:e,updateTeam:O})}))),_.ID===l.ID?f.createElement("div",{className:"d-grid"},f.createElement("h2",{className:"display-5"},"Review Settings"),f.createElement("h3",{className:"display-6"},"When satisfied, click start draft button to begin draft"),f.createElement("button",{className:"btn btn-lg btn-success",onClick:function(e){e.preventDefault();var t=function(){var e=C(N.mark((function e(){var t,n,r,i;return N.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=fetch("/league/startdraft",{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify({league:a.ID})}),e.next=3,t.json();case 3:n=e.sent,t.ok?(r={ID:a.ID,name:a.name,state:"DRAFT",maxOwner:a.maxOwner,kind:a.kind},o(r),i=M(m),n.forEach((function(e){var t=i.findIndex((function(t){return t.ID===e.Team}));i[t].Slot=e.Slot})),h(i),D("Draft has begun!",1)):D(n,0);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();t().catch((function(e){return console.error(e)}))}},"Start Draft")):"",f.createElement(G,{league:a.ID,commissioner:l,settings:c,setSettings:d}));case"DRAFT":return f.createElement(F,{league:a,teams:m,settings:c});default:return null}}function q(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1],i=n(r.exports.useState(!1),2),l=i[0],u=i[1],s=r.exports.useContext(w);function c(e){e.preventDefault(),u(!l)}return l?f.createElement("form",null,f.createElement("div",{className:"row"},f.createElement("div",{className:"col-8 form-floating"},f.createElement("input",{className:"form-control",id:"teamNameEdit",type:"text",value:a,onChange:function(e){e.preventDefault(),o(e.target.value)},placeholder:"Edit Team Name"}),f.createElement("label",{className:"form-label",htmlFor:"teamNameEdit"},"Edit Team Name")),f.createElement("div",{className:"col d-grid"},f.createElement("button",{className:"btn btn-success btn-sm",onClick:function(t){t.preventDefault();var n=function(){var n=C(N.mark((function n(){var r,o;return N.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch("/league/editTeam",{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify({league:e.league,team:e.team.ID,name:a})});case 2:return r=n.sent,n.next=5,r.json();case 5:o=n.sent,r.ok?(e.updateTeam(e.team.ID,a),c(t)):x(o);case 7:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))}},"Edit!"),f.createElement("button",{className:"btn btn-danger btn-sm",onClick:c},"Cancel Edit")))):f.createElement("div",{id:e.team.ID+"_team",className:"row m-1 p-3 border-top border-warning align-items-center rounded"},f.createElement("div",{className:"col border-end border-success overflow-visible"},f.createElement("p",{className:"m-0"},e.team.Name)),f.createElement("div",{className:"col border-end border-success overflow-visible"},f.createElement("p",{className:"m-0"},e.team.Manager.name)),f.createElement("div",{className:"col border-end border-success overflow-visible"},f.createElement("p",{className:"m-0"},e.team.Manager.email)),f.createElement("div",{className:"col d-grid overflow-visible"},e.team.Manager.ID===s.ID?f.createElement("button",{className:"btn btn-warning",onClick:c},"Edit Team Name"):""))}function Q(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1],i=n(r.exports.useState(null),2),l=i[0],u=i[1],s=r.exports.useContext(w),c=r.exports.useContext(k);return r.exports.useEffect((function(){null!==e.invite&&u(e.invite)}),[]),null===l?f.createElement("form",{className:"form-control bg-warning mb-3",onSubmit:function(t){if(t.preventDefault(),s.ID!==e.commissioner.ID)return c("Non-Commissioners can't invite users to league.",0),null;var n=function(){var t=C(N.mark((function t(){var n,r;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/invite",{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify({invitee:a,league:e.league})});case 2:return n=t.sent,t.next=5,n.json();case 5:r=t.sent,n.ok?u(r):c(r,0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))}},f.createElement("div",{className:"form-floating"},f.createElement("input",{id:"inviteName"+e.index,className:"form-control",type:"email",placeholder:"Invitee Email",onChange:function(e){e.preventDefault(),o(e.target.value)},required:!0}),f.createElement("label",{htmlFor:"inviteName_"+e.index},"Invitee Email")),f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-success btn-lg",type:"submit"},"Invite!"))):f.createElement("div",{className:"row m-1 p-3 border-top border-warning align-items-center"},f.createElement("div",{className:"col border-end border-success overflow-visible"},f.createElement("p",{className:"m-0"},l.name)),f.createElement("div",{className:"col border-end border-success overflow-visible"},f.createElement("p",{className:"m-0"},l.email)),f.createElement("div",{className:"col d-grid overflow-visible"},f.createElement("button",{className:"btn btn-danger btn-sm",name:l.email,onClick:function(t){if(t.preventDefault(),s.ID!==e.commissioner.ID)return c("Non-commissioners can't revoke invites",0),null;var n=function(){var n=C(N.mark((function n(){var r,a;return N.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch("/league/revokeInvite",{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify({invitee:t.target.name,league:e.league})});case 2:return r=n.sent,n.next=5,r.json();case 5:a=n.sent,r.ok?(u(null),o("")):c(a,0);case 7:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))},disabled:s.ID!==e.commissioner.ID},"Revoke Invite")))}function K(e){var t=n(r.exports.useState(0),2),a=t[0],o=t[1],i=n(r.exports.useState(""),2),l=i[0],u=i[1],s=n(r.exports.useState(""),2),c=s[0],d=s[1],p=n(r.exports.useState(!0),2),m=p[0],h=p[1],v=r.exports.useContext(w),g=r.exports.useContext(k);function y(e){switch(e.preventDefault(),e.target.name){case"leagueName":u(e.target.value);break;case"kind":d(e.target.value);break;default:o(e.target.valueAsNumber)}}return r.exports.useEffect((function(){o(e.league.maxOwner),u(e.league.name),d(e.league.kind),h(!1)}),[]),m?f.createElement("div",null,"loading..."):f.createElement("div",null,f.createElement("form",{className:"form-control mb-3 bg-warning",onSubmit:function(t){t.preventDefault();var n=document.getElementById("CSRFToken").textContent,r=function(){var t=C(N.mark((function t(){var r,i;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/settings",{method:"POST",headers:{"X-CSRF-TOKEN":n,"Content-Type":"Application/json"},body:JSON.stringify({league:e.league.ID,name:l,maxOwner:a,kind:c})});case 2:return r=t.sent,t.next=5,r.json();case 5:i=t.sent,r.ok?(o(i.maxOwner),u(i.name),e.setLeague({ID:e.league.ID,name:i.name,state:e.league.state,maxOwner:i.maxOwner,kind:i.league.kind}),g("New Settings Saved",1)):g(i,0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();r().catch((function(e){return console.error(e)}))}},f.createElement("div",{className:"row mb-3"},f.createElement("div",{className:"col form-floating"},f.createElement("input",{id:"NameSetting",type:"text",className:"form-control",value:l,onChange:y,placeholder:"League Name",disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"NameSetting"},"League Name")),f.createElement("div",{className:"col form-floating"},f.createElement("input",{id:"ownerSetting",type:"number",className:"form-control",max:16,min:2,value:a,onChange:y,placeholder:"Maximum Teams",disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"ownerSetting"},"Maximum Teams"))),f.createElement("div",{className:"mb-3 form-floating"},f.createElement("select",{className:"form-select",name:"kind",id:"leagueKind",placeholder:"League Type",onChange:y,value:c,disabled:v.ID!==e.commissioner.ID},f.createElement("option",{value:"TRAD"},"Traditional"),f.createElement("option",{value:"TP"},"Total Points"),f.createElement("option",{value:"ALLPLAY"},"All Play"),f.createElement("option",{value:"PIRATE"},"Pirate"),f.createElement("option",{value:"GUILLOTINE"},"Guillotine")),f.createElement("label",{htmlFor:"leagueKind"},"League Type")),v.ID===e.commissioner.ID?f.createElement("div",{className:"d-grid mb-3"},f.createElement("button",{className:"btn btn-success btn-lg",type:"submit"},"Save Settings")):""))}function G(e){var t=n(r.exports.useState(!0),2),a=t[0],o=t[1],i=n(r.exports.useState([]),2),l=i[0],u=i[1],s=n(r.exports.useState([]),2),c=s[0],d=s[1],p=n(r.exports.useState([]),2),m=p[0],h=p[1],v=r.exports.useContext(w),g=r.exports.useContext(k),y=["Kind","DraftOrder"],b=["Time"],x=["Rounds","DraftClock"];function S(t){t.preventDefault();var n=Object.assign({},e.settings),r=t.target.id.split("_");if(t.target.name.startsWith("Time")){var a=e.settings[r[0]].Time.split("T");"Time_date"===t.target.name?n[r[0]].Time=t.target.value+"T"+a[1]+":00Z":n[r[0]].Time=a[0]+"T"+t.target.value+":00Z"}else r.length>2?n[r[0]][r[1]][t.target.name]=isNaN(parseFloat(t.target.value))?t.target.value:parseFloat(t.target.value):n[r[0]][t.target.name]=isNaN(parseInt(t.target.value))?t.target.value:parseInt(t.target.value);e.setSettings(n)}r.exports.useEffect((function(){var t;t=[],Object.entries(e.settings.draft).forEach((function(r){var a=n(r,2),o=a[0],i=a[1];switch(function(e){return y.includes(e)?"select":b.includes(e)?"time":x.includes(e)?"number":"text"}(o)){case"select":var l;l="Kind"===o?[f.createElement("option",{key:"TRAD",value:"TRAD"},"Traditional"),f.createElement("option",{key:"AUCTION",value:"AUCTION"},"Auction")]:[f.createElement("option",{key:"SNAKE",value:"SNAKE"},"Snake"),f.createElement("option",{key:"STRAIGHT",value:"STRAIGHT"},"Straight"),f.createElement("option",{key:"CURSED",value:"CURSED"},"Cursed")],t.push(f.createElement("div",{key:"draft_"+o,className:"form-floating"},f.createElement("select",{id:"draft_"+o,name:o,value:i,onChange:S,className:"form-select",disabled:v.ID!==e.commissioner.ID},l.map((function(e){return e}))),f.createElement("label",{htmlFor:"draft_"+o},o)));break;case"number":t.push(f.createElement("div",{key:"draft_"+o,className:"form-floating"},f.createElement("input",{className:"form-control",type:"number",name:o,id:"draft_"+o,value:i,onChange:S,placeholder:0,disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"draft_"+o},o)));break;case"time":var u=new Date(Date.now()).toISOString().split("T"),s=i.split("T");t.push(f.createElement("div",{className:"row"},f.createElement("div",{className:"col"},f.createElement("input",{type:"date",id:"draft_"+o+"_date",name:o+"_date",className:"form-control",min:u[0],value:s[0],onChange:S,disabled:v.ID!==e.commissioner.ID})),f.createElement("h4",{className:"fs-6 m-0 text-white"},"Draft Start"),f.createElement("div",{className:"col"},f.createElement("input",{type:"time",className:"form-control",id:"draft_"+o+"_time",name:o+"_time",value:s[1].replace("Z",""),onChange:S,disabled:v.ID!==e.commissioner.ID}))));break;default:"ID"!==o&&t.push(f.createElement("div",{key:"draft_key",className:"form-floating"},f.createElement("input",{className:"form-control",type:"text",name:o,id:"draft_"+o,value:i,placeholder:"",onChange:S,disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"draft_"+o},o)))}})),u(t),function(){var t=[];Object.entries(e.settings.positional).forEach((function(r){var a=n(r,2),o=a[0],i=a[1];"Kind"===o?t.push(f.createElement("div",{key:"positional_"+o,className:"form-floating"},f.createElement("select",{className:"form-select",name:o,id:"positional_"+o,value:i,onChange:S,disabled:v.ID!==e.commissioner.ID},f.createElement("option",{value:"TRAD"},"Traditional"),f.createElement("option",{value:"IDP"},"Individual Defensive Players"),f.createElement("option",{value:"CUSTOM"},"Custom")),f.createElement("label",{htmlFor:"positional_"+o},o))):"ID"===o||t.push(f.createElement("div",{key:"positional_"+o,className:"form-floating"},f.createElement("input",{name:o,className:"form-control",type:"number",id:"positional_"+o,value:i,max:12,step:1,onChange:S,disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"positional_"+o},o)))})),d(t)}(),function(){var t=[],r=0;Object.entries(e.settings.scoring).forEach((function(a){var o=n(a,2),i=o[0],l=o[1];t.push(f.createElement("div",{className:"row mb-1 pt-1 text-capitalize text-white border-top border-warning border-4"},f.createElement("h4",null,i))),Object.entries(l).forEach((function(a){var o=n(a,2),l=o[0],u=o[1],s=["Pass","Rush","Rec","Fumble","Touch","Shut","Yard","Fg"];l.startsWith(s[r])&&(t.push(f.createElement("div",{className:"row mb-1 pt-1 text-white border-top border-warning"},f.createElement("h5",null,T[s[r]]))),(r+=1)>s.length&&(r=0)),"ID"!==l&&t.push(f.createElement("div",{className:"col form-floating mb-2",style:{minWidth:"26%"}},f.createElement("input",{className:"form-control",type:"number",name:l,id:"scoring_"+i+"_"+l,value:u,max:12,step:.01,onChange:S,disabled:v.ID!==e.commissioner.ID}),f.createElement("label",{htmlFor:"scoring_"+i+"_"+l},R[l])))}))})),h(t)}()}),[e.settings]),r.exports.useEffect((function(){l.length>0&&c.length>0&&m.length>0&&o(!1)}),[l,c,m]);var T={Pass:"Pass Scoring",Rush:"Rush Scoring",Rec:"Receiving Scoring",Fumble:"Miscellaneous Scoring",Touch:"Defensive Feat Scoring",Shut:"Points Allowed Scoring",Yard:"Yards Allowed Scoring",Fg:"Field Goal Scoring"},R={PassAttempt:"Attempt",PassCompletion:"Completion",PassYard:"Yard",PassTouchdown:"Touchdown",PassInterception:"Interception",PassSack:"Sack",RushAttempt:"Attempt",RushYard:"Yard",RushTouchdown:"Touchdown",ReceivingTarget:"Target",Reception:"Reception",ReceivingYard:"Yard",ReceivingTouchdown:"Touchdown",Fumble:"Fumble",FumbleLost:"Fmb Lost",MiscTouchdown:"Touchdown",TwoPointConversion:"2-PT Conv",TwoPointPass:"2-PT Pass",Touchdown:"Touchdown",Sack:"Sack",Interception:"Interception",Safety:"Safety",Shutout:"Shutout",Points6:"1-6 Points",Points13:"7-13 Points",Points20:"14-20 Points",Points27:"21-27 Points",Points34:"28-34 Points",Points35:"35+ Points",YardBonus:"Bonus",Yards:"Yard",Fg29:"0-29 Yard",Fg39:"30-39 Yard",Fg49:"40-49 Yard",Fg50:"50+ Yard",ExtraPoint:"PAT"};return a?f.createElement("div",null,"loading..."):f.createElement("div",{className:"p-2"},f.createElement("form",{name:"draft",className:"form-control overflow-hidden bg-warning rounded",onSubmit:function(t){t.preventDefault();for(var n=0,r=0;r<Object.keys(e.settings.positional).length;r++){var a=Object.values(e.settings.positional)[r];isNaN(a)||(n+=a)}if(n<e.settings.draft.Rounds)return g("More Rounds than open team positions, please lower rounds or add more positions",0),null;var o=function(){var t=C(N.mark((function t(){var n,r;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/settings/setdraft/"+e.league,{method:"POST",headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/json"},body:JSON.stringify(e.settings)});case 2:return n=t.sent,t.next=5,n.json();case 5:r=t.sent,n.ok?g("Draft Settings Saved",1):g("Save failed due to: "+r,0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();o().catch((function(e){return console.error(e)}))}},f.createElement("h2",{className:"display-5"},"Draft Settings"),f.createElement("div",{className:"row p-1 m-2 bg-success rounded"},f.createElement("h3",{className:"display-6 text-white"},"General Settings"),f.createElement("p",{className:" fw-bold text-white"},"Draft will be eligible to start any time after set time, and will start when the Commissioner clicks the start draft button"),l.map((function(e,t){return f.createElement("div",{key:"draftSettings_"+t,className:"col p-2",style:{minWidth:"33%"}},e)}))),f.createElement("div",{className:"row p-1 m-2 bg-success rounded"},f.createElement("h3",{className:"display-6 text-white"},"Positional Settings"),f.createElement("p",{className:" fw-bold text-white"},"Positional settings define how many players can start at a given position on a team"),c.map((function(e,t){return f.createElement("div",{key:"positionalSettings"+t,className:"col bg-success p-2",style:{minWidth:"20%"}},e)}))),f.createElement("div",{className:"row p-1 m-2 bg-success rounded"},f.createElement("h3",{className:"display-6 text-white"},"Scoring Settings"),m.map((function(e){return e}))),v.ID===e.commissioner.ID?f.createElement("div",{className:"d-grid m-3"},f.createElement("input",{className:"btn btn-success btn-lg",type:"submit",value:"Change Draft settings"})," "):""))}function X(){var e=n(r.exports.useState(0),2),t=e[0],a=e[1],o=r.exports.useContext(w);return 0!==t?f.createElement("div",{className:"bg-white p-2 m-2",style:{minHeight:"80vh"}},f.createElement(Y,{openLeague:a,ID:t})):f.createElement("div",{className:"bg-white p-2 m-2 text-center",style:{minHeight:"80vh"}},f.createElement("h1",{className:"display-4 text-capitalize"},o.name," Dashboard"),f.createElement("div",{className:"row p-3"},f.createElement(te,{openLeague:a})),f.createElement("div",{className:"row"},f.createElement("h2",{className:"display-5"},"Active Leagues"),f.createElement(J,{openLeague:a})))}function J(e){var t=n(r.exports.useState(!0),2),a=t[0],o=t[1],i=n(r.exports.useState([]),2),l=i[0],u=i[1],s=n(r.exports.useState([]),2),c=s[0],d=s[1],p=n(r.exports.useState([]),2),m=p[0],h=p[1],v=n(r.exports.useState(!0),2),g=v[0],y=v[1];function b(){g?(y(!1),u(c)):(y(!0),u(m))}return r.exports.useEffect((function(){var e=function(){var e=C(N.mark((function e(){var t,n,r,a;return N.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/leagues",{method:"GET"});case 2:return t=e.sent,e.next=5,t.json();case 5:null!==(n=e.sent).leagues&&(r=n.leagues.map((function(e){return e})),h(r),u(r)),null!==n.invites&&(a=n.invites.map((function(e){return e})),d(a));case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e().catch((function(e){return console.log("fail:",e)})),o(!1)}),[]),a?f.createElement("div",null,"loading..."):f.createElement("div",null,f.createElement("div",null,g?f.createElement("div",{className:"row d-grid"},f.createElement("div",{className:"btn-group",role:"group","aria-label":"Active/Completed draft toggle"},f.createElement("button",{className:"btn btn-dark",disabled:!0},"Leagues"),f.createElement("button",{className:"btn btn-warning",onClick:b},"Invites")),f.createElement(Z,{leagues:l,openLeague:e.openLeague})):f.createElement("div",{className:"row d-grid"},f.createElement("div",{className:"btn-group",role:"group"},f.createElement("button",{className:"btn btn-warning",onClick:b},"Leagues"),f.createElement("button",{className:"btn btn-dark",disabled:!0},"Invites")),f.createElement(ee,{leagues:l,openLeague:e.openLeague}))))}function Z(e){function t(t){t.preventDefault(),e.openLeague(t.target.name)}return f.createElement("table",{className:"table text-center"},f.createElement("thead",null,f.createElement("th",{colSpan:2},"League"),f.createElement("th",{colSpan:2},"Commissioner"),f.createElement("th",{colSpan:1})),f.createElement("tbody",null,e.leagues.map((function(e){return f.createElement("tr",{key:"active_"+e.ID},f.createElement("td",{colSpan:2,className:"text-center"},e.Name),f.createElement("td",{colSpan:2},e.Commissioner),f.createElement("td",{colSpan:1},f.createElement("button",{className:"btn btn-success btn-sm",id:"joinLeague"+e.ID,name:e.ID,onClick:t}," Rejoin!")))}))))}function ee(e){var t=n(r.exports.useState(0),2),a=t[0],o=t[1];function i(e){e.preventDefault();var t=parseInt(e.target.name,10);o(t)}return 0===a?f.createElement("table",{className:"table text-center"},f.createElement("thead",null,f.createElement("th",{colSpan:2},"League"),f.createElement("th",{colSpan:2},"Commissioner"),f.createElement("th",{colSpan:1})),f.createElement("tbody",null,e.leagues.map((function(e){return f.createElement("tr",{key:"leagues_"+e.ID},f.createElement("td",{colSpan:2},e.Name),f.createElement("td",{colSpan:2},e.Commissioner),f.createElement("td",{colSpan:1},f.createElement("button",{className:"btn btn-success btn-sm",id:"inviteJoin"+e.ID,name:e.ID,onClick:i},"Join!")))})))):f.createElement(ne,{openLeague:e.openLeague,league:a,close:function(){o(0)}})}function te(e){var t=n(r.exports.useState(!1),2),a=t[0],o=t[1],i=n(r.exports.useState(1),2),l=i[0],u=i[1],s=n(r.exports.useState(""),2),c=s[0],d=s[1],p=n(r.exports.useState(""),2),m=p[0],h=p[1];function v(e){e.preventDefault(),o(!a)}return a?f.createElement("div",null,f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-danger btn-sm",onClick:v},"Close League Wizard")),f.createElement("h2",{className:"display-5"},"Create a League!"),f.createElement("form",{onSubmit:function(t){t.preventDefault();var n=function(){var t=C(N.mark((function t(){var n,r;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/create",{method:"POST",body:JSON.stringify({maxOwner:l,league:c,team:m}),headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/JSON"}});case 2:return n=t.sent,t.next=5,n.json();case 5:r=t.sent,n.ok?e.openLeague(r.leagueID):x("Draft Creation Unsuccessful");case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))}},f.createElement("div",{className:"form-floating mb-3"},f.createElement("input",{name:"leagueName",id:"leagueName",type:"text",className:"form-control",onChange:function(e){e.preventDefault(),d(e.target.value)},placeholder:"Name Your League!",required:!0}),f.createElement("label",{htmlFor:"leagueName"},"Name Your League!")),f.createElement("div",{className:"mb-3"},f.createElement("label",{htmlFor:"teams",className:"display-6"},"Teams: ",l),f.createElement("input",{name:"teams",className:"form-range",onChange:function(e){e.preventDefault();var t=parseInt(e.target.value,10);u(t)},type:"range",min:"1",max:"14",value:l})),f.createElement("div",{className:"form-floating mb-3"},f.createElement("input",{name:"teamName",id:"teamName",type:"text",className:"form-control",onChange:function(e){e.preventDefault(),h(e.target.value)},placeholder:"Name Your Team!",required:!0}),f.createElement("label",{htmlFor:"teamName"},"Name Your Team!")),f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-success",type:"submit"}," Create League! ")))):f.createElement("div",{className:"d-grid"},f.createElement("button",{className:"btn btn-success",onClick:v},"Create a New League"))}function ne(e){var t=n(r.exports.useState(""),2),a=t[0],o=t[1],i=r.exports.useContext(k);return f.createElement("form",{onSubmit:function(t){t.preventDefault();var n=function(){var t=C(N.mark((function t(){var n,r;return N.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/league/join",{method:"POST",body:JSON.stringify({league:e.league,team:a}),headers:{"X-CSRF-TOKEN":E,"Content-Type":"Application/JSON"}});case 2:return n=t.sent,t.next=5,n.json();case 5:r=t.sent,n.ok?e.openLeague(e.league):i(r.error,0);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();n().catch((function(e){return console.error(e)}))}},f.createElement("button",{className:"btn-close btn-close",onClick:function(t){t.preventDefault(),e.close()}}),f.createElement("div",{className:"form-floating mb-3"},f.createElement("input",{type:"text",id:"teamNameCreate",onChange:function(e){o(e.target.value)},className:"form-control",placeholder:"Team Name",required:!0}),f.createElement("label",{htmlFor:"teamNameCreate"},"Team Name")),f.createElement("button",{type:"submit"},"Create Team"))}var re={ID:0,name:"",email:""};function ae(){var e=n(r.exports.useState(re),2),t=e[0],a=e[1],o=n(r.exports.useState({message:null,code:null}),2),i=o[0],l=o[1],u=n(r.exports.useState(!0),2),s=u[0],c=u[1];return r.exports.useEffect((function(){var e={ID:parseInt(document.getElementById("userID").textContent),name:document.getElementById("username").textContent,email:document.getElementById("userEmail").textContent};a(e),c(!1)}),[]),s?f.createElement("div",null,"Loading..."):f.createElement(f.StrictMode,null,f.createElement(w.Provider,{value:t},f.createElement(k.Provider,{value:function(e,t){l({message:e,code:t})}},f.createElement("div",{className:"container p-2",style:{minHeight:"100vh"}},f.createElement(L,null),f.createElement(x,{note:i,onClick:function(){l({message:null,code:null})}}),0===t.ID?f.createElement(oe,{handleUserChange:function(e){a(e)}}):f.createElement(X,null)))))}function oe(e){return f.createElement("div",{className:"row m-2 p-2 bg-white",style:{minHeight:"80vh"}},f.createElement("h1",{className:"display-4 text-center"},"FantasyDraft"),f.createElement("h2",{className:"display-5 text-center"},"Fantasy Football Filtered for Fluff"),f.createElement("div",{className:"col"},f.createElement("p",null,f.createElement("strong",null,"FantasyDraft")," allows you to"),f.createElement("ul",null,f.createElement("li",null,"Create Fantasy Football Leagues"),f.createElement("li",null,"Invite your friends to compete across an NFL season"),f.createElement("li",null,"Build a fantasy football team featuring NFL players through a live draft")),f.createElement("p",null,"Create an account and start your league today!")),f.createElement("div",{className:"col"},f.createElement(I,{onRegister:e.handleUserChange})))}y.render(f.createElement(ae,null),document.getElementById("root"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
